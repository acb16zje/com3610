{
  "2bebb2c28cee0708a66b77c2076ef224de4c8bdc": {
    "message": "mod_http2: adding defensive code for stream EOS handling, in case the request handler\n     missed to signal it the normal way (eos buckets). Addresses github issues \n     https://github.com/icing/mod_h2/issues/164, https://github.com/icing/mod_h2/issues/167\n     and https://github.com/icing/mod_h2/issues/170.",
    "match": "adding defensive code for stream EOS handling, in case the request handler\n     missed to signal it the normal way (eos buckets). Addresses github issues \n     https://github.com/icing/mod_h2/issues/164, https://github.com/icing/mod_h2/issues/167\n     and https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_session.c"
      },
      {
        "file": "modules/http2/h2_stream.c"
      },
      {
        "file": "modules/http2/h2_version.h"
      }
    ]
  },
  "83f3cd02156c29690ded9e055dc7f12b68487a90": {
    "message": "mod_brotli, mod_deflate: Restore the separate handling of 304 Not Modified\nresponses allowing these modules to properly set or fix-up the response\nheaders such as Vary or ETag.\n\nThis change follows up on r1837056 that disabled that special handling and\nthus resulted in a potential violation of RFC7232, 4.1:\n\n   The server generating a 304 response MUST generate any of the following\n   header fields that would have been sent in a 200 (OK) response to the\n   same request: Cache-Control, Content-Location, Date, ETag, Expires,\n   and Vary.)\n\nReferences:\n  https://lists.apache.org/thread.html/f5733ca6743757e8aa8b58a0cd9e27680971551c2a20f5606c66507e@%3Cdev.httpd.apache.org%3E\n  https://tools.ietf.org/html/rfc7232#section-4.1",
    "match": "change follows up on r1837056 that disabled that special handling and\nthus resulted in a potential violation of RFC7232, 4.1:\n\n   The server generating a 304 response MUST generate any of the following\n   header fields that would have been sent in a 200 (OK) response to the\n   same request: Cache-Control, Content-Location, Date, ETag, Expires,\n   and Vary.)\n\nReferences:\n  https://lists.apache.org/thread.html/f5733ca6743757e8aa8b58a0cd9e27680971551c2a20f5606c66507e@%3Cdev.httpd.apache.org%3E\n  https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_brotli.c"
      },
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "7623bc99d5c51b6db1489df53d230cdf85e2e863": {
    "message": "* modules/ssl/ssl_engine_pphrase.c (ssl_load_encrypted_pkey): Remove\n  redundant assignment (clang warning).",
    "match": "encrypted_pkey): Remove\n  redundant assignment (clang warning",
    "vulnerabilities": [
      "Encryption Issues"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_pphrase.c"
      }
    ]
  },
  "2e2f0be8868eb218bb8ef727c8f05d126e04d163": {
    "message": "mod_proxy_http: follow up to r1836588: fix drop of spurious 100 responses.\n\nr1836588 broke t/security/CVE-2008-2364.t by forwarding more than one\n\"100 continue\" response, fix it.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "3171e321a0ad58d926aba28a6867cd45f0df536e": {
    "message": "* using the, hopefully correct, ever elusive libressl version numbering check for the new openssl API calls, fixes PR 62548.",
    "match": "API calls, fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/md/md_crypt.c"
      }
    ]
  },
  "3088f2b050c4732b184f9896dd870a1fbf660384": {
    "message": "event, worker: runtime pool.\n\nMPMs event and worker both need a dedicated pool to handle the creation of\nthe threads (listener, workers) and synchronization objects (queues, pollset,\nmutexes...) in the start_threads() thread, with at least the lifetime of\nthe connections they handle, and thus survive pchild destruction (notably\nin ONE_PROCCESS mode, but SIG_UNGRACEFUL is concerned too).\n\nFor instance, without this fix, the below backtrace can happen in ONE_PROCCESS\nmode and a signal/^C is received (with active connections):\n\nThread 1 \"httpd\" received signal SIGSEGV, Segmentation fault.\n(gdb) bt\n#0  <BOOM>\n#1  0x00007ffff7c7e016 in apr_file_write (thefile=0x0, ...)\n                                          ^ NULL (cleared)\n                       at file_io/unix/readwrite.c:230\n#2  0x00007ffff7c7e4a7 in apr_file_putc (ch=1 '\\001', thefile=0x0)\n                                                      ^ NULL (cleared)\n                       at file_io/unix/readwrite.c:377\n#3  0x00007ffff7c8da4a in apr_pollset_wakeup (pollset=0x55555568b870)\n                                              ^ already destroyed by pchild\n                       at poll/unix/pollset.c:224\n#4  0x00007ffff7fc16c7 in decrement_connection_count (cs_=0x7fff08000ea0)\n                       at event.c:811\n#5  0x00007ffff7c83e15 in run_cleanups (cref=0x7fffe4002b78)\n                       at memory/unix/apr_pools.c:2672\n#6  0x00007ffff7c82c2f in apr_pool_destroy (pool=0x7fffe4002b58)\n                                            ^ master_conn\n                       at memory/unix/apr_pools.c:1007\n#7  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x7fff08000c28)\n                                            ^ ptrans\n                       at memory/unix/apr_pools.c:1004\n#8  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x555555638698)\n                                            ^ pconf\n                       at memory/unix/apr_pools.c:1004\n#9  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x555555636688)\n                                            ^ pglobal\n                       at memory/unix/apr_pools.c:1004\n#10 0x00005555555f4709 in ap_terminate ()\n                       at unixd.c:522\n#11 0x00007ffff6dbc8f1 in __run_exit_handlers (...)\n                       at exit.c:108\n#12 0x00007ffff6dbc9ea in __GI_exit (status=<optimized out>)\n                       at exit.c:139\n#13 0x00007ffff7fc1616 in clean_child_exit (code=0)\n                       at event.c:774\n                                  ^ pchild already destroyed here\n#14 0x00007ffff7fc5ae4 in child_main (child_num_arg=0, child_bucket=0)\n                       at event.c:2869\n...\n\n\nWhile at it, add comments about the lifetimes of MPMs pools and their objects,\nand give each pool a tag (e.g. \"pchild\" accordingly to other MPMs).",
    "match": "fix, the below backtrace can happen in ONE_PROCCESS\nmode and a signal/^C is received (with active connections):\n\nThread 1 \"httpd\" received signal SIGSEGV, Segmentation fault.\n(gdb) bt\n#0  <BOOM>\n#1  0x00007ffff7c7e016 in apr_file_write (thefile=0x0, ...)\n                                          ^ NULL (cleared)\n                       at file_io/unix/readwrite.c:230\n#2  0x00007ffff7c7e4a7 in apr_file_putc (ch=1 '\\001', thefile=0x0)\n                                                      ^ NULL (cleared)\n                       at file_io/unix/readwrite.c:377\n#3  0x00007ffff7c8da4a in apr_pollset_wakeup (pollset=0x55555568b870)\n                                              ^ already destroyed by pchild\n                       at poll/unix/pollset.c:224\n#4  0x00007ffff7fc16c7 in decrement_connection_count (cs_=0x7fff08000ea0)\n                       at event.c:811\n#5  0x00007ffff7c83e15 in run_cleanups (cref=0x7fffe4002b78)\n                       at memory/unix/apr_pools.c:2672\n#6  0x00007ffff7c82c2f in apr_pool_destroy (pool=0x7fffe4002b58)\n                                            ^ master_conn\n                       at memory/unix/apr_pools.c:1007\n#7  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x7fff08000c28)\n                                            ^ ptrans\n                       at memory/unix/apr_pools.c:1004\n#8  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x555555638698)\n                                            ^ pconf\n                       at memory/unix/apr_pools.c:1004\n#9  0x00007ffff7c82c12 in apr_pool_destroy (pool=0x555555636688)\n                                            ^ pglobal\n                       at memory/unix/apr_pools.c:1004\n#10 0x00005555555f4709 in ap_terminate ()\n                       at unixd.c:522\n#11 0x00007ffff6dbc8f1 in __run_exit_handlers (...)\n                       at exit.c:108\n#12 0x00007ffff6dbc9ea in __GI_exit (status=<optimized out>)\n                       at exit.c:139\n#13 0x00007ffff7fc1616 in clean_child_exit (code=0)\n                       at event.c:774\n                                  ^ pchild already des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/event/event.c"
      },
      {
        "file": "server/mpm/mpmt_os2/mpmt_os2_child.c"
      },
      {
        "file": "server/mpm/winnt/child.c"
      },
      {
        "file": "server/mpm/worker/worker.c"
      }
    ]
  },
  "c02660e7af09f5101be87bee450ef1620e0b4890": {
    "message": "mod_ratelimit: fix behavior with proxied content\n\nmod_ratelimit works by splitting data in \"chunks\"\nto send to the client, sleeping a predefined amount\nof time between them (200ms). So for example,\na rate-limit 40 value would correspond to a chunk size\nof 8192 bytes, flushed to the client every 200ms.\n\nThe idea works fine when httpd directly serves the\ncontent, since the filter will be called once with\na single bucket brigade. In the context of a proxied\ncontent though the filter is likely to be called multiple\ntimes, with a bucket brigade size that corresponds to\nthe maximum allowed buffer size. If this value is lower\nor higher than the chunk size, the filter will not\nproperly rate limit the data going to the client.\n\nThis patch solves the problem with two fix:\n1) do_sleep is now stored in the ctx context struct,\n   so if the filter is invoked multiple times it\n   will still sleep when needed. For example, say\n   that the chunk_size is 8192 and the bucket brigate\n   len is 10240: the filter will flush 8192 bytes\n   on the first invocation, sleep 200ms, flush the\n   remaining bytes and then finish. The next invocation\n   will do the same, clearly not leading to the\n   correct \"sleeping pattern\".\n2) The example above highlights also another issue:\n   mod_ratelimit should  flush only chunk_size bytes\n   at the time (I am now excluding the burst calculation\n   from the picture), and buffer between invocations\n   unless the brigade contains EOS.\n\nThe change has been tested with various scenarios and\nit looks working as expected, but of course more\nfeedback/testing is welcome.\n\nThe original patch was written by me and then Yann\nrefactored the code to be more precise and efficient,\nbasically transforming an axe in a wonderful Japanese\nkatana sword, so credits to him for this work.\n\nPR: 62362",
    "match": "fix behavior with proxied content\n\nmod_ratelimit works by splitting data in \"chunks\"\nto send to the client, sleeping a predefined amount\nof time between them (200ms). So for example,\na rate-limit 40 value would correspond to a chunk size\nof 8192 bytes, flushed to the client every 200ms.\n\nThe idea works fine when httpd directly serves the\ncontent, since the filter will be called once with\na single bucket brigade. In the context of a proxied\ncontent though the filter is likely to be called multiple\ntimes, with a bucket brigade size that corresponds to\nthe maximum allowed buffer size. If this value is lower\nor higher than the chunk size, the filter will not\nproperly rate limit the data going to the client.\n\nThis patch solves the problem with two fix:\n1) do_sleep is now stored in the ctx context struct,\n   so if the filter is invoked multiple times it\n   will still sleep when needed. For example, say\n   that the chunk_size is 8192 and the bucket brigate\n   len is 10240: the filter will flush 8192 bytes\n   on the first invocation, sleep 200ms, flush the\n   remaining bytes and then finish. The next invocation\n   will do the same, clearly not leading to the\n   correct \"sleeping pattern\".\n2) The example above highlights also another issue:\n   mod_ratelimit should  flush only chunk_size bytes\n   at the time (I am now excluding the burst calculation\n   from the picture), and buffer between invocations\n   unless the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_ratelimit.xml"
      },
      {
        "file": "modules/filters/mod_ratelimit.c"
      }
    ]
  },
  "3e3fc8d433767fbacdc6576b4197f1149c1c21e7": {
    "message": "mod_ssl: Fix merging of proxy SSL context outside <Proxy> sections.\n\nRegression introduced in 2.4.30. PR 62232.\n\nThe proxy SSL_CTX was not inherited from the vhost (the only available in\n2.4.29) in/for any directory context besides <Proxy>...\n\nMostly debugged and fixed by Rainer, thanks!",
    "match": "Fix merging of proxy SSL context outside <Proxy> sections.\n\nRegression introduced in 2.4.30. PR 62232.\n\nThe proxy SSL_CTX was not inherited from the vhost (the only available in\n2.4.29) in/for any directory context besides <Proxy>...\n\nMostly debug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/ssl_engine_config.c"
      }
    ]
  },
  "30139367201234e7ddcb7195098cf0ceabd35ad8": {
    "message": "On the trunk:\n\n* mod_http2: calculate unencrypted connection sniffing base64 only when log level is at required height. [Ruediger Pluem]",
    "match": "unencrypted connect",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/http2/h2_h2.c"
      }
    ]
  },
  "f1d5f5d6b8577b2428082050cb03531d7614dba4": {
    "message": "mod_remoteip: make proxy-protocol work on slave connections, e.g. in HTTP/2\n     requests. See also https://github.com/roadrunner2/mod-proxy-protocol/issues/6",
    "match": "remoteip: make proxy-protocol work on slave connections, e.g. in HTTP/2\n     requests. See also http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/metadata/mod_remoteip.c"
      }
    ]
  },
  "bd20caa6ffd4446bd9b1a9775d02e77bcd67f746": {
    "message": "Fix timeout logging in ap_process_request().\n\nWe can't use 'r' after ap_process_request_after_handler(), the core output\nfilter might have cleaned up its deferred bucket brigade on error, including\nthe EOR bucket.\n\nReported by: steffenal\nFixes SpiderLabs/ModSecurity#1542",
    "match": "Fix timeout logging in ap_process_request().\n\nWe can't use 'r' after ap_process_request_after_handler(), the core output\nfilter might have cleaned up its deferred bucket brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_request.c"
      }
    ]
  },
  "753d6114d7bab553ee8a1a4b333319a9bfb3785d": {
    "message": "Fix description of SSLProxyMachineCertificatePath to match the\nimplementation.",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      }
    ]
  },
  "92f4697bd47500282da3e3e51f63b0cbfcf64ec2": {
    "message": "mod_proxy: fix proxy connection cleanup from an n+2 pool.\n\nWhen connection_destructor() is called when pconf is gone, we can't dereference\nworker->cp anymore. This happens is one_process mode exit if we apr_terminate()\nor destroy the process pool directly (APR_POOL_DEBUG is needed too).\n\nFix this by NULL-ing worker->cp in conn_pool_cleanup(), and by registering it\nas a pre_cleanup.",
    "match": "fix proxy connection cleanup from an n+2 pool.\n\nWhen connection_destructor() is called when pconf is gone, we can't dereference\nworker->cp anymore. This happens is one_process mode exit if we apr_terminate()\nor des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "74196a22ff0df7c240d9c9884f3bdd3d5230100c": {
    "message": "mod_slotmem_shm: Rework SHM reuse/deletion.\n\nTo fix races with graceful restarts (PR 62044).\n\nThis commit does:\n1/ use a constant file name for all systems (no generation suffix which\n   makes a new SHM to be created for each restart, losing previous data)\n2/ maintain the list of the created SHMs accross restarts (ap_pglobal list)\n3/ not unlink the files on restart anymore (otherwise we can't reuse them)\n4/ not attach existing SHMs in slotmem_create() anymore (not suitable since\n   those are necessarily crash remainders)\n5/ add type/sizes consistency check for persisted slots on restoration\n6/ unlink the files only on stop/exit or before creating them (crash recovery)\n\nWe could possibly avoid 6/ (since we don't need to re-open files now) if we\nremove the file just after the SHM is created.  This would at least work for\nsystems with \"unlink semantic\" (i.e. unlink succeeds even if some descriptors\nare opened, the \"real\" thing happening when the last one desciptor closed), but\nthis wouldn't work for other systems so I kept the code generic for now.",
    "match": "fix races with graceful restarts (PR 62044).\n\nThis commit does:\n1/ use a constant file name for all systems (no generation suffix which\n   makes a new SHM to be created for each restart, losing previous data)\n2/ maintain the list of the created SHMs accross restarts (ap_pglobal list)\n3/ not unlink the files on restart anymore (otherwise we can't reuse them)\n4/ not attach existing SHMs in slotmem_create() anymore (not suitable since\n   those are necessarily crash remainders)\n5/ add type/sizes consistency check for persisted slots on restoration\n6/ unlink the files only on stop/exit or before creating them (crash recovery)\n\nWe could possibly avoid 6/ (since we don't need to re-open files now) if we\nremove the file just after the SHM is created.  This would at least work for\nsystems with \"unlink semantic\" (i.e. unlink succeeds even if some descriptors\nare opened, the \"real\" thing happening when the last one des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/slotmem/mod_slotmem_shm.c"
      }
    ]
  },
  "a10adeb61613405157fa53e7b33004b8ed7ddc1d": {
    "message": "Fix upgrading examples\n\n - providers are case sensitive\n - description didn't match example / 2.2 didn't match 2.4.\n\nSubmitted by: Hank Ibell\nCommitted by: covener",
    "match": "Fix upgrading examples\n\n - providers are case sensitive\n - des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/upgrading.xml"
      }
    ]
  },
  "0ec31cd623d81e9d7be4bdb2005b05406b8dbb30": {
    "message": "reverting r1807238 bc not addressing the issue https://github.com/icing/mod_h2/issues/120",
    "match": "addressing the issue https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_mplx.c"
      }
    ]
  },
  "1b42a39a57c8c323fead13a45375d9415694f107": {
    "message": "mod_rewrite/core: avoid the 'Vary: Host' header\n\nIn PR 58231 is was brought up that httpd adds the\nVary: Host header whenever a condition is set to true\nin mod_rewrite or in an <If> block.\n\nThe https://tools.ietf.org/html/rfc7231#section-7.1.4\nsection seems to disallow this use case:\n\n\"The \"Vary\" header field in a response describes \"\n\"what parts of a request message, \"\n\"aside from the method, Host header field, [...]\"\n\nI had a chat with the folks in #traffic-server and\nthey don't see much point in having a Vary: Host header,\nplus it was reported that Varnish doesn't like it very\nmuch (namely it does not cache the response when\nit sees the header, links of the report in the PR).\n\nI don't see much value in this behavior of httpd so\nI am inclined to remove this response header value,\nbut I'd be glad to get a more experienced opinion.",
    "match": "adds the\nVary: Host header whenever a condition is set to true\nin mod_rewrite or in an <If> block.\n\nThe https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "server/util_expr_eval.c"
      }
    ]
  },
  "0b9673c9780be60024a996dc2eca479dced7f9c4": {
    "message": "On the trunk:\n\nmod_ssl: adding ssl_policies.h[.in] for policy cipher/protocol definitions. Use \n     update_policies.py to update manually from Mozilla JSON definitions at\n     https://statics.tls.security.mozilla.org/server-side-tls-conf.json",
    "match": "adding ssl_policies.h[.in] for policy cipher/protocol definitions. Use \n     update_policies.py to update manually from Mozilla JSON definitions at\n     https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/mod_ssl.dsp"
      },
      {
        "file": "modules/ssl/ssl_engine_config.c"
      },
      {
        "file": "modules/ssl/ssl_policies.h"
      },
      {
        "file": "modules/ssl/ssl_policies.h.in"
      },
      {
        "file": "modules/ssl/update_policies.py"
      }
    ]
  },
  "f720854d5a45f27e94e96f14cb2b26124e75036f": {
    "message": "On the trunk:\n\nmod_md: v0.9.5:\n     - New directive (srly: what do you expect at this point?) \"MDMustStaple on|off\" to control if\n       new certificates are requested with the OCSP Must Staple extension.\n     - Known limitation: when the server is configured to ditch and restart child processes, for example\n       after a certain number of connections/requests, the mod_md watchdog instance might migrate \n       to a new child process. Since not all its state is persisted, some messsages might appear a\n       second time in the logs.\n     - Adding checks when 'MDRequireHttps' is used. It is considered an error when 'MDPortMap 443:-'\n       is used - which negates that a https: port exists. Also, a warning is logged if no \n       VirtualHost can be found for a Managed Domain that has port 443 (or the mapped one) in\n       its address list.\n     - New directive 'MDRequireHttps' for redirecting http: traffic to a Managed Domain, permanently\n       or temporarily.\n     - Fix for using a fallback certificate on initial signup of a Managed Domain. Requires also\n       a changed mod_ssl patch (v5) to take effect.\n     - compatibility with libressl",
    "match": "Adding checks when 'MDRequireHttps' is used. It is considered an error when 'MDPortMap 443:-'\n       is used - which negates that a https",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/md/md.h"
      },
      {
        "file": "modules/md/md_acme_authz.c"
      },
      {
        "file": "modules/md/md_core.c"
      },
      {
        "file": "modules/md/md_crypt.c"
      },
      {
        "file": "modules/md/md_crypt.h"
      },
      {
        "file": "modules/md/md_reg.c"
      },
      {
        "file": "modules/md/md_reg.h"
      },
      {
        "file": "modules/md/md_store_fs.c"
      },
      {
        "file": "modules/md/md_util.c"
      },
      {
        "file": "modules/md/md_util.h"
      },
      {
        "file": "modules/md/md_version.h"
      },
      {
        "file": "modules/md/mod_md.c"
      },
      {
        "file": "modules/md/mod_md_config.c"
      },
      {
        "file": "modules/md/mod_md_config.h"
      }
    ]
  },
  "74aa75ee977940fe2896ba37eddd528d53f247fd": {
    "message": "docs: update the prettify.js files with new directives\n\nProcedure that I've used:\n\n1) Copy https://httpd.apache.org/docs/trunk/mod/directives.html\n   to a text file.\n2) Generate a csv with something like \n   cat /tmp/trunk_directives | sort | tr \"\\n\" \",\"\n3) Replace the content of CONFIG_KEYWORDS in prettify.js\n   with the list generated in 2)\n4) Run the command the MINIFY command to generate prettify.min.js\n\nThis commit should hopefully allow a better syntax highlighting\nin our docs examples.",
    "match": "update the prettify.js files with new directives\n\nProcedure that I've used:\n\n1) Copy https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/style/scripts/prettify.js"
      },
      {
        "file": "docs/manual/style/scripts/prettify.min.js"
      }
    ]
  },
  "eb8abb96cb389a3ae7d5f5871b42e36e57eb6315": {
    "message": "htdigest: prevent buffer overflow when strings in lines are too long.\n\nReported by: Hanno B\u00f6ck\nPR: 61511",
    "match": "prevent buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "8595689c0d424961024c5648df689d13325a5778": {
    "message": "On the trunk:\n\n  *) mod_http2: DoS flow control protection is less agressive as long as active tasks stay\n     below worker capacity. Intended to fix problems with media streaming.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_mplx.c"
      }
    ]
  },
  "46dc37e19f95d3af50d522c1ad63ee30f7575fd3": {
    "message": "On the trunk:\n\nmod_md v0.7.0: \n     - LIVE: the real Let's Encrypt CA is now live by default! If you need to experiment, configure\n           MDCertificateAuthority https://acme-staging.api.letsencrypt.org/directory   \n     - When existing, complete certificates are renewed, the activation of the new ones is\n       delayed by 24 hours (or until the existing ones expire, whatever is earler) to accomodate\n       for clients with weird clocks, refs #1. \n     - Fixed store sync when MDCAChallenges was removed again from an MD. \n     - Fixed crash when MD matched the base server, fixes #23\n     - Fixed watchgod resetting staging when server processes disappeared (e.g. reached\n       max requests or other limits).",
    "match": "api.letsencrypt.org/directory   \n     - When existing, complete certificates are renewed, the activation of the new ones is\n       delayed by 24 hours (or until the existing ones expire, whatever is earler) to accomodate\n       for clients with weird clocks, refs #1. \n     - Fixed store sync when MDCAChallenges was removed again from an MD. \n     - Fixed crash when MD matched the base server, fixes #23\n     - Fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/md/md.h"
      },
      {
        "file": "modules/md/md_acme_drive.c"
      },
      {
        "file": "modules/md/md_cmd_reg.c"
      },
      {
        "file": "modules/md/md_core.c"
      },
      {
        "file": "modules/md/md_crypt.c"
      },
      {
        "file": "modules/md/md_crypt.h"
      },
      {
        "file": "modules/md/md_reg.c"
      },
      {
        "file": "modules/md/md_reg.h"
      },
      {
        "file": "modules/md/md_util.c"
      },
      {
        "file": "modules/md/md_util.h"
      },
      {
        "file": "modules/md/md_version.h"
      },
      {
        "file": "modules/md/mod_md.c"
      },
      {
        "file": "modules/md/mod_md_config.c"
      },
      {
        "file": "modules/md/mod_md_config.h"
      }
    ]
  },
  "acdd1f9bc43b9cd095e71fe08e3dee8cce2b4329": {
    "message": "common|synopsis.xsl: rename directive type=sections id generation\n\nThis commits is a follow up of r1805189 and it is meant\nto allow directives with the same name but different type\nto coexist in the same document without triggering errors\nwhile executing validate-xhtml.\n\nFor example: mod_md.xml recently introduced the following:\n\n* ManagedDomain\n* <ManagedDomain> (this one is type=section)\n\nIn my opinion this is a perfectly valid use case and it should\nbe allowed/handled correctly by the doc generation process/validation.\n\nIn order to avoid clashing the directive ids will get a suffix\ncalled \"section\" if type=section will be present as param.\n\nQuicklinks, <directive> links have been updated to the new\nscheme to avoid dandling pointers in the doc.\n\nComments/reviews are welcome, if I left something behind\nplease let me know.",
    "match": "sections id generation\n\nThis commits is a follow up of r1805189 and it is meant\nto allow directives with the same name but different type\nto coexist in the same document without triggering errors\nwhile executing validate-xhtml.\n\nFor example: mod_md.xml recently introduced the following:\n\n* ManagedDomain\n* <ManagedDomain> (this one is type=section)\n\nIn my opinion this is a perfectly valid use case and it should\nbe allowed/handled correctly by the doc generation process/validation.\n\nIn order to avoid clashing the directive ids will get a suffix",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/style/xsl/common.xsl"
      },
      {
        "file": "docs/manual/style/xsl/synopsis.xsl"
      }
    ]
  },
  "b2a5958244b7694d5c04196c48dd87635a90620d": {
    "message": "httpdunit: merge CVE-2017-9788 regression tests from feature branch",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "test/unit/mod_auth_digest.c"
      }
    ]
  },
  "a6ae987b3150dd0471fa7d4771e9345f3c3b9460": {
    "message": "CVE-2017-9788: add unit tests for get_digest_rec()\n\nIncluding the module source is a dirty hack, but maybe the direct way is\nbest for now. More functional tests are still TODO.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "test/unit/mod_auth_digest.c"
      }
    ]
  },
  "8dffc15e54a846e692e17e8761b3350df2d7f254": {
    "message": "mpm_winnt: Do not redefine the standard CONTAINING_RECORD() macro\nin child.c.\n\nThis definition has been added in https://svn.apache.org/r88498 \u2014 perhaps,\nbecause not every versions of SDK contained it at that time.\n\nBut since then, the macro has been available starting from Windows 2000\n(https://msdn.microsoft.com/en-us/library/windows/hardware/ff542043),\nand any available version of Windows SDK now should also contain it.",
    "match": "added in https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "9db53e77e9a0bb4189a50f5d1f38660e418d2489": {
    "message": "mpm_winnt: Use a LIFO stack instead of a FIFO queue to hold unused\ncompletion contexts, as that may significantly reduce the memory usage.\n\nThis simple change can have a noticeable impact on the amount of memory\nconsumed by the child process in various cases.  Every completion context\nin the queue has an associated allocator, and every allocator has it's\nap_max_mem_free memory limit which is not given back to the operating\nsystem.  Once the queue grows, it cannot shrink back, and every allocator\nin each of the queued completion contexts keeps up to its max_free amount\nof memory.  The queue can only grow when a server has to serve multiple\nconcurrent connections at once.\n\nWith that in mind, consider a case with a server that doesn't encounter many\nconcurrent connections most of the time, but has occasional spikes when\nit has to serve multiple concurrent connections.  During such spikes, the\nsize of the completion context queue grows.\n\nThe actual difference between using LIFO and FIFO orders shows up after\nsuch spikes, when the server is back to light load and doesn't see a lot\nof concurrency.  With FIFO order, every completion context in the queue\nwill be used in a round-robin manner, thus using *every* available allocator\none by one and ultimately claiming up to (N * ap_max_mem_free memory) from\nthe OS.  With LIFO order, only the completion contexts that are close to\nthe top of the stack will be used and reused for subsequent connections.\nHence, only a small part of the allocators will be used, and this can\nprevent all other allocators from unnecessarily acquiring memory from\nthe OS (and keeping it), and this reduces the overall memory footprint.\n\nPlease note that this change doesn't affect the worst case behavior, as\nit's still (N * ap_max_mem_free memory), but tends to behave better in\npractice, for the reasons described above.\n\nAnother thing worth considering is the new behavior when the OS decides\nto swap out pages of the child process, for example, in a close-to-OOM\ncondition.  Handling every new connection after the swap requires the OS\nto load the memory pages for the allocator from the completion context that\nis used for this connection.  With FIFO order, the completion contexts are\nused one by one, and this would cause page loads for every new connection.\nWith LIFO order, there will be almost no swapping, since the same completion\ncontext is going to be reused for subsequent new connections.",
    "match": "prevent all other allocators from unnecessarily acquiring memory from\nthe OS (and keeping it), and this reduces the overall memory footprint.\n\nPlease note that this change doesn't affect the worst case behavior, as\nit's still (N * ap_max_mem_free memory), but tends to behave better in\npractice, for the reasons des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "3b84b35798a1ed9f4b1caf41a2a6d8efee6a534a": {
    "message": "mpm_winnt: Avoid using TerminateThread() in case the shutdown routine\nhits a timeout while waiting for the worker threads to exit.\n\nUsing TerminateThread() can have dangerous consequences such as deadlocks \u2014\nsay, if the the thread is terminated while holding a lock or a heap lock\nin the middle of HeapAlloc(), as these locks would not be released.\nOr it can corrupt the application state and cause a crash.\n\n(See https://msdn.microsoft.com/en-us/library/windows/desktop/ms686717)\n\nRework the code to call TerminateProcess() in the described circumstances\nand leave the cleanup to the operating system.",
    "match": "deadlocks",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "502e2af7988e2508fe7e0f0d09248b02467a7fd3": {
    "message": "ap_find_token: add unit tests\n\nAdd previously embargoed test case for CVE-2017-7668.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "test/unit/util.c"
      }
    ]
  },
  "f822bb3daee60ff11b4675b85dd88294c474ea89": {
    "message": "util.c: ensure all TEST_CHAR loops stop at the null terminator\n\nIn the aftermath of CVE-2017-7668, decouple the business logic (\"is NULL\na T_HTTP_CTRL\") from the postcondition (\"must not go past the end of the\nstring\"). The NULL-byte classification in the TEST_CHAR table may change\nin the future.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/util.c"
      }
    ]
  },
  "3d23a999daa4b65708b032e088558f0c855723a0": {
    "message": "CVE-2017-3167: add documentation to ap_get_basic_auth_pw()\n\nNow that we've released, add clarifying comments to the now-deprecated\nAPI.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/http_protocol.h"
      }
    ]
  },
  "f049f810bfb2630159d2da2253bfd577f8f8a05c": {
    "message": "httpdunit: a Check-based unit test suite\n\nAdd a unit test suite based on Check:\n\n    https://libcheck.github.io/check/\n\nThe suite depends on the build system to automatically generate the code\nstubs that call every test case.\n\nhttpdunit is automatically enabled in the build if configure is able to\nfind Check via pkg-config. At the moment pkg-config is the only official\n(non-deprecated) way to build and link against Check with an autoconf\nsystem, since platforms may distribute Check as a static library.\n\nNote that Check is an LGPL'd library, so we can't distribute test\nobjects and binaries. Building and running the suite remains optional\nand is not required to run the server.",
    "match": "Add a unit test suite based on Check:\n\n    https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Makefile.in"
      },
      {
        "file": "build/httpdunit_gen_cases.pl"
      },
      {
        "file": "build/httpdunit_gen_stubs.pl"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "test/httpdunit.c"
      },
      {
        "file": "test/httpdunit.h"
      }
    ]
  },
  "c22f9355c1a5319c888978164c7a2bfe4d45205d": {
    "message": "Remove 3DES by default for users of older crypto librarys; the cipher\nhas been reclassified in current OpenSSL releases as WEAK due to 112\nor fewer bits of remaining cipher strength, while the Sweet32 disclosure\nextended the criticism of RC4 on to 3DES. (IDEA, which potentially has the\nsame issue, is never enabled by default in OpenSSL, due to patent concerns.)\n\nThis commit does not change default httpd behavior, but alters the suggested\nbehavior of newly provisioned httpd servers. Where adopted, XP with IE8 will\nno longer handshake with mod_ssl (previously, XP with IE6 would not handshake.)\nThe same net effect occurs where OpenSSL is updated to 1.1.0.",
    "match": "Remove 3DES by default for users of older crypto librarys; the cipher\nhas been reclassified in current OpenSSL releases as WEAK due to 112\nor fewer bits of remaining cipher strength, while the Sweet32 disclosure\nextended the criticism of RC4 on to 3DES. (IDEA, which potentially has the\nsame issue, is never enabled by default in OpenSSL, due to patent concerns.)\n\nThis commit does not change default httpd behavior, but alters the suggested\nbehavior of newly provisioned http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/extra/httpd-ssl.conf.in"
      }
    ]
  },
  "4542d7ea1037c8308774ddd14e2b5ff15973e8f4": {
    "message": "Add upgrade parameter to mod_proxy_wstunnel.\nThat allows to upgrade to jboss-remoting for example\nor to run an HTTP/1.1 backend that needs to upgrade to\nWebSocket.\nSee also:\n https://issues.jboss.org/browse/JBCS-254\n https://issues.jboss.org/browse/JBCS-291",
    "match": "Add upgrade parameter to mod_proxy_wstunnel.\nThat allows to upgrade to jboss-remoting for example\nor to run an HTTP/1.1 backend that needs to upgrade to\nWebSocket.\nSee also:\n https://issues.jboss.org/browse/JBCS-254\n https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_wstunnel.xml"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/mod_proxy_wstunnel.c"
      }
    ]
  },
  "ad707cbb18105296eb38f33ccd03ec60d9347637": {
    "message": "mod_brotli: Fix a minor typo in the description of BrotliAlterETag\nthat has been referring to httpd 2.2.x.\n\nThere's no mod_brotli in 2.2.x.",
    "match": "Fix a minor typo in the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_brotli.c"
      }
    ]
  },
  "6270849379c34dac9e8574a7bbd8b88b4a18116d": {
    "message": "mod_brotli: Update makefile to allow using Brotli library >= 0.6.0.\n\nThe 0.6.0 version has just been released [1], and it contains the\nnecessary API required for mod_brotli.\n\n[1] https://github.com/google/brotli/releases/tag/v0.6.0",
    "match": "Update makefile to allow using Brotli library >= 0.6.0.\n\nThe 0.6.0 version has just been released [1], and it contains the\nnecessary API required for mod_brotli.\n\n[1] https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/config.m4"
      }
    ]
  },
  "83886709568b93a940e897f6c8993f8d0b7304b5": {
    "message": "On the turnk:\n\nmod_http2: fixed two deadlocks introduced by removing nested mplx locking earlier.",
    "match": "deadlocks",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "modules/http2/h2_bucket_beam.c"
      },
      {
        "file": "modules/http2/h2_mplx.c"
      },
      {
        "file": "modules/http2/h2_task.c"
      },
      {
        "file": "modules/http2/h2_util.c"
      },
      {
        "file": "modules/http2/h2_workers.c"
      }
    ]
  },
  "a443df167eb5e247daa5da8d7dd10843b1b07844": {
    "message": "core: Fix leak of duplicated listeners (socket descriptors) on restart\nwhen ListenCoresBucketsRatio is configured (positive).",
    "match": "Fix leak of duplicated listeners (socket des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/listen.c"
      }
    ]
  },
  "9162ad1b82539da52ed49a3c0d3694d932eadaf2": {
    "message": "mod_ssl: follow up to r1740928: fix memory leaks from merged proxy_ctx.",
    "match": "fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_init.c"
      }
    ]
  },
  "c9ebd2b480cb75561ecf921ef9c50b709d19eb82": {
    "message": "mod_ssl: follow up to r1740928: fix memory leaks.",
    "match": "fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_config.c"
      },
      {
        "file": "modules/ssl/ssl_engine_init.c"
      }
    ]
  },
  "7163a03a06ab3df7a0aa1c9b2bf25f442f497808": {
    "message": "mod_brotli: Update makefile to cope with the pkg-config layout change\nin https://github.com/google/brotli/commit/fe9f9a9\n\nThere's a typo in the upstream commit [1] (s/brotlicommon/libbrotlicommon)\nthat currently produces an unusable libbrotlienc.pc file, but hopefully\nthis is going to be fixed there.\n\n[1] https://github.com/google/brotli/commit/fe9f9a9#diff-af3b638bc2a3e6c650974192a53c7291R409",
    "match": "Update makefile to cope with the pkg-config layout change\nin https://github.com/google/brotli/commit/fe9f9a9\n\nThere's a typo in the upstream commit [1] (s/brotlicommon/libbrotlicommon)\nthat currently produces an unusable libbrotlienc.pc file, but hopefully\nthis is going to be fixed there.\n\n[1] https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/config.m4"
      }
    ]
  },
  "b1a3338e011a17ad190fb7f66cf5ca9acf353570": {
    "message": "Replace PCRE with PCRE2 where it is available.\n\nThis patch removes the needless assignment of re_erroffset in the conf pool\nby the worker threads; such mistakes break the shared copy-on-write pages of\nmemory that should have remained common between all httpd worker processes.\n\nTwo de-optimizations are inherent in this patch, the former ovector-on-stack\nopportunity is lost unless implemented as a new general context. Safer that\nwe either create a new general context using pool allocation, or recycle a\nper pool or per thread match_data buffer of some arbitrary 10 elts or so.\n\nSubmitted by: wrowe, Petr Pisar <ppisar@redhat.com>",
    "match": "removes the needless assignment of re_erroffset in the conf pool\nby the worker threads; such mistakes break the shared copy-on-write pages of\nmemory that should have remained common between all http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "configure.in"
      },
      {
        "file": "server/util_pcre.c"
      }
    ]
  },
  "a6b06a419f1f893072faf69ffb4d42dee4535724": {
    "message": "Drop C-L header and message-body from HTTP 204 responses.\n\nThe C-L header can be set in a fcgi/cgi backend or in other\nfilters like ap_content_length_filter (with the value of 0),\nmeanwhile the message-body can be returned incorrectly\nby any backend. The idea is to remove unnecessary bytes\nfrom a HTTP 204 response.\n\nPR 51350",
    "match": "remove unnecessary bytes\nfrom a HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/http_filters.c"
      }
    ]
  },
  "c95d3c69e148af1a6730d43dc55a907c8f75e08b": {
    "message": "mod_session_crypto: Authenticate the session data/cookie with a MAC (SipHash)\nto prevent deciphering or tampering with a padding oracle attack.",
    "match": "prevent deciphering or tampering with a padding oracle attack",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/session/mod_session_crypto.c"
      }
    ]
  },
  "29c63b786ae028d82405421585e91283c8fa0da3": {
    "message": "SECURITY: CVE-2016-8740\n\nmod_http2: properly crafted, endless HTTP/2 CONTINUATION frames could be used to exhaust all server's memory.\n\nReported by: Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State University",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_session.c"
      },
      {
        "file": "modules/http2/h2_stream.c"
      }
    ]
  },
  "defa309e874c938c883f635ae6cd0644755986ab": {
    "message": "Remove unnecessary apr_table_do() function casts\n\nFunction casts can cause hard-to-debug corruption issues if a\ndeclaration is accidentally changed to be incompatible. Luckily, most of\nthe function casts for apr_table_do() calls are unnecessary. Remove\nthem, and adjust the signatures for helpers that weren't taking void* as\nthe first argument.\n\nThe remaining helper that requires a cast is http_filter.c's\nform_header_field(), which is probably where many of these casts were\ncopy-pasted from. I have left it as-is: it has other direct callers\nbesides apr_table_do(), and it's already documented with warnings not to\nchange the function signature.",
    "match": "Remove unnecessary apr_table_do() function casts\n\nFunction casts can cause hard-to-debug corruption issues if a\ndeclaration is accidentally changed to be incompatible. Luckily, most of\nthe function casts for apr_table_do() calls are unnecessary. Remove\nthem, and adjust the signatures for helpers that weren't taking void* as\nthe first argument.\n\nThe remaining helper that requires a cast is http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_filters.c"
      },
      {
        "file": "modules/http2/h2_from_h1.c"
      },
      {
        "file": "modules/metadata/mod_headers.c"
      },
      {
        "file": "modules/session/mod_session.c"
      },
      {
        "file": "server/util_cookies.c"
      }
    ]
  },
  "80d525cbe41999d100cddaf8212a2b25daed22df": {
    "message": "When redrawing the parser, ap_get_http_token looked to be useful, but there's\nno application for this yet in httpd, so hold off adding this function when\nwe backport the enhancements. ap_scan_http_token was entirely sufficient.\nIf the community wants this new function, we can add it when backporting\nwork is complete.\n\nThis patch, and the earlier patches Friday actually demanded an mmn major\nbump due to struct member changes. In any final backport, new members must\nbe added to the end of the struct to retain an mmn minor designation.",
    "match": "patch, and the earlier patches Friday actually demanded an mmn major\nbump due to struct member changes. In any final backport, new members must\nbe added to the end of the struct to retain an mmn minor des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "7d24a82191b11a955fc6cd825ac9cb873d0c6ced": {
    "message": "mod_dav: Fix a potential cause of unbounded memory usage or incorrect\nbehavior in a routine that sends <DAV:response>'s to the output filters.\n\nThe dav_send_one_response() function accepts the current head of the output\nfilter list as an argument, but the actual head can change between calls to\nap_pass_brigade().  This can happen with self-removing filters, e.g., with\nthe filter from mod_headers or mod_deflate.  Consequently, executing an\nalready removed filter can either cause unwanted memory usage or incorrect\nbehavior.\n\nThis patch changes the signature of the existing mod_dav's public API,\ndav_send_one_response(), because this API is not yet a part of any 2.4.x\nrelease.\n\n* modules/dav/main/mod_dav.c\n  (dav_send_one_response): Accept a request_rec instead of an ap_filter_t.\n   Write the response to r->output_filters.\n  (dav_send_multistatus, dav_stream_response): Update these calling sites\n   of dav_send_one_response().\n\n* modules/dav/main/mod_dav.h\n  (dav_send_one_response): Adjust definition.",
    "match": "Fix a potential cause of unbounded memory usage or incorrect\nbehavior in a routine that sends <DAV:response>'s to the output filters.\n\nThe dav_send_one_response() function accepts the current head of the output\nfilter list as an argument, but the actual head can change between calls to\nap_pass_brigade().  This can happen with self-removing filters, e.g., with\nthe filter from mod_headers or mod_deflate.  Consequently, executing an\nalready removed filter can either cause unwanted memory usage or incorrect\nbehavior.\n\nThis patch changes the signature of the existing mod_dav's public API,\ndav_send_one_response(), because this API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/dav/main/mod_dav.c"
      },
      {
        "file": "modules/dav/main/mod_dav.h"
      }
    ]
  },
  "2782a40f06ad901d7a06e79d1758dcdf1b26a8b1": {
    "message": "mod_brotli: Add initial implementation.\n\nThis new module supports dynamic Brotli (RFC 7932) compression.  Existing\nmod_deflate installations can benefit from better compression ratio by\nsending Brotli-compressed data to the clients that support it:\n\n    SetOutputFilter BROTLI_COMPRESS;DEFLATE\n\nThe module features zero-copy processing, which is only possible with the\nnew API from the upcoming 1.0.x series of brotli [1].  The Linux makefile\nworks against libbrotli [2], as currently the core brotli repository doesn't\noffer a way to build a library [3].  Apart from that, only the CMake build\nis now supported.\n\n[1] https://github.com/google/brotli\n[2] https://github.com/bagder/libbrotli\n[3] https://github.com/google/brotli/pull/332",
    "match": "Add initial implementation.\n\nThis new module supports dynamic Brotli (RFC 7932) compression.  Existing\nmod_deflate installations can benefit from better compression ratio by\nsending Brotli-compressed data to the clients that support it:\n\n    SetOutputFilter BROTLI_COMPRESS;DEFLATE\n\nThe module features zero-copy processing, which is only possible with the\nnew API from the upcoming 1.0.x series of brotli [1].  The Linux makefile\nworks against libbrotli [2], as currently the core brotli repository doesn't\noffer a way to build a library [3].  Apart from that, only the CMake build\nis now supported.\n\n[1] https://github.com/google/brotli\n[2] https://github.com/bagder/libbrotli\n[3] https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "CMakeLists.txt"
      },
      {
        "file": "docs/log-message-tags/next-number"
      },
      {
        "file": "modules/filters/config.m4"
      },
      {
        "file": "modules/filters/mod_brotli.c"
      },
      {
        "file": "os/win32/BaseAddr.ref"
      }
    ]
  },
  "ab1e176258d49d41bb75aeb4f485c4db4e932efa": {
    "message": "Prevent dangling buckets by safely (and always) cleanup passed out (master)\nbrigades.",
    "match": "Prevent dangling buckets by safely (and always) cleanup passed out (master)\nbrig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http2/h2_conn_io.c"
      }
    ]
  },
  "d64bc3e4ad819893dbc506ac70b5aec574633cb6": {
    "message": "mpm_winnt: remove duplication of ap_process_connection\n\nFurther follow-up to the previous commit: now that we no longer patch a\nnetwork bucket into the brigade, we can revert to calling\nap_process_connection() directly instead of duplicating its logic.",
    "match": "patch a\nnetwork bucket into the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "f6070d35b043e2bfa0156a89b16641dda2cc5cc2": {
    "message": "mpm_winnt: remove 'data' AcceptFilter in favor of 'connect'\n\nThe 'data' AcceptFilter optimization instructs Windows to wait until\ndata is received on a connection before completing the AcceptEx\noperation. Unfortunately, it seems this isn't performed atomically --\nAcceptEx \"partially\" accepts the incoming connection during the wait for\ndata, leaving all other incoming connections in the accept queue. This\nopens the server to a denial of service.\n\nSince the fix for this requires a substantial rearchitecture (likely\ninvolving multiple outstanding calls to AcceptEx), disable the 'data'\nfilter for now and replace it with 'connect', which uses the AcceptEx\ninterface but does not wait for data.\n\nUsers running prior releases of httpd on Windows should explicitly move\nto a 'connect' AcceptFilter in their configurations if they are\ncurrently using the default 'data' filter.\n\nMany thanks to mludha, Arthur Ramsey, Paul Spangler, and many others for\ntheir assistance in tracking down and diagnosing this issue.\n\nPR: 59970",
    "match": "remove 'data' AcceptFilter in favor of 'connect'\n\nThe 'data' AcceptFilter optimization instructs Windows to wait until\ndata is received on a connection before completing the AcceptEx\noperation. Unfortunately, it seems this isn't performed atomically --\nAcceptEx \"partially\" accepts the incoming connection during the wait for\ndata, leaving all other incoming connections in the accept queue. This\nopens the server to a denial of service.\n\nSince the fix for this requires a substantial rearchitecture (likely\ninvolving multiple outstanding calls to AcceptEx), disable the 'data'\nfilter for now and replace it with 'connect', which uses the AcceptEx\ninterface but does not wait for data.\n\nUsers running prior releases of http",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/log-message-tags/next-number"
      },
      {
        "file": "docs/manual/mod/core.xml"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "e62dee76dc7d7104acada86fb7bebe8996b77fcd": {
    "message": "Rename LenientWhitespace to UnsafeWhitespace and change StrictWhitespace\nto the default behavior, after discussion with fielding et al about the\npurpose of section 3.5. Update the documentation to clarify this.\n\nThis patch removes whitespace considerations from the Strict|Unsafe toggle\nand consolidates them all in the StrictWhitespace|UnsafeWhitespace toggle.\n\nAdded a bunch of logic comments to read_request_line parsing.\n\nDropped the badwhitespace list for an all-or-nothing toggle in rrl.\n\nLeading space before the method is optimized to be evaluated only once.\n\nToggled the request from HTTP/0.9 to HTTP/1.0 for more BAD_REQUEST cases.\n\nMoved s/[\\n\\v\\f\\r]/ / cleanup logic earlier in the cycle, to operate on\neach individual line read, and catch bad whitespace errors earlier.\nThis changes the obs-fold to more efficiently condense whitespace and\nforces concatinatination with a single SP, always. Overrides are not\nnecessary since obs-fold is clearly deprecated.",
    "match": "removes whitespace considerations from the Strict|Unsafe toggle\nand consolidates them all in the StrictWhitespace|UnsafeWhitespace toggle.\n\nAdded a bunch of logic comments to read_request_line parsing.\n\nDropped the badwhitespace list for an all-or-nothing toggle in rrl.\n\nLeading space before the method is optimized to be evaluated only once.\n\nToggled the request from HTTP/0.9 to HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.xml"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "b54d093d6cb9be31e9508560027a4d1e5ff5a8fe": {
    "message": "Skip message-body with HTTP 304 responses and mod_proxy_fcgi with no conn reuse.\n\nBackground: https://bz.apache.org/bugzilla/show_bug.cgi?id=59838\n\nThis commit should be an improvement for http://svn.apache.org/r1752347, in which\nI tried to resolve a long standing issue with mod_proxy_fcgi: when a FCGI backend\nreturns a response that will become a HTTP 304, mod_proxy_fcgi forces a break\nin the request processing ending up in reading the remaining bytes (for example\nthe message-body) and trying to intepret them as a FCGI header. This would cause\na error and a weird behavior:\n1) HTTP 304 response flushed to the client correctly.\n2) HTTP 503 logged in the access_log plus other bogus errors in the error_log.\nI tried to separate the behavior when connection reuse is set or not, to eliminate\nunnecessary latency in the latter case (which is the default).\n\nI tested the change with and without connection reuse successfully, but feedback is\nreally welcome. If nobody will have anything against it I'll then proceed to update\nmy 2.4.x backport proposal.",
    "match": "remaining bytes (for example\nthe message-body) and trying to intepret them as a FCGI header. This would cause\na error and a weird behavior:\n1) HTTP 304 response flushed to the client correctly.\n2) HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_fcgi.c"
      }
    ]
  },
  "9e91d2c09d154701fafa5e316000d40782c795f8": {
    "message": "Fix a potential buffer overflow.",
    "match": "Fix a potential buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/filters/sed0.c"
      }
    ]
  },
  "496d82f0020a6cb43ad7d003a981590f1ab9f905": {
    "message": "Follow up for the Bugfix checklist panel. Remove \":\" from Bugfix checklist, moved HTTPD to httpd, added the component=mod_name to the \"Open bug\" link.",
    "match": "Remove \":\" from Bugfix checklist, moved HTTPD to http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/style/lang/da.xml"
      },
      {
        "file": "docs/manual/style/lang/de.xml"
      },
      {
        "file": "docs/manual/style/lang/en.xml"
      },
      {
        "file": "docs/manual/style/lang/es.xml"
      },
      {
        "file": "docs/manual/style/lang/fr.xml"
      },
      {
        "file": "docs/manual/style/lang/ja.xml"
      },
      {
        "file": "docs/manual/style/lang/ko.xml"
      },
      {
        "file": "docs/manual/style/lang/pt-br.xml"
      },
      {
        "file": "docs/manual/style/lang/ru.xml"
      },
      {
        "file": "docs/manual/style/lang/tr.xml"
      },
      {
        "file": "docs/manual/style/lang/zh-cn.xml"
      },
      {
        "file": "docs/manual/style/xsl/synopsis.xsl"
      }
    ]
  },
  "8ea9fe7348b0945545a2a239b2063cd9dcfb8bba": {
    "message": "mod_http2: incrementing keepalives on each request started so that logging\n     %k gives increasing numbers per master http2 connection.",
    "match": "rementing keepalives on each request started so that logging\n     %k gives increasing numbers per master http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http2/h2_mplx.c"
      },
      {
        "file": "modules/http2/h2_task.c"
      }
    ]
  },
  "95dc9d5490f9dbaa450969f09ad00592d49e94bc": {
    "message": "mod_http2: fix for scoreboard updates missing, mem leak fix for slave connections",
    "match": "mem leak fix",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_io.c"
      },
      {
        "file": "modules/http2/h2_mplx.c"
      },
      {
        "file": "modules/http2/h2_task.c"
      },
      {
        "file": "modules/http2/h2_task_output.c"
      },
      {
        "file": "modules/http2/h2_version.h"
      }
    ]
  },
  "4171fbfcb249e63f934471054d7a0752272fb8ee": {
    "message": "mod_ssl: return non ambigous value in ssl_callback_SessionTicket() for\nencryption mode (we used to return 0, OpenSSL documents returning 1 instead).\n\nPractically this does not change anything since OpenSSL will only check for\n>= 0 return value (non error) for encryption mode (the other possible return\nvalues are only relevant for decryption mode).\n\nHowever the OpenSSL documentation for SSL_CTX_set_tlsext_ticket_key_cb()\nstates:\n\"\nThe return value of the cb function is used by OpenSSL to determine what\nfurther processing will occur. The following return values have meaning:\n\n2\n    This indicates that the ctx and hctx have been set and the session can\n    continue on those parameters. Additionally it indicates that the session\n    ticket is in a renewal period and should be replaced. The OpenSSL library\n    will call cb again with an enc argument of 1 to set the new ticket (see\n    RFC5077 3.3 paragraph 2).\n\n1\n    This indicates that the ctx and hctx have been set and the session can\n    continue on those parameters.\n\n0\n    This indicates that it was not possible to set/retrieve a session ticket\n    and the SSL/TLS session will continue by by negotiating a set of\n    cryptographic parameters or using the alternate SSL/TLS resumption\n    mechanism, session ids.\n    If called with enc equal to 0 the library will call the cb again to get a\n    new set of parameters.\n\nless than 0\n    This indicates an error.\n\"\n\nSo 0 is not appropriate in our code, 1 is what we really want (and it won't\nbreak if OpenSSL later changes its checks on the callback return value).\n\nReported by: oknet on github, pull request #18.",
    "match": "encryption mode (we used to return 0, OpenSSL documents returning 1 instead).\n\nPractically this does not change anything since OpenSSL will only check for\n>= 0 return value (non error) for encryption mode (the other possible return\nvalues are only relevant for decryption mode).\n\nHowever the OpenSSL documentation for SSL_CTX_set_tlsext_ticket_key_cb()\nstates:\n\"\nThe return value of the cb function is used by OpenSSL to determine what\nfurther processing will occur. The following return values have meaning:\n\n2\n    This indicates that the ctx and hctx have been set and the session can\n    continue on those parameters. Additionally it indicates that the session\n    ticket is in a renewal period and should be replaced. The OpenSSL library\n    will call cb again with an enc argument of 1 to set the new ticket (see\n    RFC5077 3.3 paragraph 2).\n\n1\n    This indicates that the ctx and hctx have been set and the session can\n    continue on those parameters.\n\n0\n    This indicates that it was not possible to set/retrieve a session ticket\n    and the SSL/TLS session will continue by by negotiating a set of\n    cryptographic parameters or using the alternate SSL/TLS resumption\n    mechanism, session ids.\n    If called with enc equal to 0 the library will call the cb again to get a\n    new set of parameters.\n\nless than 0\n    This indicates an error",
    "vulnerabilities": [
      "Encryption Issues"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "33b40d86d146a4bdffea8a98d17e7585c181e414": {
    "message": "mod_http2: some DoS protection, fix for read after free",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http2/h2_io.c"
      },
      {
        "file": "modules/http2/h2_io.h"
      },
      {
        "file": "modules/http2/h2_mplx.c"
      },
      {
        "file": "modules/http2/h2_mplx.h"
      },
      {
        "file": "modules/http2/h2_push.c"
      },
      {
        "file": "modules/http2/h2_request.c"
      },
      {
        "file": "modules/http2/h2_request.h"
      },
      {
        "file": "modules/http2/h2_session.c"
      },
      {
        "file": "modules/http2/h2_stream.c"
      },
      {
        "file": "modules/http2/h2_version.h"
      },
      {
        "file": "modules/http2/h2_workers.c"
      }
    ]
  },
  "90ce9f0c161a6fcbbf6dc25a532b45abcb6265c1": {
    "message": "Support for OpenSSL 1.1.0:\n- use SSL_peek instead of looping with\n  has_buffered_data().\n\nThis fixes t/security/CVE-2009-3555.t where\nhas_buffered_data() doesn't help, because it\nfinds the buffered data and doesn't call\nSSL_read(), so the reneg handshake isn't\ntriggered. SSL_peek() for 0 bytes seems to\nreliably trigger the reneg in every case.\n\nNo more polling/sleeping. The code for the\nOpenSSL 1.1.0 case is now again very close to\nthe pre 1.1.0 case.\n\nStill need to run the full test suite with a\nclean build.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      },
      {
        "file": "modules/ssl/ssl_private.h"
      }
    ]
  },
  "d934507aecdd7d9198596b847c4a434287751a46": {
    "message": "Support for OpenSSL 1.1.0:\n- partial support for renegotiations.\n  - Not a good design, need to poll until\n    renegotitation has finished.\n  - Loop criterion not right, if no client certs\n    will be send.\n  - Also doesn't work for EC or DH ciphers.\n    Unclear how to fix with current 1.1.0\n    API.\n  - Details see\n    http://marc.info/?t=145493359200002&r=1&w=2",
    "match": "fix with current 1.1.0\n    API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "9d690c056800eaf6d7d026e4abe814701885b0be": {
    "message": "removing HTTP_HEADER output filter on upgraded connections, so timeouts do not send http/1.1 responses any more",
    "match": "removing HTTP_HEADER output filter on upgraded connections, so timeouts do not send http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http2/h2_switch.c"
      }
    ]
  },
  "c51a73eb516f950eddf7a3005e95a70c28ccbe59": {
    "message": "Fix the use of the default 'flush' provider.\nImprove documentation for the \"flusher\" parameter.\nRemove useless empty lines.\n\nSee http://mail-archives.apache.org/mod_mbox/httpd-dev/200812.mbox/%3C494226C0.4050407@force-elite.com%3E for some more explanation.\nA python script is given there to test.\nI had to tweak it to have it work\n(use:\n        fd, payload = passfd.recvfd(conn.fileno())\ninstead of:\n        fd = passfd.recvfd(conn.fileno())\n)\n\n\nThis is a r1058621 regression, where somehow \"char *flusher\" has been turned into a \"char flusher[]\". So it is been broken since the beginning of 2.4.x\n\nAfter this change (i.e. r1058621), 'flusher' is no more a pointer (NULL'ed when the structure it belongs to is created) but the address of an array within a structure. It can not be NULL anymore.\nSo, we now have to look at the content of the array itself to see if it has been initialized or if we have to use the default value instead.",
    "match": "Remove useless empty lines.\n\nSee http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_fdpass.xml"
      },
      {
        "file": "modules/proxy/mod_proxy_fdpass.c"
      }
    ]
  },
  "3efef001c6d21d553106629b1677630ad5601354": {
    "message": "PR 53845: Remove commented config regarding DNT because the spec now has CR status (confirming our interpretation) and MS has committed to changing their implementation: http://blogs.microsoft.com/on-the-issues/2015/04/03/an-update-on-microsofts-approach-to-do-not-track/",
    "match": "Remove commented config regarding DNT because the spec now has CR status (confirming our interpretation) and MS has committed to changing their implementation: http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd.conf.in"
      }
    ]
  },
  "f60e083d1faabde4fa389f43acdd057c7e0c9492": {
    "message": "deduplicate the code handling the directory traversal for the\nSSL[Proxy]CACertificatePath and SSLProxyMachineCertificatePath\ndirectives",
    "match": "directory traversal for the\nSSL[Proxy]CACertificatePath and SSLProxyMachineCertificatePath\ndirectives",
    "vulnerabilities": [
      "Path / Directory Traversal"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_init.c"
      }
    ]
  },
  "ae403759f9bd36039c800b2ebd1272b6991f0bcd": {
    "message": "fixes description of ProtocolsHonorOrder directive",
    "match": "fixes des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.xml"
      }
    ]
  },
  "cd2b7a26c776b0754fb98426a67804fd48118708": {
    "message": "SECURITY: CVE-2015-3183 (cve.mitre.org)\n\nReplacement of ap_some_auth_required (unusable in Apache httpd 2.4)\nwith new ap_some_authn_required and ap_force_authn hook.\n\nSubmitted by: breser",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/http_request.h"
      },
      {
        "file": "server/request.c"
      }
    ]
  },
  "6a974059190b8a0c7e499f4ab12fe108127099cb": {
    "message": "*) SECURITY: CVE-2015-0253 (cve.mitre.org)\n     core: Fix a crash introduced in with ErrorDocument 400 pointing\n     to a local URL-path with the INCLUDES filter active, introduced\n     in 2.4.11. PR 57531. [Yann Ylavic]\n\n\nSubmitted By: ylavic\nCommitted By: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "643f0fcf3b8ab09a68f0ecd2aa37aafeda3e63ef": {
    "message": "*) SECURITY: CVE-2015-0228 (cve.mitre.org)\n     mod_lua: A maliciously crafted websockets PING after a script\n     calls r:wsupgrade() can cause a child process crash.\n     [Edward Lu <Chaosed0 gmail.com>]\n\nDiscovered by Guido Vranken <guidovranken gmail.com>\n\nSubmitted by: Edward Lu\nCommitted by: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/lua/lua_request.c"
      }
    ]
  },
  "1fb18200aa0a9fa2d525c729806034cd02f32608": {
    "message": "Remove the bitfield spec from the http_ctx_t.state enum\nas it causes an error-prone mismatch between the enum values and the\nstate values.  Caused a busy loop in windows.  \n\nAdded in r1484852 and trunk-only.\n\nSubmitted By: Edward Lu, Yann Ylavic\nCommitted By: covener",
    "match": "Remove the bitfield spec from the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_filters.c"
      }
    ]
  },
  "f73b93bd551c00746c53a2163bf7d17a58c38c26": {
    "message": "Add a hint about how CONNECT-method requests are filtered out by <Proxy>,\nand how to enable them. I could not find this information easily.\n\nIn particular, the straightforward <Proxy https://www.example.com>... does\nnot allow CONNECT to the corresponding SSL server. Probably it would work\nif a web client sent a \"GET https://www.example.com/ HTTP/1.1\" to the\nproxy, but none would do that.",
    "match": "Add a hint about how CONNECT-method requests are filtered out by <Proxy>,\nand how to enable them. I could not find this information easily.\n\nIn particular, the straightforward <Proxy https://www.example.com>... does\nnot allow CONNECT to the corresponding SSL server. Probably it would work\nif a web client sent a \"GET https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_connect.xml"
      }
    ]
  },
  "2d16863c1a4f79c2ebbdcb3a352a4ed7e7044be1": {
    "message": "*) SECURITY: CVE-2014-8109 (cve.mitre.org)\n     mod_lua: Fix handling of the Require line when a LuaAuthzProvider is\n     used in multiple Require directives with different arguments.\n     PR57204 [Edward Lu <Chaosed0 gmail.com>]\n\nSubmitted By: Edward Lu\nCommitted By: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/lua/mod_lua.c"
      }
    ]
  },
  "894cf92e7e7aa0cb5139d390d97107a0237c9405": {
    "message": "mod_authnz_fcgi is not vulnerable to the CVE-2014-3583 bug\n(and it is too late to use the same CVE anyway).\n\nThe code changes to mod_authnz_fcgi are retained in order\nto keep the similar code in sync between the two modules.",
    "match": "vulnerab",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "f392bdefdda033b2853dce4848d101b392ae6c91": {
    "message": "mod_proxy_fcgi, mod_authnz_fcgi: SECURITY: CVE-2014-3583 (cve.mitre.org)\nFix a potential crash with response headers' size above 8K.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/aaa/mod_authnz_fcgi.c"
      },
      {
        "file": "modules/proxy/mod_proxy_fcgi.c"
      }
    ]
  },
  "1245aa5f388130c5712cc8542d0e67f23b3da23b": {
    "message": "mod_proxy_fcgi: CVE-2014-3583: Fix a potential crash with response headers'\nsize above 8K.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_fcgi.c"
      }
    ]
  },
  "4f8a366ebc33b11ddb1747f52cd862fa3c6a599e": {
    "message": "mod_substitute: No real functional change, but:\n- define default for maximum line length\n  indepenent of MAX_STRING_LEN\n- Clarify line length check with a comment\n- add supported 'b' suffix to directive\n  description",
    "match": "fix to directive\n  des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_substitute.c"
      }
    ]
  },
  "7fd06ba54103283a2d4eba47873f04eac1fd2c29": {
    "message": "Move OCSP stapling information from a per-certificate store\n(ex_data attached to an X509 *) to a per-server hash which is\nallocated from the pconf pool. Fixes PR 54357, PR 56919 and\na leak with the certinfo_free cleanup function (missing\nOCSP_CERTID_free).\n\n* modules/ssl/ssl_util_stapling.c: drop certinfo_free, and add\n  ssl_stapling_certid_free (used with apr_pool_cleanup_register).\n  Switch to a stapling_certinfo hash which is keyed by the SHA-1\n  digest of the certificate's DER encoding, rework ssl_stapling_init_cert\n  to only store info once per certificate (allocated from the pconf\n  to the extent possible) and extend the logging.\n\n* modules/ssl/ssl_private.h: adjust prototype for\n  ssl_stapling_init_cert, replace ssl_stapling_ex_init with\n  ssl_stapling_certinfo_hash_init\n\n* modules/ssl/ssl_engine_init.c: adjust ssl_stapling_* calls\n\nBased on initial work by Alex Bligh <alex alex.org.uk>",
    "match": "Fixes PR 54357, PR 56919 and\na leak with the certinfo_free cleanup function (missing\nOCSP_CERTID_free).\n\n* modules/ssl/ssl_util_stapling.c: drop certinfo_free, and add\n  ssl_stapling_certid_free (used with apr_pool_cleanup_register).\n  Switch to a stapling_certinfo hash which is keyed by the SHA-1",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/log-message-tags/next-number"
      },
      {
        "file": "modules/ssl/ssl_engine_init.c"
      },
      {
        "file": "modules/ssl/ssl_private.h"
      },
      {
        "file": "modules/ssl/ssl_util_stapling.c"
      }
    ]
  },
  "1406f165f5cacb306e7f47a246aabbd10fba19ee": {
    "message": "SECURITY (CVE-2014-3581): Fix a mod_cache NULL pointer deference\nin Content-Type handling.\n\nmod_cache: Avoid a crash when Content-Type has an empty value. PR56924.\n\nSubmitted By: Mark Montague <mark catseye.org>\nReviewed By: Jan Kaluza",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/cache/cache_util.c"
      }
    ]
  },
  "823f671813c3bd83af6b7b58026b78465679428d": {
    "message": "* support/ab.c: Fix crash caused by integer overflow when printing stats with\nlot of requests (for example -n 500000000).",
    "match": "Fix crash caused by integer overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "support/ab.c"
      }
    ]
  },
  "94c255cd5a2c32b01ca61c9be66680b1487cc9c8": {
    "message": "Fix all errors related to apreq in doxygen processing.\nRemove useless comment. As far as I have tested (with dox 1.8.6), it works as described in doxygen doc.\n\nGenerated docs are still only visible from the \"List File\". More work is needed to have them included within the \"Module/Core routine\" architecture. However they are now useable and the ouput of \"make dox\" is now readable :)",
    "match": "Fix all errors related to apreq in doxygen processing.\nRemove useless comment. As far as I have tested (with dox 1.8.6), it works as des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/doxygen.conf"
      }
    ]
  },
  "89fd8d0353f6dc234bf026594c7b4f00caa8dbd8": {
    "message": "Improve doxygen comment.\n\nImprove layout, add trailing '.' in function description, capitalize first letter of description, fix typo, turn \\0 into \\\\0.\nMove the detailled description after @defgroup so that it is taken into account.",
    "match": "fix typo, turn \\0 into \\\\0.\nMove the detailled des",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/util_varbuf.h"
      }
    ]
  },
  "bd34b9d92894b7fc01810fc11a059fa30067e431": {
    "message": "*) SECURITY: CVE-2013-5704 (cve.mitre.org)\n     core: HTTP trailers could be used to replace HTTP headers\n     late during request processing, potentially undoing or\n     otherwise confusing modules that examined or modified\n     request headers earlier.  Adds \"MergeTrailers\" directive to restore\n     legacy behavior.  \n\nSubmitted By: Edward Lu, Yann Ylavic, Joe Orton, Eric Covener\nCommitted By: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/core.xml"
      },
      {
        "file": "docs/manual/mod/mod_log_config.xml"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/http/http_filters.c"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "modules/loggers/mod_log_config.c"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "69ce95ded2b530427240fe185ae513d0b6616576": {
    "message": "SECURITY (CVE-2014-0117): Fix a crash in mod_proxy.  In a reverse\nproxy configuration, a remote attacker could send a carefully crafted\nrequest which could crash a server process, resulting in denial of\nservice.\n\nThanks to Marek Kroemeke working with HP's Zero Day Initiative for\nreporting this issue.\n\n* server/util.c (ap_parse_token_list_strict): New function.\n\n* modules/proxy/proxy_util.c (find_conn_headers): Use it here.\n\n* modules/proxy/mod_proxy_http.c (ap_proxy_http_process_response):\n  Send a 400 for a malformed Connection header.\n\nSubmitted by: Edward Lu, breser, covener",
    "match": " denial of\nservice",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "6a5460f32415c2087b6dd5f67281b111a916a79b": {
    "message": "SECURITY (CVE-2014-0226): Fix a memory consumption denial of\nservice in the WinNT MPM used in all Windows installations.\nWorkaround: AcceptFilter <protocol> {none|connect}\n\nSubmitted by: trawick\nReviewed by: jorton, covener, jim",
    "match": " denial of\nservice",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "a30c26ca9d22f6482465de7adc4b045519127cfc": {
    "message": "*) SECURITY: CVE-2014-0231 (cve.mitre.org)\n   mod_cgid: Fix a denial of service against CGI scripts that do\n   not consume stdin that could lead to lingering HTTPD child processes\n   filling up the scoreboard and eventually hanging the server.\n   [Rainer Jung, Eric Covener, Yann Ylavic]\n\nSubmitted By: rjung, covener, ylavic\nReviewed By: trawick, jorton, covener, jim",
    "match": " denial of service",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/generators/mod_cgid.c"
      }
    ]
  },
  "2bcaded2f641a7444bc7519c96919bdacec86850": {
    "message": "*) SECURITY: CVE-2014-0118 (cve.mitre.org)\n     mod_deflate: The DEFLATE input filter (inflates request bodies) now\n     limits the length and compression ratio of inflated request bodies to avoid\n     denial of sevice via highly compressed bodies.  See directives \n     DeflateInflateLimitRequestBody, DeflateInflateRatioLimit,\n     and DeflateInflateRatioBurst.\n\nThanks to Giancarlo Pellegrino and Davide Balzarotti for reporting the issue.\n\nSubmitted By: ylavic, covener\nReviewed By: jorton, covener, jim",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_deflate.xml"
      },
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "b47236794b0209190934d019cab39c41e6e4c52b": {
    "message": "SECURITY (CVE-2014-0226): Fix a race condition in scoreboard handling,\nwhich could lead to a heap buffer overflow.  Thanks to Marek Kroemeke\nworking with HP's Zero Day Initiative for reporting this.\n\n* include/scoreboard.h: Add ap_copy_scoreboard_worker.\n\n* server/scoreboard.c (ap_copy_scoreboard_worker): New function.\n\n* modules/generators/mod_status.c (status_handler): Use it.\n\n* modules/lua/lua_request.c (lua_ap_scoreboard_worker): Likewise.\n\nReviewed by: trawick, jorton, covener, jim\nSubmitted by: jorton, covener",
    "match": "Fix a race condition in scoreboard handling,\nwhich could lead to a heap buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Miscellaneous",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/scoreboard.h"
      },
      {
        "file": "modules/generators/mod_status.c"
      },
      {
        "file": "modules/lua/lua_request.c"
      },
      {
        "file": "server/scoreboard.c"
      }
    ]
  },
  "65dc285250e16f4854aead199c4efe0b97f88f46": {
    "message": "Extend the scope of SSLSessionCacheTimeout to sessions\nresumed by TLS session resumption (RFC 5077).",
    "match": "Timeout to sessions\nresumed by TLS session",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      },
      {
        "file": "modules/ssl/ssl_engine_init.c"
      }
    ]
  },
  "bd5008c8f331f04b85bf92fd758d3e1254c54efc": {
    "message": "Fix PR 56480: PROPFIND walker doesn't encode hrefs properly\n\nReverts r1529559 partially (specifically the dav_xml_escape_uri) bit.\nReverts r1531505 entirely.\n\n* modules/dav/main/mod_dav.c\n  (dav_xml_escape_uri): Revert the piece of r1529559 that removes the URI\n    escaping from this function.\n\n* modules/dav/main/props.c\n  (dav_do_prop_subreq): Escape the URI before doing a sub request with it.\n    This resolves some properties like getcontenttype from failing to be\n    returned for files that contain characters that require encoding in their\n    path.\n\n* modules/dav/main/mod_dav.h\n  (dav_resource): Note the inconsistency in the documentation.\n\n* modules/dav/fs/repos.c\n  (dav_fs_get_resource): Don't use the unparsed_uri to set the uri field of\n    the resource.  This is the correct fix for the double encoding in mod_dav_fs\n    that led to the dav_xml_escape_uri() change and r1531505.\n  (dav_fs_walker, dav_fs_append_uri): Revert r1531505 changes.",
    "match": "aping from this function.\n\n* modules/dav/main/props.c\n  (dav_do_prop_subreq): Escape the URI before doing a sub request with it.\n    This resolves some properties like getcontenttype from failing to be\n    returned for files that contain characters that require encoding in their\n    path.\n\n* modules/dav/main/mod_dav.h\n  (dav_resource): Note the inconsistency in the documentation.\n\n* modules/dav/fs/repos.c\n  (dav_fs_get_resource): Don't use the unparsed_uri to set the uri field of\n    the resource.  This is the correct fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/dav/fs/repos.c"
      },
      {
        "file": "modules/dav/main/mod_dav.c"
      },
      {
        "file": "modules/dav/main/mod_dav.h"
      },
      {
        "file": "modules/dav/main/props.c"
      }
    ]
  },
  "83e8819638f6f1c27fa627e6b898711e67bf8c8e": {
    "message": "Add the ldap function to the expression API, allowing LDAP filters and\ndistinguished names based on expressions to be escaped correctly to\nguard against LDAP injection.\n\nNote: this requires at least APR v1.6.0 or above for the apr_escape API.",
    "match": "ldap function to the expression API, allowing LDAP filters and\ndistinguished names based on expressions to be escaped correctly to\nguard against LDAP injec",
    "vulnerabilities": [
      "Injection"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/expr.xml"
      },
      {
        "file": "docs/manual/mod/mod_authnz_ldap.xml"
      },
      {
        "file": "server/util_expr_eval.c"
      }
    ]
  },
  "02a265c992493a1e1d3de9f31fbb257b20d8b67b": {
    "message": "Remove SSLOCSPUseRequestNonce OpenSSL-0.9.7 requirement (0.9.8 already required by httpd-2.4) and set availability to 2.5-dev until further notice.",
    "match": "Remove SSLOCSPUseRequestNonce OpenSSL-0.9.7 requirement (0.9.8 already required by http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      }
    ]
  },
  "b607c27c7752aee912ed5506f6f66041c9fdf41f": {
    "message": "Remove compatibility references to httpd < 2.4.",
    "match": "Remove compatibility references to http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.xml"
      },
      {
        "file": "docs/manual/mod/mod_isapi.xml"
      },
      {
        "file": "docs/manual/mod/mod_log_config.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_suexec.xml"
      },
      {
        "file": "docs/manual/mod/mod_unixd.xml"
      }
    ]
  },
  "e149b6323d9939f7ce8b4f36590df724191b3620": {
    "message": "Remove compatibility references to httpd < 2.4 and OpenSSL < 0.9.8",
    "match": "Remove compatibility references to http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      }
    ]
  },
  "a639de59ad7912e9c0d191dc6158ae1c3bbe15e5": {
    "message": "mod_lua: Prevent HTTP Response Splitting by not allowing tables in the request_rec to be set with values containing newlines. This is a semi-ugly hack, but it will have to do until we find another way of setting these values.",
    "match": "HTTP Response Split",
    "vulnerabilities": [
      "Cross-Site Scripting"
    ],
    "files_changed": [
      {
        "file": "modules/lua/lua_apr.c"
      }
    ]
  },
  "8255e22e35392afd4152a80253236c2d5096201a": {
    "message": "CVE-2014-0098 (reported by Rainer Canavan <rainer-apache 7val com>)\nSegfaults w/ truncated cookie logging.\n\nClean up the cookie logging parser to recognize only the cookie=value pairs,\nnot valueless cookies.  This refactors multiple passes over the same string\nbuffer into a single pass parser.\n\nSubmitted by: wrowe\nReviewed by: rpluem, jim",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/loggers/mod_log_config.c"
      }
    ]
  },
  "1a950459084dbbceeff441f7fff1d03bdadddd03": {
    "message": "Add directives to control two protocol options:\n\n HttpContentLengthHeadZero - allow Content-Length of 0 to be returned on HEAD\n HttpExpectStrict - allow admin to control whether we must see \"100-continue\"\n\nThis is helpful when using Ceph's radosgw and httpd.\n\nInspired by: Yehuda Sadeh <yehuda@inktank.com>\nSee https://github.com/ceph/apache2/commits/precise\n\n* include/http_core.h\n  (core_server_config): Add http_cl_head_zero and http_expect_strict fields.\n* modules/http/http_filters.c\n  (ap_http_header_filter): Only clear out the C-L if http_cl_head_zero is not\n  explictly set.\n* server/core.c\n  (merge_core_server_configs): Add new fields.\n  (set_cl_head_zero, set_expect_strict): New config helpers.\n  (HttpContentLengthHeadZero, HttpExpectStrict): Declare new directives.\n* server/protocol.c\n  (ap_read_request): Allow http_expect_strict to control if we return 417.\n* include/ap_mmn.h\n  (MODULE_MAGIC_NUMBER_MAJOR, MODULE_MAGIC_NUMBER_MINOR): Bump.\n* CHANGES: Add a brief description.",
    "match": "Add directives to control two protocol options:\n\n HttpContentLengthHeadZero - allow Content-Length of 0 to be returned on HEAD\n HttpExpectStrict - allow admin to control whether we must see \"100-continue\"\n\nThis is helpful when using Ceph's radosgw and httpd.\n\nInspired by: Yehuda Sadeh <yehuda@inktank.com>\nSee https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "modules/http/http_filters.c"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "74aaa4ca44f0beb943f2bd2fe53afbf80113c610": {
    "message": "[trunk][doc] Fix CacheSocache description string",
    "match": "Fix CacheSocache des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_cache_socache.html.en"
      },
      {
        "file": "docs/manual/mod/mod_cache_socache.xml"
      }
    ]
  },
  "a053f47d8e55b178133a41a51513ae79451c5d8f": {
    "message": "Remove obsolete TODOs for mod_ssl:\n\nNo, we don't - it was removed in r90511.\n\nDH keys are changed for every connection, SSL_OP_SINGLE_DH_USE\nis applied since mod_ssl's initial commit (r88988).\n\nWe no longer have our own CRL callback (delegated to OpenSSL\nas of r1165056), so this is effectively moot.\n\nssl_engine_pphrase.c needs to be simplified, not blown up further\n(see also https://issues.apache.org/bugzilla/show_bug.cgi?id=24031,\nwhich few [if any] people really seem to miss)",
    "match": "Remove obsolete TODOs for mod_ssl:\n\nNo, we don't - it was removed in r90511.\n\nDH keys are changed for every connection, SSL_OP_SINGLE_DH_USE\nis applied since mod_ssl's initial commit (r88988).\n\nWe no longer have our own CRL callback (delegated to OpenSSL\nas of r1165056), so this is effectively moot.\n\nssl_engine_pphrase.c needs to be simplified, not blown up further\n(see also http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "d8e4890da68406d4d5d0ab85dc664586043a904e": {
    "message": "Remove SSLPKCS7CertificateFile support:\n\n- was never documented, so very unlikely that it was ever used\n\n- adds complexity without apparent benefit; PKCS#7 files can\n  be trivially converted to a file for use with SSLCertificateChainFile\n  (concatenated X509 CERTIFICATE chunks, openssl pkcs7 -print_certs...)\n\n- only supports PKCS7 files with PEM encoding, i.e. relies on a\n  non-standardized PEM header (cf. RFC 2315 and draft-josefsson-pkix-textual)\n\n- issues pointed out in http://mail-archives.apache.org/mod_mbox/httpd-dev/200607.mbox/%3C20060723093125.GA19423@redhat.com%3E\n  were never fully addressed (cf. r424707 and r424735)\n\n- has never worked in vhost context due to a cfgMergeString\n  call missing from modssl_ctx_cfg_merge",
    "match": "Remove SSLPKCS7CertificateFile support:\n\n- was never documented, so very unlikely that it was ever used\n\n- adds complexity without apparent benefit; PKCS#7 files can\n  be trivially converted to a file for use with SSLCertificateChainFile\n  (concatenated X509 CERTIFICATE chunks, openssl pkcs7 -print_certs...)\n\n- only supports PKCS7 files with PEM encoding, i.e. relies on a\n  non-standardized PEM header (cf. RFC 2315 and draft-josefsson-pkix-textual)\n\n- issues pointed out in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/STATUS"
      },
      {
        "file": "modules/ssl/mod_ssl.c"
      },
      {
        "file": "modules/ssl/ssl_engine_config.c"
      },
      {
        "file": "modules/ssl/ssl_engine_init.c"
      },
      {
        "file": "modules/ssl/ssl_engine_pphrase.c"
      },
      {
        "file": "modules/ssl/ssl_private.h"
      },
      {
        "file": "modules/ssl/ssl_util.c"
      }
    ]
  },
  "4687f48c3795383ced25f6a581553c3a140bfd41": {
    "message": "Fix r55670.  Not a great idea to dereference process after pool destroy!",
    "match": "Fix r55670.  Not a great idea to dereference process after pool des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/main.c"
      }
    ]
  },
  "ab0b9a34eeefc3a6a33d184afc0eef886f46ef9b": {
    "message": "set binary attributes for remaining binaries via httpd.rc, fix the\nmissing feather (icon) on httpd.exe",
    "match": "remaining binaries via httpd.rc, fix the\nmissing feather (icon) on http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CMakeLists.txt"
      },
      {
        "file": "README.cmake"
      }
    ]
  },
  "7d28f923f208880680b30a3e512d27b13ff1cf4a": {
    "message": "mod_lua: If the first yield() of a LuaOutputFilter returns a string, it should\nbe prefixed to the response as documented.\n\nAlso, don't put empty heap buckets in the brigade if a yield() is called with \nno string.",
    "match": "fixed to the response as documented.\n\nAlso, don't put empty heap buckets in the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/lua/mod_lua.c"
      }
    ]
  },
  "35d79b14f1253bfc6326bdcccc2d32fb113917c1": {
    "message": "* remove \"... and port\" references added in http://svn.apache.org/viewvc?rev=1208753&view=rev \nwhile trying to account for mod_remoteip.\n\n* mention mod_remote_ip for %a too.",
    "match": "remove \"... and port\" references added in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_log_config.html.en"
      },
      {
        "file": "docs/manual/mod/mod_log_config.xml"
      }
    ]
  },
  "e044715e72dde3cee7e7fb15260bc77b20aa86b2": {
    "message": "ab: Fix potential buffer overflows when processing the T and X\n    command-line options.\n\nPR: 55360\nSubmitted by: Mike Rumph <mike.rumph oracle.com>\nReviewed by: trawick",
    "match": "Fix potential buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/ab.c"
      }
    ]
  },
  "0ce1486417d90dec471678e6baa4d05b31a57759": {
    "message": "Fix logging of SSL session cache timeout value (at TRACE2 level).\nInadvertent side effect of r907918, where the timeout calculation\nin ssl_callback_NewSessionCacheEntry was slightly modified.",
    "match": "timeout value (at TRACE2 level).\nInadvertent side effect of r907918, where the timeout calculation\nin ssl_callback_NewSession",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "64c435c46f94eb409e4a245408cd870defe5947f": {
    "message": "core: Remove apr_brigade_flatten(), buffering and duplicated code\nfrom the HTTP_IN filter, parse chunks in a single pass with zero copy.\nReduce memory usage by 48 bytes per request.",
    "match": "Remove apr_brigade_flatten(), buffering and duplicated code\nfrom the HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/http_filters.c"
      }
    ]
  },
  "5345db8652fa82e18380dfb44291927850b8767b": {
    "message": "mod_dav: When a PROPPATCH attempts to remove a non-existent dead\nproperty on a resource for which there is no dead property in the same\nnamespace httpd segfaults. PR 52559\nSubmitted by Diego Santa Cruz <diego.santaCruz spinetix.com>\nTested by William Lewis <wiml omnigroup com>",
    "match": "remove a non-existent dead\nproperty on a resource for which there is no dead property in the same\nnamespace http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/dav/fs/dbm.c"
      }
    ]
  },
  "0548ec7610f98228a3607fde86b2a4c82121f7fd": {
    "message": "htdigest: Fix buffer overflow when reading digest\npassword file with very long lines.\n\nPR 54893.",
    "match": "Fix buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "0b30eedd9f4733456653281d138fea8d71866055": {
    "message": "hopefully fixing the <pre> overflow bug as reported by mike rumph",
    "match": "fixing the <pre> overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "docs/manual/style/css/prettify.css"
      }
    ]
  },
  "30a9f1f68ac10a96c03821b7465d6326d6b50bae": {
    "message": "Security notes about SQL injection.",
    "match": "SQL injec",
    "vulnerabilities": [
      "Injection"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_authn_dbd.html.en"
      },
      {
        "file": "docs/manual/mod/mod_authn_dbd.xml"
      },
      {
        "file": "docs/manual/mod/mod_authz_dbd.html.en"
      },
      {
        "file": "docs/manual/mod/mod_authz_dbd.xml"
      }
    ]
  },
  "737192d0332db6ae363208b4d34f007e5ee33901": {
    "message": "Add some caching for password hash validation.\n\nPassword hash functions must be expensive in order to be secure. But\nif they have to be re-evaluated for every request, performance\nsuffers.\n\nAs a minimal remedy, cache the most recent result for every\nconnection. This gives a great performance boost if a web browser\ndoes many requests on the same connection with the same\nuser+password.  In principle, this may keep the plain text password\naround longer than before. But in practice, there won't be much\ndifference since user+password can already remain in some unused\ndata bucket for longer than the request duration.\n\nA proper solution still needs to be found for connections from\nproxies which may carry requests for many different users.\n\nWhile it currently only requires the conn_rec, the new\nap_password_validate() function takes username and request_rec to\nallow future extensions, like detection of brute-force attempts.",
    "match": "brute-force",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/aaa/mod_authn_dbd.c"
      },
      {
        "file": "modules/aaa/mod_authn_dbm.c"
      },
      {
        "file": "modules/aaa/mod_authn_file.c"
      },
      {
        "file": "modules/aaa/mod_authn_socache.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "1e7eb0add480a0c411b176dc570d5933c5b79195": {
    "message": "* support/rotatelogs.c (post_rotate): Really omit the second arg when\n  invoking a post-rotate program, rather than passing an empty arg.\n  (Fixes to code match desired&documented behaviour.)",
    "match": "Fixes to code match des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/rotatelogs.c"
      }
    ]
  },
  "f4c04f36c295bd1af1d8e7e6356d67b1bc67cf48": {
    "message": "mod_cache_socache: New cache implementation backed by mod_socache\nthat replaces mod_mem_cache removed from httpd v2.2.",
    "match": "removed from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/cache/cache_socache_common.h"
      },
      {
        "file": "modules/cache/config.m4"
      },
      {
        "file": "modules/cache/mod_cache_socache.c"
      }
    ]
  },
  "97ae0394899aa8ac047dd339dda92c9ca1d1cac0": {
    "message": "Google has a way of finding everything, so let's update this guide just a bit (fix errors, expand on descriptions)",
    "match": "fix errors, expand on des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/developer/lua.xml"
      }
    ]
  },
  "5b869b19a9bd6646d7c9d5780304182b84552147": {
    "message": "Add LuaCodeCache directive for controlling in-memory caching.\nThis might need some tweaking on the hash key generation for the mtime lookups, ideas are welcome.",
    "match": "weaking on the hash key gener",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/lua/lua_vmprep.c"
      },
      {
        "file": "modules/lua/lua_vmprep.h"
      },
      {
        "file": "modules/lua/mod_lua.c"
      },
      {
        "file": "modules/lua/mod_lua.h"
      }
    ]
  },
  "c9fb88b1a44882e1fef85dba62180992f1290383": {
    "message": "* modules/proxy/proxy_util.c (ap_proxy_checkproxyblock): Fix memory\n  leak/thread-unsafe use of pconf.\n\nSubmitted by: rpluem, jorton",
    "match": "Fix memory\n  leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "968d8f86f2aa48a9f15c85f08e3ecce39cb96ba5": {
    "message": "mpm_event, mpm_worker: Remain active amidst prevalent child process\nresource shortages.\n\nThis is a somewhat different direction than r168182 (\"transient thread\ncreation errors shouldn't take down the whole server\").\n\nr168182: If APEXIT_CHILDSICK is received and there aren't any\n         active children at the time, exit.\n\nNow:     If APEXIT_CHILDSICK is received and we never successfully\n         initialized a child, exit.\n\nThe issue seen with the r168182 handling is that it is rather easy\nto be left with no active child processes (which causes the server\nto exit completely) during a resource shortage that lasts for some\nmeasurable period of time, as contrasted with a resource shortage \nthat results in only a handful of allocation failures.\n\nNow the server will remain active, though as long as the resource\nshortage exists children may continually fail and the parent will\ntry once per second to create a replacement.  The existing logic\nto reduce the spawn rate after such errors will prevent the \nparent from trying to create children more rapidly.",
    "match": "second to create a replacement.  The existing logic\nto reduce the spawn rate after such errors will prevent",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/log-message-tags/next-number"
      },
      {
        "file": "server/mpm/event/event.c"
      },
      {
        "file": "server/mpm/worker/worker.c"
      }
    ]
  },
  "c9e1b52d3616a51879c49a37858e9d9e29f895f1": {
    "message": "* modules/mappers/mod_rewrite.c (cmd_rewriteoptions, hook_uri2file):\n  Add \"AllowAnyURI\" flag which disables the strict URL-path input\n  string check introduced to fix CVE-2011-3368/CVE-2011-4317.\n\n* docs/manual: Update docs.\n\nInspired by: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_rewrite.xml"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      }
    ]
  },
  "92543538875bbfb21b941affc719a40da6facec9": {
    "message": "bump CVE to the top of CHANGES",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "706691e6fd5445f6d60456f55c5647e788e7b3ad": {
    "message": "SECURITY: CVE-2012-2687 (cve.mitre.org):\n\nmod_negotiation: Escape filenames in variant list to prevent an\npossible XSS for a site where untrusted users can upload files to a\nlocation with MultiViews enabled.\n\n* modules/mappers/mod_negotiation.c (make_variant_list): Escape\n  filenames in variant list.\n\nSubmitted by: Niels Heinen <heinenn google.com>",
    "match": "prevent an\npossible XSS",
    "vulnerabilities": [
      "Cross-Site Scripting",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/mappers/mod_negotiation.c"
      }
    ]
  },
  "ee2b9cbfe4fc76f586390d08f8accd2aa14e66f7": {
    "message": "Avoid buffer overflow if one protocol string is too long, but at least\none is not.\n\nAlso add log messages numbers and avoid useless string dup.",
    "match": "buffer overflow",
    "vulnerabilities": [
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "docs/log-message-tags/next-number"
      },
      {
        "file": "modules/ssl/ssl_engine_io.c"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "db9d72ca48c785bf85188efa38919309e37e28fd": {
    "message": "Typo fixes in the description of output values",
    "match": "fixes in the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/man/ab.1"
      },
      {
        "file": "docs/manual/programs/ab.html.en"
      },
      {
        "file": "docs/manual/programs/ab.xml"
      }
    ]
  },
  "413eca5c91cd663109e7a3acdbd40f2d6076dbf8": {
    "message": "With further assistance from Daniel Gruno - style changes, removes use\nof `hostname`, uses IO::Socket instead of a custom tcp_connect function,\nand uses HTTP/1.1.",
    "match": "removes use\nof `hostname`, uses IO::Socket instead of a custom tcp_connect function,\nand uses HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/log_server_status.in"
      }
    ]
  },
  "dcc21106d862bc08a6b48207c45d15d1d6f0b758": {
    "message": "Updates patch provided by Dave Brondsema (brondsem AT apache org) four\nyears ago, makes the script strict/warnings compliant, and updates to\ncurrent output format of server-status.\nPartially fixes https://issues.apache.org/bugzilla/show_bug.cgi?id=45424\nThe script now actually produces output.",
    "match": "Updates patch provided by Dave Brondsema (brondsem AT apache org) four\nyears ago, makes the script strict/warnings compliant, and updates to\ncurrent output format of server-status.\nPartially fixes https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/log_server_status.in"
      }
    ]
  },
  "09b9f4f85c5d97598ce07542c532d0f16e98d256": {
    "message": "Fix error handling in ap_scan_script_header_err_brigade() if there\nis no EOS bucket in the brigade:\n\nAlso don't loop if there is a timeout when discarding the script output.\n\nThanks to Edgar Frank for the analysis.\n\nPR: 48272 (partial fix)",
    "match": "Fix error handling in ap_scan_script_header_err_brigade() if there\nis no EOS bucket in the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/util_script.c"
      }
    ]
  },
  "85798d0cf5125d0279498f204cb31caac7e08197": {
    "message": "Update worker mpm defaults to match documentation and built-in defaults.\nAs per https://issues.apache.org/bugzilla/show_bug.cgi?id=52102",
    "match": "Update worker mpm defaults to match documentation and built-in defaults.\nAs per https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/extra/httpd-mpm.conf.in"
      }
    ]
  },
  "9812b683776c0ab50c8da2583974f06504390da8": {
    "message": "Remove the hack from r806010 that mis-uses the pointer to the per-directory\nconfig for other things. This breaks with MPMs that do have a per-directory\nconfig.\n\nIf any module appears that wants to use this functionality, we can\nadd a new, non-broken API. Since the docs clearly state that ap_set_listener()\nshould not be called by external modules, I don't consider this an API/ABI\nchange, but only a bug fix.\n\nPR: 52904",
    "match": "API. Since the docs clearly state that ap_set_listener()\nshould not be called by external modules, I don't consider this an API/ABI\nchange, but only a bug fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/listen.c"
      }
    ]
  },
  "55c244c694d68cb578551c372fc2364caccebae1": {
    "message": "Fix insecure handling of LD_LIBRARY_PATH that could lead to the\ncurrent working directory to be searched for DSOs\n\nCVE-2012-0883",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/envvars-std.in"
      }
    ]
  },
  "d7cfaaea734f7ae3cca21188ca7203e165c54ae2": {
    "message": "Fixes issue 52604. Depending on the value of @rel_logfiledir@ the\nexample may or may not start with a \"/\", rendering the example wrong in\nsome cases, as described in that bugzilla issue. Changes the example to\nliteral strings so there can be no ambiguity.",
    "match": "Fixes issue 52604. Depending on the value of @rel_logfiledir@ the\nexample may or may not start with a \"/\", rendering the example wrong in\nsome cases, as des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd.conf.in"
      }
    ]
  },
  "ae522645f034c56ed8784ba127b716447c55ba5b": {
    "message": "CVE-2012-0053: Fix an issue in error responses that could expose \n\"httpOnly\" cookies when no custom ErrorDocument is specified for \nstatus code 400.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "8e905e6d97ab5575ae82ff7ffff35d5d3769914b": {
    "message": "Adjust CVE-2011-3368/CVE-2011-4317 fixes to rely solely on \ncore's translate-name to fail unsupported URIs.\n\nRewrite and proxy now decline what they don't support rather\nthan fail the request.\n\nSuggested by: trawick\nImplemented by: jorton\nTweaked by: wrowe",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "b0835c731a7d7f65b5d409f42b886fc8e3111bfc": {
    "message": "SECURITY (CVE-2012-0031): Fix possible crash on shutdown if a child\nchanges the sb_type field in the scoreboard.  Since unprivileged\nchildren should not be able to affect the parent in this way, this is\ntreated as a Low severity security issue.\n\nThanks to \"halfdog\" <me halfdog.net> for reporting this issue.\n\n* include/scoreboard.h (global_score): Remove sb_type field.\n\n* include/ap_mmn.h: Bump MMN for above.\n\n* server/scoreboard.c (ap_cleanup_scoreboard, ap_create_scoreboard):\n  Use a static global to store store the scoreboard type.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/scoreboard.h"
      },
      {
        "file": "server/scoreboard.c"
      }
    ]
  },
  "4c136c676e5f7b1bd3aa55ce41eafc0b079ffc36": {
    "message": "Limit length of lines in .htaccess to 8K again, to reduce DoS potential.\n\nMake ap_varbuf_cfg_getline() strictly enforce the max_len parameter.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "docs/manual/configuring.xml"
      },
      {
        "file": "include/http_config.h"
      },
      {
        "file": "include/util_varbuf.h"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "318b86756de2049f652561e1a66420b4a92d4a7e": {
    "message": "Fix for additional cases of URL rewriting with ProxyPassMatch or\nRewriteRule, where particular request-URIs could result in undesired\nbackend network exposure in some configurations. (CVE-2011-4317)\n\nThanks to Prutha Parikh from Qualys for reporting this issue.\n\n* modules/proxy/mod_proxy.c (proxy_trans): Decline to handle the \"*\"\n  request-URI.  Fail for cases where r->uri does not begin with a \"/\".\n\n* modules/mappers/mod_rewrite.c (hook_uri2file): Likewise.",
    "match": "Fix for additional cases of URL rewriting",
    "vulnerabilities": [
      "Broken Authentication and Session Management",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      }
    ]
  },
  "f727be83498371ebbb13526ed268f219ec74bf65": {
    "message": "mod_cache: Apply the API change that allows future mod_cache providers to\ninvalidate cache entries, which will fix PR15868.",
    "match": "API change that allows future mod_cache providers to\ninvalidate cache entries, which will fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "modules/cache/mod_cache.h"
      },
      {
        "file": "modules/cache/mod_cache_disk.c"
      }
    ]
  },
  "d791f6394f784f3d06ab41884422ace6987a1244": {
    "message": "mod_cache_disk: Remove the unnecessary intermediate brigade while writing\nto disk. Fixes a problem where mod_disk_cache was leaving buckets in the\nintermediate brigade and not passing them to out on exit.",
    "match": "Fixes a problem where mod_disk_cache was leaving buckets in the\nintermediate brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/cache/mod_cache_disk.c"
      },
      {
        "file": "modules/cache/mod_cache_disk.h"
      }
    ]
  },
  "a9230b22b9b541dcbaad88de17959f38b4cb1611": {
    "message": "As discussed at AC NA 2011\n\no relocate srclib/libapreq/library/*.c -> server/apreq_${f}.c\no relocate srclib/libapreq/include/*.h -> include/*.h\no remove apreq_version.[hc] related stuff since its nolonger its own lib\no connect modules/apreq to the build under 'most' default comment out in httpd.conf\no update make_exports.awk to handle APREQ marcos",
    "match": "remove apreq_version.[hc] related stuff since its nolonger its own lib\no connect modules/apreq to the build under 'most' default comment out in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "build/make_exports.awk"
      },
      {
        "file": "modules/apreq/Makefile.in"
      },
      {
        "file": "modules/apreq/config.m4"
      },
      {
        "file": "modules/apreq/filter.c"
      },
      {
        "file": "server/Makefile.in"
      },
      {
        "file": "include/apreq.h"
      },
      {
        "file": "include/apreq_cookie.h"
      },
      {
        "file": "include/apreq_error.h"
      },
      {
        "file": "include/apreq_module.h"
      },
      {
        "file": "include/apreq_param.h"
      },
      {
        "file": "include/apreq_parser.h"
      },
      {
        "file": "include/apreq_util.h"
      },
      {
        "file": "srclib/libapreq/include/apreq_version.h"
      },
      {
        "file": "server/apreq_cookie.c"
      },
      {
        "file": "server/apreq_error.c"
      },
      {
        "file": "server/apreq_module.c"
      },
      {
        "file": "server/apreq_module_cgi.c"
      },
      {
        "file": "server/apreq_module_custom.c"
      },
      {
        "file": "server/apreq_param.c"
      },
      {
        "file": "server/apreq_parser.c"
      },
      {
        "file": "server/apreq_parser_header.c"
      },
      {
        "file": "server/apreq_parser_multipart.c"
      },
      {
        "file": "server/apreq_parser_urlencoded.c"
      },
      {
        "file": "server/apreq_util.c"
      },
      {
        "file": "srclib/libapreq/library/version.c"
      }
    ]
  },
  "ab57c5b3d92f8f62350f5b4a46dac0d9a7ff86d0": {
    "message": "Patch from Luke Meyer, clarifies usage of ProxyPassReverseCookiePath directive. As per bug #51126",
    "match": "Patch from Luke Meyer, clarifies usage of ProxyPassReverseCookiePath directive. As per bug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      }
    ]
  },
  "d265c519032088ae939290c53f91207c115897b1": {
    "message": "Fix integer overflow in ap_pregsub. This can be triggered e.g.\nwith mod_setenvif via a malicious .htaccess\n\nCVE-2011-3607\nhttp://www.halfdog.net/Security/2011/ApacheModSetEnvIfIntegerOverflow/",
    "match": "Fix integer overflow",
    "vulnerabilities": [
      "Overflow",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "ca62a9d279a4fc9a8dc066a6e5d2cee56afaf54c": {
    "message": "Mention mod_reqtimeout in the DoS mitigation section",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "docs/manual/misc/security_tips.html.en"
      },
      {
        "file": "docs/manual/misc/security_tips.xml"
      }
    ]
  },
  "93b60ce94e5909a144ef50b9b56ae2c471e4da87": {
    "message": "Adds a recommendation that rewrite logging be consulted for more details\non how rewrite is looking at URIs. refs https://issues.apache.org/bugzilla/show_bug.cgi?id=30021",
    "match": "Adds a recommendation that rewrite logging be consulted for more details\non how rewrite is looking at URIs. refs https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/rewrite/tech.html.en"
      },
      {
        "file": "docs/manual/rewrite/tech.xml"
      }
    ]
  },
  "2d3477a1cdf8b12bd575abae25ee4e26d1a66558": {
    "message": "Patch from Description Mathijs Schmittmann - Corrected syntax for && (vs &) expression. Refs https://issues.apache.org/bugzilla/show_bug.cgi?id=51976",
    "match": "Patch from Des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_authz_core.xml"
      }
    ]
  },
  "f8a11311d73753e0440834c94173b26c9d7c922c": {
    "message": "- add note here in light of CVE-2011-3368",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      }
    ]
  },
  "b10aeb17718f4cbb4412a7d8355c060517b61060": {
    "message": "- add a security warning, and tweak the example, in light of CVE-2011-3368",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/rewrite/flags.xml"
      }
    ]
  },
  "2125cb1b1f139434d5e3c69dd73487fcab8cf34a": {
    "message": "SECURITY (CVE-2011-3368): Prevent unintended pattern expansion in some\nreverse proxy configurations by strictly validating the request-URI:\n\n* server/protocol.c (read_request_line): Send a 400 response if the\n  request-URI does not match the grammar from RFC 2616.  This ensures\n  the input string for RewriteRule et al really is an absolute path.\n\nReviewed by: rpluem, wrowe, covener, fielding",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "d57bee112f5208e86d64284e512a61325604bc7d": {
    "message": "* modules/http/byterange_filter.c (ap_byterange_filter): Don't reveal\n  the pid in the boundary delimiter (part of CVE-2003-1418).",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/http/byterange_filter.c"
      }
    ]
  },
  "1f36e470005b1fb8276c893a6458f7045d3af5c2": {
    "message": "* Fix a regression in the CVE-2011-3192 byterange fix:\n  Range: bytes=-1\n\n  Resulted in the first two bytes delivered, not in the last one.\n\nPR: 51748\nSubmitted by: low_priority <lowprio20 gmail.com>\nReviewed by: rpluem",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/byterange_filter.c"
      }
    ]
  },
  "b0bad2dabc2138e94f03c5966ad979a506450dda": {
    "message": "If the sum of all ranges in a request is not smaller than the file, fall back\nto 200.  This takes care of potential DoS issues from ranges like\n0-100,1000-,0-100,1000-,...",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "modules/http/byterange_filter.c"
      }
    ]
  },
  "d916656513ffb95bfd16cfaff8d824d440c5d327": {
    "message": "Fold in Stefan's initial PoC for fixing memory issues with ranges\nby keeping orig brigade untouched and avoiding 1byte brigades\n(related to CVE-2011-3192)",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/http/byterange_filter.c"
      }
    ]
  },
  "5aa2aef88d6051265a82c5fc129721a72b1d11e9": {
    "message": "mod_proxy: enable absolute URLs to be rewritten with ProxyPassReverse,\ne.g. to reverse proxy \"Location: https://other-internal-server/login\" with\nProxyPassReverse https://public-address/ https://other-internal-server/",
    "match": "address/ https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "9cf2757fb796b298e33d8ec95d32fd16ef9a48f9": {
    "message": "Revert r1140069:\n\n    Fix load order dependencies in LDAP code by switching to use of APR\n    optional functions for the inter-module API...",
    "match": "Fix load order dependencies in LDAP code by switching to use of APR\n    optional functions for the inter-module API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/ap_ldap.h.in"
      },
      {
        "file": "include/ap_ldap.hw"
      },
      {
        "file": "include/ap_ldap_init.h"
      },
      {
        "file": "include/ap_ldap_option.h"
      },
      {
        "file": "include/ap_ldap_rebind.h"
      },
      {
        "file": "include/ap_ldap_url.h"
      },
      {
        "file": "modules/aaa/mod_authnz_ldap.c"
      },
      {
        "file": "modules/ldap/ldap_private.h"
      },
      {
        "file": "modules/ldap/util_ldap.c"
      }
    ]
  },
  "c6b10a6b94f7576feedd9367bdd08965ca356f16": {
    "message": "Fix load order dependencies in LDAP code by switching to use of APR\noptional functions for the inter-module API:\n\n* modules/ldap/ldap_private.h: New file, containing \"real\" function\n  declarations, copied from...\n\n* include/ap_ldap.h.in, include/ap_ldap_url.h,\n  include/ap_ldap_option.h, include/ap_ldap_init.h,\n  include/ap_ldap_rebind.h: ... here.  All declarations changed to APR\n  optional function declarations.\n\n* modules/ldap/util_ldap.c (util_ldap_register_hooks): Register all\n  the new optional functions.\n\n* modules/aaa/mod_authnz_ldap.c (ImportULDAPOptFn): Pick up optional\n  function stub for ap_ldap_url_parse.\n  (mod_auth_ldap_parse_url): Use it here.",
    "match": "Fix load order dependencies in LDAP code by switching to use of APR\noptional functions for the inter-module API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/ap_ldap.h.in"
      },
      {
        "file": "include/ap_ldap.hw"
      },
      {
        "file": "include/ap_ldap_init.h"
      },
      {
        "file": "include/ap_ldap_option.h"
      },
      {
        "file": "include/ap_ldap_rebind.h"
      },
      {
        "file": "include/ap_ldap_url.h"
      },
      {
        "file": "modules/aaa/mod_authnz_ldap.c"
      },
      {
        "file": "modules/ldap/ldap_private.h"
      },
      {
        "file": "modules/ldap/util_ldap.c"
      }
    ]
  },
  "b1a7483baabd4f67e549a593e072a72f463da660": {
    "message": "Fix build with recent apr_crypto API change",
    "match": "Fix build with recent apr_crypto API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/session/mod_session_crypto.c"
      }
    ]
  },
  "0a23ff421e61915887879f24dbfb7b9123030f17": {
    "message": "Add API protection against the deprecated v1.4 apr_crypto API.",
    "match": "API protect",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/session/mod_session_crypto.c"
      }
    ]
  },
  "cfc4287425f1f454411e5c49b796daf2af7f0e63": {
    "message": "Fix memory leak in mod_deflate.c when SetOutputFilter is enabled and DEFLATE\nis the first filter in the chain - this is seen with mod_dav + mod_deflate\nwhen the client can not do gzip and we constantly do the filter checks.\n\n* modules/filters/mod_deflate.c\n  (deflate_ctx): Add a flag as to whether we are successfully initialized.\n  (deflate_out_filter): Always create filter ctx and set filter_init flag only\n  after we are successfully initialized.",
    "match": "Fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "66446a8285aff163f655167ebb0030b9cbcbf2f6": {
    "message": "rpm spec file: Remove corrupted %changelog entry:\nerror: bad date in %changelog: See http://www.apache.org/dist/httpd/CHANGES_2.3",
    "match": "Remove corrupted %changelog entry:\nerror: bad date in %changelog: See http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "build/rpm/httpd.spec.in"
      }
    ]
  },
  "aaf05a59490186a48e5f3c0ef0cec35fc60d5494": {
    "message": "DrBacchus sez fix-a-docs-bug\nPR 50396\nPedantry over description of qs-values.",
    "match": "fix-a-docs-bug\nPR 50396\nPedantry over des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_negotiation.xml"
      }
    ]
  },
  "de5d1ad56b88ff1a716dd528b91441c852912a08": {
    "message": "DrBacchus says Fix-a-docs-bug\nPR 50396\nHistorical reasons for using IP-based virtualhosting no longer deserve\nto be featured in our docs.",
    "match": "Fix-a-docs-bug\nPR 50396\nHistorical reasons for using IP-based virtualhosting no longer des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/vhosts/name-based.xml"
      }
    ]
  },
  "9e1a503f1948a241c57dda8fe074a59ee179d25a": {
    "message": "* modules/ssl/ssl_engine_io.c: Revamp output buffering: add a\n  \"coalesce\" filter which buffers the plaintext, and remove buffering\n  of the SSL records -- i.e. buffer before the SSL output filter,\n  rather than after it.  This aims to reduce the network overhead\n  imposed by the output of many small brigades (such as produced by\n  chunked HTTP response), which can now be transformed into a few\n  large TLS records rather than many small ones.\n\n  (ssl_filter_ctx_t): Remove \"nobuffer\" field.\n  (bio_filter_out_ctx_t): Remove length, buffer, blen fields.\n  (bio_filter_out_pass): Split from bio_filter_out_flush.\n  (bio_filter_out_write): Remove handling of buffer.\n  (bio_filter_out_ctrl): Adjust to reflect lack of buffer.\n  (ssl_io_filter_coalesce): Add new filter...\n  (ssl_io_filter_init): ...add it to the filter chain...\n  (ssl_io_filter_register): ...and register it.",
    "match": "plaintext, and remove buffering\n  of the SSL records -- i.e. buffer before the SSL output filter,\n  rather than after it.  This aims to reduce the network overhead\n  imposed by the output of many small brigades (such as produced by\n  chunked HTTP response), which can now be transformed into a few\n  large TLS records rather than many small ones.\n\n  (ssl_filter_ctx_t): Remove \"nobuffer\" field.\n  (bio_filter_out_ctx_t): Remove length, buffer, blen fields.\n  (bio_filter_out_pass",
    "vulnerabilities": [
      "Broken Authentication and Session Management",
      "Cross-Site Scripting",
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/ssl_engine_io.c"
      }
    ]
  },
  "a398ec2a762dd5867ad0361279f15685f0ff36db": {
    "message": "fix short description for usecanonicalphysicalport directive",
    "match": "fix short des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.xml"
      }
    ]
  },
  "c791f2dd88fc8035c7fa8c797dbde22f77752f32": {
    "message": "Fix description of \"note\"",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/expr.xml"
      }
    ]
  },
  "eb951533fbe016eac2516c96eebbd08394c3079c": {
    "message": "Fix pool lifetime issues when the proxy backend connection is terminated\nearly by forcing a setaside on transient buckets placed in the brigade\nby mod_ssl. This has the effect of extending the lifetime of buckets until\nthe end of the request. This is a variation on the original fix for this\nproblem, which added transient buckets to be setaside later in the process.",
    "match": "Fix pool lifetime issues when the proxy backend connection is terminated\nearly by forcing a setaside on transient buckets placed in the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "4deb984fcd79df6cee5f1127e426e746267202ae": {
    "message": "Remove workaround that was only necessary when htcacheclean included httpd.h",
    "match": "Remove workaround that was only necessary when htcacheclean included http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/htcacheclean.c"
      }
    ]
  },
  "9518f53ce24c9efef64a1f485f8cc73ff4c98190": {
    "message": "Fix description of APLOG_USE_MODULE in new\nAPI docs. The macro needs a trailing semicolon.",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/developer/new_api_2_4.xml"
      }
    ]
  },
  "c0b59d71184b516535f1eeaf02fe92c5eb262c25": {
    "message": "fix description of the change for PR43857; it is a work-around\nfor a reslist problem that isn't fixed in apr-util 1.3.x\n\nSuggested by: jorton",
    "match": "fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      }
    ]
  },
  "ceadbb2ba891b0822f5f6a493a80e4adda23431d": {
    "message": "Fix CVE-2010-1623 in mod_reqtimeout, too. It includes a non-blocking variant\nof apr_brigade_split_line().",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_reqtimeout.c"
      }
    ]
  },
  "e64c8f57e8c8e4fe7b68b239b81404bb11faaf95": {
    "message": "Fix to apidoc comments in ap_regex",
    "match": "Fix to api",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/ap_regex.h"
      }
    ]
  },
  "4470d41d8d8682c2be6515bd4dbe1785e0da2b8d": {
    "message": "mod_cache: Change the signature of the store_body() provider function\nwithin the mod_cache provider interface to support an \"in\" brigade\nand an \"out\" brigade instead of just a single input brigade. This\ngives a cache provider the option to consume only part of the brigade\npassed to it, rather than the whole brigade as was required before.\nThis fixes an out of memory and a request timeout condition that would\noccur when the original document was a large file. Update the\nmod_disk_cache provider implementation to take into account the new API.\nIntroduce CacheReadSize and CacheReadTime directives to mod_disk_cache\nto control the amount of data to attempt to cache before sending the\ndata on to the client in the \"out\" brigade.",
    "match": "fixes an out of memory and a request timeout condition that would\noccur when the original document was a large file. Update the\nmod_disk_cache provider implementation to take into account the new API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_disk_cache.xml"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "modules/cache/mod_cache.c"
      },
      {
        "file": "modules/cache/mod_cache.h"
      },
      {
        "file": "modules/cache/mod_disk_cache.c"
      },
      {
        "file": "modules/cache/mod_disk_cache.h"
      }
    ]
  },
  "da187a4ba99eee56ed78cb05f17bb2621f619baf": {
    "message": "CVE-2010-1452: Fix handling of missing path segments in the parsed URI structure.\n\nIf a specially crafted request was sent, it is possible to crash mod_dav, \nmod_cache or mod_session, as they accessed a field that is set to NULL\nby the URI parser, assuming that it always put in a valid string.\n\nPR: 49246\nSubmitted by: Mark Drayton\nPatch by: Jeff Trawick",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/cache/cache_storage.c"
      },
      {
        "file": "modules/dav/main/util.c"
      },
      {
        "file": "modules/session/mod_session.c"
      }
    ]
  },
  "73e511aca6a6064dc6acbc7e175b92a196d3f45c": {
    "message": "Disallow setting cache context in .htaccess, lest it be abused for cross-site\nor cross-application authn attacks.",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/aaa/mod_authn_socache.c"
      }
    ]
  },
  "4346bc1bc36bd5ebb0fd19d2b9f1de8d9b765668": {
    "message": "ap_note_auth_failure seems to be broken in 2.2.x, too. So this is hardly\na blocker for 2.4.",
    "match": "auth_failure seems to be brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "ab6e067344cb09e4d9d4aebb7dc1185994544c47": {
    "message": "Don't restore r->user after authn/authz failure. Any authn module that sets\nr->user even if authentication failed is broken, anyway.",
    "match": "authn/authz failure. Any authn module that sets\nr->user even if authentication failed is brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "server/request.c"
      }
    ]
  },
  "8a507a2869a01e3669748c47960562405ae8f268": {
    "message": "core_output_filter improvements:\n- prevent more than 5 pipelined responses in the output brigade, to avoid\n  excessive FD usage and related DoS attacks.\n- if non_file_bytes_in_brigade >= THRESHOLD_MAX_BUFFER, don't send the \n  entire brigade non-blocking, but only up to the bucket that brought us\n  over THRESHOLD_MAX_BUFFER. This should allow better use of async write\n  completion.",
    "match": "prevent more than 5 pipelined responses in the output brigade, to avoid\n  excessive FD usage and related DoS attack",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/core_filters.c"
      }
    ]
  },
  "d20676fcbb23de65546a6e91bc4b54a9f69c6dab": {
    "message": "Drp ap_args_to_table due to missing constraints; a DoS waiting\nfor an exploit.\n\nSome mod_lua fan aught to revisit this and provide a sensible\nimplementation.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/util_script.h"
      },
      {
        "file": "modules/lua/lua_request.c"
      },
      {
        "file": "modules/lua/mod_lua.c"
      },
      {
        "file": "server/util_script.c"
      }
    ]
  },
  "0e9f3ddce6e84910fcc9dae26002b51f26e807c4": {
    "message": "Update CHANGES:\n- Building modules as DSOs and the \"most\" module set by default.\n  r952007, r952008, r952009\n- Fixing VPATH build when using included APR.\n  r951769, r951769\n- Fixing mod_session_crypto build for APR 2 and VPATH\n  r951766\n- Fixing mod_session_crypto API incompatibility with APR 2\n  r951870",
    "match": "Fixing VPATH build when using included APR.\n  r951769, r951769\n- Fixing mod_session_crypto build for APR 2 and VPATH\n  r951766\n- Fixing mod_session_crypto API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "dc4eaba3fe35ca93da7ed4fc9ad0cd2c4bfc4672": {
    "message": "ab: Fix memory leak with -v2 and SSL.\n\nPR: 49383\nSubmitted by: Pavel Kankovsky <peak argo troja mff cuni cz>",
    "match": "Fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/ab.c"
      }
    ]
  },
  "7928f110e7e7a9cd51d4daf60003e822c1a9561a": {
    "message": "Remove a TODO item: Turns out mod_vhost_alias does not set DocumentRoot\nper request. Also several of the 'Apache' -> 'Apache HTTP Server'\nconversions.",
    "match": "Remove a TODO item: Turns out mod_vhost_alias does not set DocumentRoot\nper request. Also several of the 'Apache' -> 'Apache HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/vhosts/mass.html.en"
      },
      {
        "file": "docs/manual/vhosts/mass.xml"
      }
    ]
  },
  "4945115b2e725a60fd4b042fda66c944562094f9": {
    "message": "fix potential file descriptor leak with DEBUG_CGI",
    "match": "fix potential file des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/generators/mod_cgi.c"
      }
    ]
  },
  "69e6de697373180174b3ad891de0b5e0a0e06044": {
    "message": "Fixing SSLStrictSNIVHostCheck description, which made my head hurt.",
    "match": "Fixing SSLStrictSNIVHostCheck des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.html.en"
      },
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      }
    ]
  },
  "20639637492f953eca5b86b8028383eef670634b": {
    "message": "Remove mentions of HTTPD. Mea culpa.",
    "match": "Remove mentions of HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/bind.html.en"
      },
      {
        "file": "docs/manual/bind.xml"
      },
      {
        "file": "docs/manual/configuring.html.en"
      },
      {
        "file": "docs/manual/configuring.xml"
      },
      {
        "file": "docs/manual/dns-caveats.html.en"
      },
      {
        "file": "docs/manual/dns-caveats.xml"
      },
      {
        "file": "docs/manual/install.html.en"
      },
      {
        "file": "docs/manual/install.xml"
      },
      {
        "file": "docs/manual/mod/mod_cache.xml.ja"
      },
      {
        "file": "docs/manual/mod/mod_cache.xml.ko"
      },
      {
        "file": "docs/manual/mod/mod_filter.html.en"
      },
      {
        "file": "docs/manual/mod/mod_filter.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy.html.en"
      },
      {
        "file": "docs/manual/mod/mod_proxy.xml.ja"
      },
      {
        "file": "docs/manual/mod/worker.html.en"
      },
      {
        "file": "docs/manual/mod/worker.xml"
      },
      {
        "file": "docs/manual/stopping.html.en"
      },
      {
        "file": "docs/manual/stopping.xml"
      }
    ]
  },
  "9d13040915bc02da835c39e97c0dfbc504f435df": {
    "message": "reflect assignment of CVE-2010-0434",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "2fe8ec85fa8ef1340a61e688f3bc43c799add78e": {
    "message": "SECURITY: CVE-2010-0408 (cve.mitre.org)\n\nmod_proxy_ajp: Respond with HTTP_BAD_REQUEST when the body is not sent after\nrequest headers indicate a request body is incoming; this is not a case of\nHTTP_INTERNAL_SERVER_ERROR.\n\nSubmitted by: Niku Toivola <niku.toivola sulake.com>\n\nrpluem, jim, wrowe",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_ajp.c"
      }
    ]
  },
  "e9602aecc484ce45779b1051987c826037d5ff29": {
    "message": "SECURITY: CVE-2010-0425 (cve.mitre.org)\n\nmod_isapi: Do not unload an isapi .dll module until the request\nprocessing is completed, avoiding orphaned callback pointers.\n\nSubmitted by: Brett Gervasoni <brettg senseofsecurity.com>, trawick\nReviewed by: trawick, wrowe",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/arch/win32/mod_isapi.c"
      }
    ]
  },
  "972aa62f3844bca1df20b4dff37b285a972d7775": {
    "message": "Fix the help description.",
    "match": "Fix the help des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/htcacheclean.c"
      }
    ]
  },
  "53ba8d4c4c82525e056427e557154944b5c6e665": {
    "message": "Limit sscanf format to the number of chars actually\nneeded and buffer size provided to prevent buffer overflow.",
    "match": "prevent buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "1b9cdee0043bbb309af963a03be4144701c49a64": {
    "message": "Support remote https proxies by using HTTP CONNECT.\nPR: 19188\nSubmitted by: Philippe Dutrueux <lilas evidian.com>\nReviewed by: rjung",
    "match": "remote https proxies by using HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_connect.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_http.xml"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "e7239fc4e7a4cffbc1a12f2f39597a6262827bde": {
    "message": "* modules/ssl/ssl_engine_vars.c (ssl_var_lookup_ssl): Add\n  SSL_SECURE_RENEG variable to indicate support for secure reneg.\n\n* modules/ssl/ssl_engine_kernel.c (ssl_hook_Fixup_vars): Export\n  SSL_SECURE_RENEG in the default set of variable.s",
    "match": "Fixup_vars): Export\n  SSL_SECURE_RENEG in the default",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      },
      {
        "file": "modules/ssl/ssl_engine_vars.c"
      }
    ]
  },
  "d72682c75d793549b66be5b689ea9b112d640691": {
    "message": "Adds a clarification to the AddDescription docs, to address the\nconfusion indicated in https://issues.apache.org/bugzilla/show_bug.cgi?id=17210\nThe problem described there is fixed by a reordering of the\nAddDescription directives.",
    "match": "Adds a clarification to the AddDescription docs, to address the\nconfusion indicated in https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_autoindex.html.en"
      },
      {
        "file": "docs/manual/mod/mod_autoindex.xml"
      }
    ]
  },
  "0a4c1543e59727c67094956ccfd18c023a3fca50": {
    "message": "Further mitigation for the TLS renegotation attack, CVE-2009-3555:\n\n* modules/ssl/ssl_engine_kernel.c (has_buffered_data): New function.\n  (ssl_hook_Access): Forcibly disable keepalive for the connection if\n  there is any buffered data readable from the input filter stack.\n\n* modules/ssl/ssl_engine_io.c (ssl_io_filter_input): Ensure that the\n  BIO uses blocking operations when invoked outside direct control of\n  the httpd filter stack.\n\nThanks to Hartmut Keil <Hartmut.Keil adnovum.ch> for proposing this\ntechnique.",
    "match": "attack, CVE-2009-3555:\n\n* modules/ssl/ssl_engine_kernel.c (has_buffered_data): New function.\n  (ssl_hook_Access): Forcibly disable keepalive for the connection if\n  there is any buffered data readable from the input filter stack.\n\n* modules/ssl/ssl_engine_io.c (ssl_io_filter_input): Ensure that the\n  BIO uses block",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_io.c"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "6e7bb43bf478a4dc95b9f0fd7a7c2558583c8be5": {
    "message": "Rpm package: pass the HTTPD_LANG variable to the httpd process in line\nwith Fedora. Remove the use of the apachectl script, as a script calling\nanother script makes no sense. Test for the pidfile specifically, so\nthat Redhat's scripts don't fall back to using pidof and returning the\nstatus of other httpd processes running on the same box.",
    "match": "Remove the use of the apachectl script, as a script calling\nanother script makes no sense. Test for the pidfile specifically, so\nthat Redhat's scripts don't fall back to using pidof and returning the\nstatus of other http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "build/rpm/httpd.init"
      }
    ]
  },
  "c5e59086ec0e14095696b9dffa96f5f4458782b3": {
    "message": "fix Win32 compile failure in r883540, reported by Gregg Smith\n\n(on Win32, external APIs use one calling convention while directive \nparsers use a different one)",
    "match": "fix Win32 compile failure in r883540, reported by Gregg Smith\n\n(on Win32, external API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/util_mutex.h"
      },
      {
        "file": "server/util_mutex.c"
      }
    ]
  },
  "06f68fdc54c72573d4b520219b87a05abb098380": {
    "message": "SECURITY: Partial fix for CVE-2009-3555:\n\nReject client-initiated renegotiations; this is sufficient to prevent\nthe attack for any configuration which does not require renegotiation\ndue to per-directory/per-location access control configuration.\n\nConfiguration with per-directory/per-location access control\nrequirements (such as \"SSLVerifyClient require\") are still vulnerable\nto CVE-2009-3555 with this patch applied (if using OpenSSL <= 0.9.8k).\n\n* modules/ssl/ssl_private.h (SSLConnRec): Add reneg_state field.\n  (ssl_callback_Info): Renamed from ssl_callback_LogTracingState.\n\n* modules/ssl/ssl_engine_init.c (ssl_init_ctx_callbacks): Install\n  the (renamed) info callback unconditionally.\n\n* modules/ssl/ssl_engine_io.c (ssl_filter_ctx_t): Add config pointer\n  to SSLConnRec.\n  (bio_filter_out_write, bio_filter_in_read): Fail with\n  APR_ECONNABORTED if the reneg state is set to RENEG_ABORT.\n\n* modules/ssl/ssl_engine_kernel.c (log_tracing_state): Factored out\n  of ssl_callback_LogTracingState.\n  (ssl_callback_Info): New function.",
    "match": "prevent\nthe attack",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_init.c"
      },
      {
        "file": "modules/ssl/ssl_engine_io.c"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      },
      {
        "file": "modules/ssl/ssl_private.h"
      }
    ]
  },
  "f6ea160441b6835826e6d7b26a570ddf9ee5813a": {
    "message": "Stop trying to set the referral HOP limit on each connection since most SDKs don't seem\nto do anything with it, and causes an error on released openldap levels.  \n\nAlso moves/remove some macros internal to mod_ldap out of the public header for a major bump.\n\nReported against APR in PR47501, but httpd shouldn't be asking for the option\nby default.",
    "match": "remove some macros internal to mod_ldap out of the public header for a major bump.\n\nReported against APR in PR47501, but http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/util_ldap.h"
      },
      {
        "file": "modules/ldap/util_ldap.c"
      }
    ]
  },
  "1c271959f82bd453adfd02a75e4702e6eee4aefd": {
    "message": "Fix some more overflows spotted by Ruediger Pluem",
    "match": "Fix some more overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "4bedda4b449040ca5aaac90a5e3b65788faa3746": {
    "message": "htdigest: Fix possible overflow in command line processing. htdigest is not\nsupposed to be suid save, therefore not treated as a security issue.\n\nCVE-2005-1344\nSubmitted by: Adam Conrad\nReviewed by: Stefan Fritsch",
    "match": "Fix possible overflow",
    "vulnerabilities": [
      "Overflow",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "3f24dca36cee5a5026a94e13194d722d5a1164a3": {
    "message": "Add attribution and CVE notices.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "9881400cd1ad20b036ac7bd2d7394919005490c3": {
    "message": "Security fix - this is presumed to fix CVE-2009-3094 (the disclosed\ninformation was limited so this has not been confirmed):\n\n* modules/proxy/mod_proxy_ftp.c (parse_epsv_reply): New function.\n  (proxy_ftp_handler): Fix possible NULL pointer deference in\n  apr_socket_close(NULL) on error paths.  Fix possible buffer overread\n  in EPSV response parser; use parse_epsv_reply instead.  Thanks to\n  Jeff Trawick and Stefan Fritsch for analysis of this issue.\n\nSubmitted by: Stefan Fritsch <sf fritsch.de>, jorton",
    "match": "Security fix - this is presumed to fix CVE-2009-3094 (the disclosed\ninformation was limited so this has not been confirmed):\n\n* modules/proxy/mod_proxy_ftp.c (parse_epsv_reply): New function.\n  (proxy_ftp_handler): Fix possible NULL pointer deference in\n  apr_socket_close(NULL) on error paths.  Fix",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_ftp.c"
      }
    ]
  },
  "404947824a978c89589d0fa59ada0ee1531bb147": {
    "message": "Security fix - this is presumed to fix CVE-2009-3095 (the disclosed\ninformation was limited so this has not been confirmed):\n\n* modules/proxy/mod_proxy_ftp.c (proxy_ftp_handler): Fail if the\n  decoded Basic credentials contain \"special\" characters.\n  Thanks to Stefan Fritsch for analysis of this issue.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_ftp.c"
      }
    ]
  },
  "130ca0c91563ea355cbf540b46a4369f906127ed": {
    "message": "Remove some duplicate extensions (reported by Jacob Rus)\nAdd more unregistered Microsoft types for silverlight (idiots)\n   http://blogs.msdn.com/tims/archive/2008/03/18/configuring-a-web-server-to-host-silverlight-content.aspx",
    "match": "Remove some duplicate extensions (reported by Jacob Rus)\nAdd more unregistered Microsoft types for silverlight (idiots)\n   http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/mime.types"
      }
    ]
  },
  "f8a8f3c5316182076bf3cb1b5349c177248e7781": {
    "message": "htdbm: Fix possible buffer overflow if dbm database has very\nlong values.  PR 30586 [Dan Poirier]\n\nPR 30586\nReported by: Ulf Harnhammar, Swedish IT Incident Centre",
    "match": "Fix possible buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/htdbm.c"
      }
    ]
  },
  "4685944e0654edbe22351f6425323cf8634de01c": {
    "message": "Security fix for CVE-2009-1890:\n\n* modules/proxy/mod_proxy_http.c (stream_reqbody_cl): Specify the base\n  passed to apr_strtoff, and validate the Content-Length in the same\n  way the HTTP_IN filter does.  If the number of bytes streamed\n  exceeds the expected body length, bail out of the loop.\n\nSubmitted by: niq, jorton",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "a63e651708f87cafc93b54086cf312062ecb5358": {
    "message": "* Remove locking for writing to the rewritelog. There seems to be no reason\n  why locking is required here.\n  See also: http://marc.info/?l=apache-httpd-dev&m=124282193217344&w=2\n\nPR: 46942\nSubmitted by:  Dan Poirier <poirier pobox.com>\nReviewed by: rpluem",
    "match": "Remove locking for writing to the rewritelog. There seems to be no reason\n  why locking is required here.\n  See also: http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      }
    ]
  },
  "cc9a083e689c117434116b79bdd8d2a96e39fcb1": {
    "message": "\"fix\" this warning by passing \"%s\" as the format string:\n\nmod_authz_core.c: In function \u2018authz_core_check_section\u2019:\nmod_authz_core.c:579: warning: format not a string literal and no format arguments",
    "match": "fix\" this warning by passing \"%s\" as the format string:\n\nmod_authz_core.c: In function \u2018authz_core_check_section\u2019:\nmod_authz_core.c:579: warning",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/aaa/mod_authz_core.c"
      }
    ]
  },
  "0da1f6563abba98e54f40cec57b88e372306afa7": {
    "message": "Make the piped_log structure opaque:\n\n* include/http_log.h: Remove piped_log structure definition here;\n  (ap_piped_log_read_fd, ap_piped_log_write_fd): Turn macros into\n  functions.             \n\n* server/log.c: Move piped_log structure definition here; replace\n  fds[2] with read_fd, write_fd.\n  (ap_piped_log_read_fd, ap_piped_log_write_fd): New functions.\n  (throughout...): Replace use of ap_piped_log_write_fd, \n  ap_piped_log_read_fd, with direct reference to structure fields.",
    "match": "direct reference to structure fields.",
    "vulnerabilities": [
      "Broken Access Control",
      "Security Misconfiguration"
    ],
    "files_changed": [
      {
        "file": "include/http_log.h"
      },
      {
        "file": "server/log.c"
      }
    ]
  },
  "b49499fe7cadaad4f61bfed5e9335f0d0284b356": {
    "message": "* Fix for the following configuration where the exec command was disabled\n  in /subdir. All CVE-2009-1195 tests still pass with this patch.\n\n# only two containers in the config\n\n<Directory />\nOptions Includes\nAllowOverride None\n</Directory>\n\n<Directory /subdir>\n# with this container, mod_cgi/mod_cgid complains about exec being off\n# without it, exec cmd= works as expected\nSetEnv foo bar\n</Directory>",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "701b5288abf6d237e1793d9c9d0236a659f9dbc4": {
    "message": "Security fix for CVE-2009-1195: fix Options handling such that\n'AllowOverride Options=IncludesNoExec' does not permit Includes with\nexec= enabled to be configured in an .htaccess file:\n\n* include/http_core.h: Change semantics of Includes/IncludeNoExec\n  options bits to be additive; OPT_INCLUDES now means SSI is enabled\n  without exec=.  OPT_INCLUDES|OPT_INC_WITH_EXEC means SSI is enabled\n  with exec=.\n\n* server/core.c (create_core_dir_config): Remove defunct OPT_INCNOEXEC\n  from default override_opts; no functional change.\n  (merge_core_dir_configs): Update logic to ensure that exec= is\n  disabled in a context where IncludesNoexec is configured, even if\n  Includes-with-exec is permitted in the inherited options set.\n  (set_allow_opts, set_options): Update to reflect new semantics\n  of OPT_INCLUDES, OPT_INC_WITH_EXEC.\n\n* server/config.c: Update to remove OPT_INCNOEXEC from default \n  override_opts; no functional change.\n\n* modules/filters/mod_include.c (includes_filter): Update to reflect\n  new options semantics - disable exec= support if the\n  OPT_INC_WITH_EXEC bit is not set.\n\nSubmitted by: Jonathan Peatfield <j.s.peatfield damtp.cam.ac.uk>,\n          jorton\nThanks to: Vincent Danon <vdanon redhat.com>",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/http_core.h"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "551f928ce4c023c49c7bcbfcb6700b55350d2b39": {
    "message": "Introduce mod_remoteip to trunk from httpd/sandbox/mod_remoteip",
    "match": "remoteip to trunk from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Apache.dsw"
      },
      {
        "file": "Makefile.win"
      },
      {
        "file": "modules/metadata/config.m4"
      },
      {
        "file": "modules/metadata/mod_remoteip.c"
      },
      {
        "file": "modules/metadata/mod_remoteip.dsp"
      },
      {
        "file": "os/win32/BaseAddr.ref"
      }
    ]
  },
  "4dbdf1b230a9316ef0c4cf0791c35905becb55ca": {
    "message": "Use CVE-2009-1191 for this issue.  We would only\nshare a CVE name where the flaw was due to a\nshared code base, and this isn't the case for\nthe mod_jk CVE-2008-5519 issue.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "06c6aa0a69944b59cdac6fe1dede5de69ad210bb": {
    "message": "* Add CVE number",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "23a2925ad60e9d66c0356ead5f090e8e7730a7f2": {
    "message": "fix mpm_get_name hook\n\na string can't be used as the declined value since the hook macro must compare \nretcodes from hooks with that declined value\n\n(thanks, gcc/Joe)\n\naccommodate in ap_show_mpm() since we don't want to return NULL to the caller of\nthis simple API",
    "match": "fix mpm_get_name hook\n\na string can't be used as the declined value since the hook macro must compare \nretcodes from hooks with that declined value\n\n(thanks, gcc/Joe)\n\naccommodate in ap_show_mpm() since we don't want to return NULL to the caller of\nthis simple API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "ededfce421d2b021bc7dcb047fd507ced84e76ed": {
    "message": "Creating the external gzip process fails, because we\ncall execve() with \"gzip\" without full path.\nLet's look for it in the PATH instead and drop the\npassing of the environment. There seems to be no\nreason why gzip should need the httpd environment.",
    "match": "cve",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/metadata/mod_mime_magic.c"
      }
    ]
  },
  "b91ea7056ee92b4eb0c1a35a37e3142981e82940": {
    "message": "* Escape pathes of filenames in 406 responses to avoid HTML injections and\n  HTTP response splitting.\n\nPR: 46837\nSubmitted by: Geoff Keating <geoffk apple.com>\nReviewed by: rpluem",
    "match": "HTML injec",
    "vulnerabilities": [
      "Injection",
      "Cross-Site Scripting"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/mappers/mod_negotiation.c"
      }
    ]
  },
  "a382cb2e5126c9969fe7cc5cf43a84c845929068": {
    "message": "ab: Fix maintenance of the pollset to resolve EINPROGRESS errors \nwith kqueue (BSD/OS X) and excessive CPU with event ports (Solaris).\n\nThe apr_pollset API requires that a socket be removed from\nthe pollset whenever there is a change to the requested events.\nThe socket must also be removed when it is closed.  This wasn't\ncompletely implemented.\n\nPR: 44584",
    "match": "Fix maintenance of the pollset to resolve EINPROGRESS errors \nwith kqueue (BSD/OS X) and excessive CPU with event ports (Solaris).\n\nThe apr_pollset API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/ab.c"
      }
    ]
  },
  "f770ba427918f8846dcc1d90c44efbdf506f1c47": {
    "message": "Introduce Win32 AcceptFilter handling.\n\nDivided into 3 classes, this implements the first two;\n\n * AcceptFilter 'data' - much as on Unix, accept will not complete\n   until data is ready to be accepted.  Unlike Unix, it will actually\n   fetch the first bucket full of data from the tcp socket, and this\n   patch implements passing that bucket into the core net brigade\n   in front of the accepted socket.\n\n * AcceptFilter 'connect' - just as in Apache 2.2, accept will not\n   complete until three way handshake is complete and the endpoints\n   are resolved, and quickly grabs the endpoint addresses using the\n   AcceptEx API (which some people have problems with).  This will\n   not be the default.\n\n * AcceptFilter 'none' [not yet implemented] - will be the traditional\n   select/WSAAccept style processing for broken network socket stacks\n   and more trivial tcp style connections.  If AcceptEx appears to be\n   a problem, the listener will be able to downgrade to 'none'.",
    "match": "patch implements passing that bucket into the core net brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "404f2f81f50befd398562b7324bcf1d0b86c9831": {
    "message": "Add support for escaping all non-ascii chars to ap_escape_html, and use\nit to fix PR#25202: encoding=\"entity\" doesn't work as advertised in\nmod_include.\nFor backport, this'll need an ABI-preserving version that'll be\na minor MMN bump.  But if we do that in /trunk/, it'll never change.",
    "match": "aping all non-ascii chars to ap_escape_html, and use\nit to fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "cd7ef5918b8b26d0ba0330d8bd7de03157fff4f7": {
    "message": "* modules/cache/mod_socache_memcache.c (socache_mc_init): Remove references\n  to SSL in log messages.\n  (socache_mc_retrieve): Use 'data' not 'der'; correctly return an error\n  for the overflow case.",
    "match": "Remove references\n  to SSL in log messages.\n  (socache_mc_retrieve): Use 'data' not 'der'; correctly return an error\n  for the overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/cache/mod_socache_memcache.c"
      }
    ]
  },
  "fe00fa95b6529598802bd86890dd4e47b92d0da2": {
    "message": "* modules/cache/mod_socache_memcache.c (socache_mc_create): Fail if\n  no argument is given.\n  (socache_mc_init): Increment the taglen field.\n  (socache_mc_id2key): Renamed from mc_session_id2sz and catch key\n  name overflow, per rpluem's review.\n  (socache_mc_store, socache_mc_retrieve, socache_mc_remove): \n  Adjust for new id2key interface.",
    "match": "rement the taglen field.\n  (socache_mc_id2key): Renamed from mc_session_id2sz and catch key\n  name overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/cache/mod_socache_memcache.c"
      }
    ]
  },
  "a3ed4f623f385296b474bf89edd8571af9d20475": {
    "message": "* include/http_core.h\n  (core_dir_config): Fix warning: overflow in implicit constant conversion,\n    generated by core.c line 117, which sets content_md5 to '2', which is too big\n    for a signed value -- but it looks like this was really meant to be unsigned.",
    "match": "Fix warning: overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "include/http_core.h"
      }
    ]
  },
  "e73309de4ceab3712c26fc89aafbaf55290dbd1b": {
    "message": "fix MaxClients description (r692325) suggested by wrowe",
    "match": "fix MaxClients des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mpm_common.xml"
      }
    ]
  },
  "968f3150a40669ed90822ecd2f3e6ba65ed6efdb": {
    "message": "Introduce Suspendable Requests to the Event MPM.\n\nUsing this basic framework, you can return SUSPENDED from an HTTP Handler,\nand then register a callback that is invoked by the MPM at a later time.\n\nThis initial version only supports _timers_ as callbacks, but in the future I\nwould like to add things like wait for socket activity, on a socket specified by\nthe handler.\n\nOnce in a callback, It is then the responsibility of the callback fucntion \nto finish the HTTP Request handling, but this alows you to do cool things like \na fully async proxy, COMET support, or even rate limiting.\n\nTo prove I'm not insane, I've inlcuded an example module, mod_dialup.\n\nYou can configure it like this:\n<Location \"/docs\">\n  ModemStandard \"V.32\"\n</Location>\n\nAnd for static files inside that path, you will be rate limited to V.32 speeds, \naka 9.6 kilobits/second.\n\nDoes anyone besides R\u00c3\u00bcdiger read commit emails :-) ?\n\nI know there are likely huge problems with this, but I would like to see how far\nwe can push the Event MPM, figure out what to do better, if there is anything, \nand then really dive into the 3.0 development before ApacheCon.\n\n* server/mpm/experimental/event/fdqueue.h:\n    (timer_event_t): New structure to hold timer events and callback functions.\n    \n* server/mpm/experimental/event/fdqueue.c\n    (ap_queue_empty): Modify to also look at Timer Ring.\n\n    (ap_queue_init): Initialize Timer Ring.\n\n    (ap_queue_push_timer): New function, pushes a timer event into the queue.\n\n    (ap_queue_pop_something): Renamed function, returns a timer event or\n        a socket/pool for a worker thread to run.\n\n\n* server/mpm/experimental/event/event.c\n    (process_socket): If the connection is in SUSPENDED state, don't force it\n        into linger mode yet, the callback will have to take care of that.\n\n    (push_timer2worker): New shortcut function, pushes timer event into queue\n        for a worker to run.\n\n    (timer_free_ring): New global data structure to recycle memory used by \n        timer events.\n\n    (timer_ring): New global data structure to hold active timer events.\n\n    (g_timer_ring_mtx): Thread mutex to protect timer event data structures.\n\n    (ap_mpm_register_timed_callback): New Function, registers a callback to be\n        invoked by the MPM at a later time.\n\n    (listener_thread): Calculate our wakeup time based on the upcoming Event \n        Queue, and after pollset_poll runs, push any Timers that have passed\n        onto worker threads to run.\n    \n    (worker_thread): Call new queue pop method, and if the Timer Event is \n        non-null, invoke the callback.  Once the callback is done, push the\n        structure onto the timer_free_ring, to be recycled.\n\n    (child_main): Initialize new mutex and ring structures.\n\n\n* server/config.c\n    (ap_invoke_handler): Allow SUSPENDED aa valid return code from handlers.\n\n\n* modules/http/http_core.c\n    (ap_process_http_async_connection): Don't close the connection when in \n        SUSPENDED state.\n\n\n* modules/http/http_request.c\n    (ap_process_request_after_handler): New function, body pulled from the old,\n        ap_process_async_request.  Split to let handlers invoke this so they \n        don't need to know all of the details of finishing a request.\n\n    (ap_process_async_request): If the handler returns SUSPENDED, don't do\n        anything but return.\n\n\n* include/ap_mmn.h: Bump MMN.\n\n\n* include/ap_mpm.h\n    (ap_mpm_register_timed_callback): New function.\n\n\n* include/httpd.h:\n    (SUSPENDED): New return code for handlers.\n    (request_rec::invoke_mtx): New mutex to protect callback invokcations\n        from being run before the original handler finishes running.\n    (conn_state_e): Add a suspended state.\n\n\n* include/http_request.h\n    (ap_process_request_after_handler): New function to make it easier for \n        handlers to finish the HTTP Request.\n\n\n* modules/test/config.m4: Add mod_dialup to build.\n\n\n* modules/test/mod_dialup.c: New rate limiting module, requires the Event MPM \n    to work.",
    "match": "second.\n\nDoes anyone besides R\u00c3\u00bcdiger read commit emails :-) ?\n\nI know there are likely huge problems with this, but I would like to see how far\nwe can push the Event MPM, figure out what to do better, if there is anything, \nand then really dive into the 3.0 development before ApacheCon.\n\n* server/mpm/experimental/event/fdqueue.h:\n    (timer_event_t): New structure to hold timer events and callback functions.\n    \n* server/mpm/experimental/event/fdqueue.c\n    (ap_queue_empty): Modify to also look at Timer Ring.\n\n    (ap_queue_init): Initialize Timer Ring.\n\n    (ap_queue_push_timer): New function, pushes a timer event into the queue.\n\n    (ap_queue_pop_something): Renamed function, returns a timer event or\n        a socket/pool for a worker thread to run.\n\n\n* server/mpm/experimental/event/event.c\n    (process_socket): If the connection is in SUSPENDED state, don't force it\n        into linger mode yet, the callback will have to take care of that.\n\n    (push_timer2worker): New shortcut function, pushes timer event into queue\n        for a worker to run.\n\n    (timer_free_ring): New global data structure to recycle memory used by \n        timer events.\n\n    (timer_ring): New global data structure to hold active timer events.\n\n    (g_timer_ring_mtx): Thread mutex to protect timer event data structures.\n\n    (ap_mpm_register_timed_callback): New Function, registers a callback to be\n        invoked by the MPM at a later time.\n\n    (listener_thread): Calculate our wakeup time based on the upcoming Event \n        Queue, and after pollset_poll runs, push any Timers that have passed\n        onto worker threads to run.\n    \n    (worker_thread): Call new queue pop method, and if the Timer Event is \n        non-null, invoke the callback.  Once the callback is done, push the\n        structure onto the timer_free_ring, to be recycled.\n\n    (child_main): Initialize new mutex and ring structures.\n\n\n* server/config.c\n    (ap_invoke_handler): Allow SUSPENDED aa valid return code from handlers.\n\n\n* modules/http/http_core.c\n    (ap_process_http_async_connection): Don't close the connection when in \n        SUSPENDED state.\n\n\n* modules/http/http_request.c\n    (ap_process_request_after_handler): New function, body pulled from the old,\n        ap_process_async_request.  Split to let handlers invoke this so they \n        don't need to know all of the details of finishing a request.\n\n    (ap_process_async_request): If the handler returns SUSPENDED, don't do\n        anything but return.\n\n\n* include/ap_mmn.h: Bump MMN.\n\n\n* include/ap_mpm.h\n    (ap_mpm_register_timed_callback): New function.\n\n\n* include/httpd.h:\n    (SUSPENDED): New return code for handlers.\n    (request_rec::invoke_mtx): New mutex to protect",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/ap_mpm.h"
      },
      {
        "file": "include/http_request.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "modules/test/config.m4"
      },
      {
        "file": "modules/test/mod_dialup.c"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/mpm/experimental/event/event.c"
      },
      {
        "file": "server/mpm/experimental/event/fdqueue.c"
      },
      {
        "file": "server/mpm/experimental/event/fdqueue.h"
      }
    ]
  },
  "ef77a1559551a99d11707258236a6c25369e6ded": {
    "message": "Fix MaxClients description to adapt threading MPM.\n(This is still inaccurate for trunk Event MPM.)\n\nSubmitted by Dan Poirier <poirier pobox.com>\nPR: 45747",
    "match": "Fix MaxClients des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mpm_common.xml"
      }
    ]
  },
  "5d047caab21c593fe0f5036e4b0b76f924896f4f": {
    "message": "Add in bybusyness LB method, via Joel Gluth in\n   https://issues.apache.org/bugzilla/show_bug.cgi?id=45501\n\nNOTE: Name changed and added in to ease enhancement/bugfixes",
    "match": "Add in bybusyness LB method, via Joel Gluth in\n   https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_proxy.xml"
      },
      {
        "file": "docs/manual/mod/mod_proxy_balancer.xml"
      },
      {
        "file": "modules/proxy/mod_proxy_balancer.c"
      }
    ]
  },
  "89abaf8bf3515202e22898b7e402fab7f088ec68": {
    "message": "* Introduce environment variable proxy-initial-not-pooled to avoid reusing\n  pooled connections if the client connection is an initial connection.\n  This avoids the \"proxy: error reading status line from remote server\"\n  error caused by the race condition that the backend server closed the\n  connection after the connection check on our side and before our data\n  reached the backend. Yes, this downgrades performance, especially with\n  HTTP/1.0 clients. Hence it is configurable and off by default.\n\nPR: 37770",
    "match": "remote server\"\n  error caused by the race condition that the backend server closed the\n  connection after the connection check on our side and before our data\n  reached the backend. Yes, this downgrades performance, especially with\n  HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "9d283cf23ab128b793cc5fa6cd4c1bfd9c820471": {
    "message": "* Prevent XSS attacks when using wildcards in the path of the FTP URL\n  (CVE-2008-2939). Discovered by Marc Bevand of Rapid7.",
    "match": "Prevent XSS",
    "vulnerabilities": [
      "Cross-Site Scripting",
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_ftp.c"
      }
    ]
  },
  "4711f90002dea305600274287e470b696f6ae79b": {
    "message": "Patch for CVE-2008-2364...",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "20f3a459a1d80d476e133ab57112087818cda1cb": {
    "message": "No functional change; simplify the CVE-2007-6420 fix slightly, as\nsuggested by rpluem:\n\n* modules/proxy/mod_proxy_balancer.c (balancer_init): Serialize the\n  UUID to a string here...\n  (balancer_handler): ...rather than here.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_balancer.c"
      }
    ]
  },
  "ad41158e0ae128694b3fb4298bdb6b90bc3cb673": {
    "message": "Prevent CSRF attacks against the balancer-manager (CVE-2007-6420)\n\n* modules/proxy/mod_proxy_balancer.c (balancer_init): New function.\n  (balancer_handler): Place a nonce in the form output, and check that\n  the submitted form data includes that nonce.\n  (ap_proxy_balancer_register_hook): Register the new post_config hook.",
    "match": "Prevent CSRF attack",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Cross-Site Request Forgery",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_balancer.c"
      }
    ]
  },
  "955832af8cf462b781b1e38a3d0429043681ee92": {
    "message": "*  mod_proxy_http.c\n   Ensure that the EOC bucket is inserted BEFORE an EOS bucket in bb as\n   some resource filters like mod_deflate pass everything up to the EOS\n   down the chain immediately and sent the remainder of the brigade later\n   (or even never). But in this case the ap_http_header_filter does not\n   get out of our way soon enough.\n\n   http_filters.c\n   Remove all data buckets that are in a brigade after an EOC bucket\n   was seen, as an EOC bucket tells us that no (further) resource\n   and protocol data should go out to the client. OTOH meta buckets\n   are still welcome as they might trigger needed actions down in\n   the chain (e.g. in network filters like SSL).\n   Remark 1: It is needed to dump ALL data buckets in the brigade\n             since an filter in between might have inserted data\n             buckets BEFORE the EOC bucket sent by the original\n             sender and we do NOT want this data to be sent.\n   Remark 2: Dumping all data buckets here does not necessarily mean\n             that no further data is send to the client as:\n             1. Network filters like SSL can still be triggered via\n                meta buckets to talk with the client e.g. for a\n                clean shutdown.\n             2. There could be still data that was buffered before\n                down in the chain that gets flushed by a FLUSH or an\n                EOS bucket.\n\nPR: 37770",
    "match": "remainder of the brigade later\n   (or even never). But in this case the ap_http_header_filter does not\n   get out of our way soon enough.\n\n   http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_filters.c"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "5d945f5ac653ddaefe6da9a57793990d00201362": {
    "message": "Adjust socache init interface to take sizing hints, and namespace tag\nfor memcache:\n\n* modules/cache/ap_socache.h (struct ap_socache_hints): New structure.\n  Change init callback to take namespace string and hints structure pointer.\n\n* modules/cache/mod_socache_dc.c (socache_dc_init): Adjust accordingly.\n\n* modules/cache/mod_socache_dbm.c (struct ap_socache_instance_t): Rename\n  timeout field to expiry_interval.\n  (socache_dbm_init, socache_dbm_create): Take expiry interval from\n  hints rather than hard-code to 30.\n  (socache_dbm_expire): Update for timeout field rename.\n\n* modules/cache/mod_socache_shmcb.c (socache_shmcb_init): Adjust for\n  hints and namespace; adjust subcache index sizing heuristics to use\n  passed-in hints.\n\n* modules/cache/mod_socache_memcache.c (struct ap_socache_instance_t):\n  Add tag, taglen fields.\n  (socache_mc_init): Store the passed-in namespace in instance\n  structure.\n  (mc_session_id2sz): Adjust to not take context, use configured\n  tag as string prefix, and not use a return value.\n  (socache_mc_store, socache_mc_retrieve, socache_mc_remove):\n  Adjust for mc_session_id2sz interface changes.\n\n* modules/ssl/ssl_scache.c (ssl_scache_init): Pass namespace and hints\n  to socache provider init function.",
    "match": "timeout field to expiry_interval.\n  (socache_dbm_init, socache_dbm_create): Take expiry interval from\n  hints rather than hard-code to 30.\n  (socache_dbm_expire): Update for timeout field rename.\n\n* modules/cache/mod_socache_shmcb.c (socache_shmcb_init): Adjust for\n  hints and namespace; adjust subcache index sizing heuristics to use\n  passed-in hints.\n\n* modules/cache/mod_socache_memcache.c (struct ap_socache_instance_t):\n  Add tag, taglen fields.\n  (socache_mc_init): Store the passed-in namespace in instance\n  structure.\n  (mc_session_id2sz): Adjust to not take context, use configured\n  tag as string prefix, and not use a return value.\n  (socache_mc_store, socache_mc_retrieve, socache_mc_remove):\n  Adjust for mc_session",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/cache/ap_socache.h"
      },
      {
        "file": "modules/cache/mod_socache_dbm.c"
      },
      {
        "file": "modules/cache/mod_socache_dc.c"
      },
      {
        "file": "modules/cache/mod_socache_memcache.c"
      },
      {
        "file": "modules/cache/mod_socache_shmcb.c"
      },
      {
        "file": "modules/ssl/ssl_scache.c"
      }
    ]
  },
  "a22ff707f74100b0e2e5ad0ac6a9f7f27b27e092": {
    "message": "Clarify the operation of the SessionCryptoPassphrase directive as raised by rpluem. When\nSessionCryptoCertificateFile is set, asymmetrical encryption will be used, and SessionCryptoPassphrase\nwill be interpreted as the passphrase protecting the private key. When SessionCryptoCertificateFile\nis not set, symmetrical encryption is used, and SessionCryptoPassphrase will contain the key to\nuse. Make sure that the engine parameter is properly passed into the crypto functions, and fix a\nmissing cleanup on an error case.",
    "match": "encryption will be used, and SessionCryptoPassphrase\nwill be interpreted as the passphrase protecting the private key. When SessionCryptoCertificateFile\nis not set, symmetrical encryption is used, and SessionCryptoPassphrase will contain the key to\nuse. Make sure that the engine parameter is properly passed into the crypto functions, and fix a\nmissing cleanup on an error",
    "vulnerabilities": [
      "Encryption Issues"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_session_crypto.xml"
      },
      {
        "file": "modules/session/mod_session_crypto.c"
      }
    ]
  },
  "ac8004f32fa78065d70acc56da8ba42664a37e35": {
    "message": "* Prevent a segfault if the destination URI of a copy / move operation is\n  not under DAV control. Return 405 (Method not allowed) instead.\n\nPR: 44734",
    "match": "Prevent a segfault if the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/dav/main/mod_dav.c"
      }
    ]
  },
  "23693204b99b73e63af8e998666cc914e24a685e": {
    "message": "Fix mixed up descriptions of regex tokens.\n\nSubmitted by: Shawn Ashlee (shawn.ashlee rackspace.com)",
    "match": "Fix mixed up des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/rewrite/rewrite_intro.xml"
      }
    ]
  },
  "170574b982a08575c170a97b6e42a7d92304c467": {
    "message": "This is really really out of date... try to refresh it;\nremove the current \"list\" of people for now, maybe add link\nto httpd.apache.org or http://people.apache.org/~jim/projects.html#httpd\ninstead",
    "match": "remove the current \"list\" of people for now, maybe add link\nto httpd.apache.org or http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "ABOUT_APACHE"
      }
    ]
  },
  "6c7d80d382ccafc16acefa9ab85f3db3e4bc33af": {
    "message": "* Added missing CVE number",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "c7752700bb27de1d0e1314cfa5b06bc6b5e398a1": {
    "message": "* Added missing CVE number",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "0d32dc95744b81c234b76ae54d199c7d4943839f": {
    "message": "* Ensure refresh parameter is numeric to prevent a possible XSS attack caused\n  by redirecting to other URLs. Reported by SecurityReason.\n\nSubmitted by: Mark Cox, Joe Orton\nReviewed by: security@httpd.apache.org",
    "match": "prevent a possible XSS",
    "vulnerabilities": [
      "Cross-Site Scripting",
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_status.c"
      }
    ]
  },
  "91104c75df0f6bdc2d58b922251c7e4426d34da3": {
    "message": "* Fix a SEGFAULT by ensuring that buckets that may have been buffered in the\n  network filters get flushed to the network. This is needed since\n  these buckets have been created with the bucket allocator of the\n  backend connection. This allocator either gets destroyed if\n  conn->close is set or the worker address is not reusable which\n  causes the connection to the backend to be closed or it will be used\n  again by another frontend connection that wants to recycle the\n  backend connection.\n  In this case we could run into nasty race conditions (e.g. if the\n  next user of the backend connection destroys the allocator before we\n  sent the buckets to the network).\n\n  Remark 1: Doing a setaside does not help here as the buckets remain\n  created by the wrong allocator in this case.\n\n  Remark 2: Yes, this creates a possible performance penalty in the case\n  of pipelined requests as we may send only a small amount of data over\n  the wire.",
    "match": "Fix a SEGFAULT by ensuring that buckets that may have been buffered in the\n  network filters get flushed to the network. This is needed since\n  these buckets have been created with the bucket allocator of the\n  backend connection. This allocator either gets destroyed if\n  conn->close is set or the worker address is not reusable which\n  causes the connection to the backend to be closed or it will be used\n  again by another frontend connection that wants to recycle the\n  backend connection.\n  In this case we could run into nasty race conditions (e.g. if the\n  next user of the backend connection des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/mod_proxy_ftp.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "b7881ae804aa98ca91cc47616b41fb7ece9f7c70": {
    "message": "Fix CVE-2007-5000:\n\n* modules/mappers/mod_imagemap.c (menu_header): Fix\n  cross-site-scripting issue by escaping the URI, and ensure that a\n  charset parameter is sent in the content-type to prevent\n  autodetection by broken browsers.\n\nReported by: JPCERT",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_imagemap.c"
      }
    ]
  },
  "c2bed0f7c3519c06e98abaf52663c02e13161c37": {
    "message": "Further to r599711; document new API guarantee for handling non-NULL\nrequest_rec pointer when adding connection filters; minor MMN bump:\n\n* server/util_filter.c (add_any_filter_handle): Set f->r for\n  connection filters even if passed-in r is non-NULL.  Style nit fix\n  also.\n\n* include/util_filter.h (ap_add_output_filter,\n  ap_add_output_filter_handle): Document new API guarantee.\n\n* include/ap_mmn.h: Minor MMN bump.",
    "match": "API guarantee for handling non-NULL\nrequest_rec pointer when adding connection filters; minor MMN bump:\n\n* server/util_filter.c (add_any_filter_handle): Set f->r for\n  connection filters even if passed-in r is non-NULL.  Style nit fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/util_filter.h"
      },
      {
        "file": "server/util_filter.c"
      }
    ]
  },
  "bbb7b5a69d2c25a88c94e330d3a022d53a41e070": {
    "message": "Prevent 1-byte overflow on 8192 boundary (see PR 43310)",
    "match": "Prevent 1-byte overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "0df5b8e7df2950c7c9e6baad8431b292ee4f0c73": {
    "message": "Add option not to send&clear response headers in ap_send_interim_response.\nWe'll need this option to fix PR#43711, and ap_send_interim_response\nis fortunately too new an API to have made it into anything stable.",
    "match": "fix PR#43711, and ap_send_interim_response\nis fortunately too new an API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "include/http_protocol.h"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "22d2909257bb9e92b8f60cf85d1483efb6d458e4": {
    "message": "* Rationalise the two ap_unescape_url versions\n* Fix ap_unescape_url_keep2f to work as documented (keep %2F encoded,\n  bringing it into line with the documentation as well as common sense).\n* Introduce suggestion of an extension to the API\nThe most relevant open PR is 41798",
    "match": "Fix ap_unescape_url_keep2f to work as documented (keep %2F encoded,\n  bringing it into line with the documentation as well as common sense).\n* Introduce suggestion of an extension to the API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/util.c"
      }
    ]
  },
  "2175af98badc5a08691abd25c2b2e444704faa42": {
    "message": "Fix FilterTrace directive's description",
    "match": "Fix FilterTrace directive's des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_filter.c"
      }
    ]
  },
  "afc7b3d09fd01a12cafa3a5e3b9193b91b242afe": {
    "message": "Fix buffer overflow in date handling\nPR 41144 (Davi Arnaut)",
    "match": "Fix buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "fe9ba89476c5bd77dbba28d2b7b970f0b4121dff": {
    "message": "This data is passed in an unsafe way to the LDAP SDK if the compiler \nchooses to use shorts for the enum values.\nhttp://www.redbooks.ibm.com/redbooks/SG245992/nn4/SG245992_88.html\n\nSubmitted by: David Jones",
    "match": "passed in an unsafe",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "include/util_ldap.h"
      },
      {
        "file": "modules/aaa/mod_authnz_ldap.c"
      },
      {
        "file": "modules/ldap/util_ldap.c"
      }
    ]
  },
  "c180db9225764c60d3ff842ef73b781c843736e5": {
    "message": "Add alternative fixes for CVE-2007-3304:\n\n* configure.in: Check for getpgid.\n\n* include/mpm_common.h (ap_mpm_safe_kill): New prototype.\n\n* server/mpm_common.c (reclaim_one_pid): Ensure pid validity before\ncalling apr_proc_wait().\n(ap_mpm_safe_kill): New function.\n\n* server/mpm/prefork/prefork.c, server/mpm/worker/worker.c,\nserver/mpm/experimental/event/event.c: Use ap_mpm_safe_kill() on pids\nfrom the scoreboard, throughout.\n\n* include/ap_mmn.h: Minor bump.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/mpm_common.h"
      },
      {
        "file": "server/mpm/experimental/event/event.c"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm/worker/worker.c"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "ab0cacf22026b18e3b5ec814247e4dbf2106c53a": {
    "message": "This issue now has a CVE name",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "6f0c8008746b58eb0a59f59501163eea2921d03d": {
    "message": "Fix CVE-2006-5752:\n\n* modules/generators/mod_status.c (status_handler): Specify charset in\ncontent-type to prevent browsers doing charset \"detection\", which\nallows an XSS attack.  Use logitem-escaping on the request string to\nmake it charset-neutral.\n\nReported by: Stefan Esser <sesser hardened-php.net>",
    "match": "Fix CVE-2006-5752:\n\n* modules/generators/mod_status.c (status_handler): Specify charset in\ncontent-type to prevent browsers doing charset \"detection\", which\nallows an XSS",
    "vulnerabilities": [
      "Cross-Site Scripting",
      "Insufficient Attack Protection",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_status.c"
      }
    ]
  },
  "0fcdd1e21cd2f75c1887e7872e5f0ca79a51f8f4": {
    "message": "SECURITY: CVE-2007-1862 (cve.mitre.org)\nmod_mem_cache: Copy headers into longer lived storage; header names and\nvalues could previously point to cleaned up storage\n\nPR: 41551\nSubmitted by: Davi Arnaut <davi haxent.com.br>\nReviewed by: covener",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/cache/mod_mem_cache.c"
      }
    ]
  },
  "6927307dd467b5695c8d12bd0742a127fdc02bad": {
    "message": "- In AP_MODE_SPECULATIVE ap_core_input_filter returns APR_SUCCESS and an empty\n  brigade in the case that a non blocking read from the socket returned\n  APR_EAGAIN. So getting an empty brigade also shows that no data is present\n  in the input filter.\n  While this reduces the number of false positives for \"real data\" in the input\n  filter the behaviour is not as good as before 533820 because if there are\n  only CRLF's in the input filter we do not flush, but we should. To fix this\n  it seems that a simulation of AP_MODE_EATCRLF is needed inside of\n  check_pipeline.\n- Destroy brigade bb at the end of the function.",
    "match": "fix this\n  it seems that a simulation of AP_MODE_EATCRLF is needed inside of\n  check_pipeline.\n- Des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_request.c"
      }
    ]
  },
  "581ee2b74f083f34cab92b2e5706e25b7ffb333d": {
    "message": "We now create memory sub-pools for each DB connection and close DB\nconnections in a pool cleanup function.  This simplifies the ap_dbd_acquire()\nand ap_dbd_cacquire() functions, and also stops us from leaking ap_dbd_t\nstructures when using reslists.\n\nWe ensure that prepared statements are destroyed before their DB connection\nis closed, in case any drivers would have problems cleaning up prepared\nstatements after the DB connection is closed.\n\nThe combination of reslists and memory pool cleanup functions was causing\nsegfaults when child processes exited, as reported in PR 39985.  To prevent\nthis, we register dbd_destroy() as a cleanup that will execute prior to\nthe internal cleanup function registered by apr_reslist_create().  When the\nreslist's memory pool is destroyed, dbd_destroy() informs dbd_destruct() not\nto do anything when subsequently called by the reslist's internal cleanup\nfunction.\n\nWe avoid the use of s->process->pool (the global pool) since it isn't\ndestroyed by exiting child processes in most multi-process MPMs.",
    "match": "prevent\nthis, we register dbd_destroy() as a cleanup that will execute prior to\nthe internal cleanup function registered by apr_reslist_create().  When the\nreslist's memory pool is des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/database/mod_dbd.c"
      }
    ]
  },
  "2dd09306752ca58807d9fe050a098ef94826fc32": {
    "message": "* CVE-2006-3747 was the main reason to release 2.2.3. So place the changelog\n  entry where it belongs.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "1fac44bc7adf1d38696019610727cd5f6ff74c79": {
    "message": "sendfile_nonblocking() takes the _brigade_ as an argument, gets\nthe first bucket from the brigade, finds it not to be a FILE\nbucket and barfs. The fix is to pass a bucket rather than a brigade.",
    "match": "fix is to pass a bucket rather than a brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core_filters.c"
      }
    ]
  },
  "314600b4e896406a6b5465f12f219c5b8e840a74": {
    "message": "* Notice a timeout as an error message. This might be valuable for detecting\n  clients with broken network connections or possible DoS attacks.",
    "match": "detecting\n  clients with broken network connections or possible DoS attack",
    "vulnerabilities": [
      "Insufficient Attack Protection",
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_request.c"
      }
    ]
  },
  "8ec8600b3fdead62582a24ff2a35b29cd3f3496c": {
    "message": "Memory leak fix: Unconditionally free the buffer.",
    "match": "Memory leak fix",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/cache/mod_mem_cache.c"
      }
    ]
  },
  "95922f28042fd334ff2548ca226bf2dca22095c5": {
    "message": "Add a note about case-sensitivity to the windows platform docs.\nPartially in response to the disputed vulnerability:\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4110",
    "match": "vulnerab",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/platform/windows.html.en"
      },
      {
        "file": "docs/manual/platform/windows.xml"
      }
    ]
  },
  "f324d1f0caf950ec6c24a8f3e2cac93d7074b632": {
    "message": "Make it clear that url-path is always case-sensitive.\nProvide an example of using a regex to make it case-insensitive.\nMake it clear that ScriptAlias is only used when you want\nBOTH mapping and script-designation.\n\nPartially in response to the disputed vulnerability:\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4110",
    "match": "vulnerab",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_alias.html.en"
      },
      {
        "file": "docs/manual/mod/mod_alias.xml"
      }
    ]
  },
  "1c61c93442ce6c5306c4a7d5ce91fbb31f0ce269": {
    "message": "* Rework inflate out filter and give it a similar workflow as the deflate out\n  filter. This fixes the following bugs in the inflate out filter:\n\n  - Incorrect handling of flush buckets.\n  - Excessive memory usage for large compressed content (because we now\n    already sent parts down the chain and do not process the whole brigade\n    first before sending something down the chain).\n  - Handle the case correctly where the validation bytes at the end of\n    the compressed data stream are distributed across different buckets /\n    brigades.\n  - Fix a memory leak due to not cleaning up the internal structures of\n    libz in some error cases.\n\nPR: 39854",
    "match": "fixes the following bugs in the inflate out filter:\n\n  - Incorrect handling of flush buckets.\n  - Excessive memory usage for large compressed content (because we now\n    already sent parts down the chain and do not process the whole brigade\n    first before sending something down the chain).\n  - Handle the case correctly where the validation bytes at the end of\n    the compressed data stream are distributed across different buckets /\n    brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "e2a9028db5b079e01eb6b9ac06299bd06dd59574": {
    "message": "SECURITY: CVE-2006-3747 (cve.mitre.org)\nmod_rewrite: Fix an off-by-one security problem in the ldap scheme\nhandling.  For some RewriteRules this could lead to a pointer being\nwritten out of bounds.  Reported by Mark Dowd of McAfee.\n\nAck: trawick, lars, jorton, wrowe, benl",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      }
    ]
  },
  "0a97d98db0ecba21109658a1098ff6ed991736da": {
    "message": "Fix a problem with invalid auth error detection for LDAP client SDKs that don't support LDAP_SECURITY_ERROR macro. PR#39529\n\nSubmitted by: [Ray Price <dohrayme yahoo.com>], [Josh Fenlason <jfenlason ptc.com>]",
    "match": "Fix a problem with invalid auth error detection for LDAP client SDKs that don't support LDAP_SECURITY_ERROR",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/aaa/mod_authnz_ldap.c"
      }
    ]
  },
  "06d6fbf40b372d2f055ebd2145b47035e04a8bf2": {
    "message": "Provide vhosts examples remotely related to the httpd.conf we create?",
    "match": "remotely related to the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/extra/httpd-vhosts.conf.in"
      }
    ]
  },
  "48372a9bacb3e02f3b6e8d7e25d996d21ea2d40b": {
    "message": "Remove a host of dependencies upon awk, using the same template for\n  nearly every .rc compilation (giving the output .res file a different\n  name for each component).  Adds AP_SERVER_BASEPROJECT to ap_revision.h\n  so we can display the proper name of \"Apache HTTP Server\" as opposed\n  to AP_SERVER_BASEPRODUCT (which is, and should remain, simply \"Apache\"\n  for the server string tokens.)",
    "match": "Remove a host of dependencies upon awk, using the same template for\n  nearly every .rc compilation (giving the output .res file a different\n  name for each component).  Adds AP_SERVER_BASEPROJECT to ap_revision.h\n  so we can display the proper name of \"Apache HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "httpd.dsp"
      },
      {
        "file": "include/ap_release.h"
      },
      {
        "file": "libhttpd.dsp"
      },
      {
        "file": "modules/aaa/mod_auth_basic.dsp"
      },
      {
        "file": "modules/aaa/mod_auth_digest.dsp"
      },
      {
        "file": "modules/aaa/mod_authn_anon.dsp"
      },
      {
        "file": "modules/aaa/mod_authn_dbd.dsp"
      },
      {
        "file": "modules/aaa/mod_authn_dbm.dsp"
      },
      {
        "file": "modules/aaa/mod_authn_default.dsp"
      },
      {
        "file": "modules/aaa/mod_authn_file.dsp"
      },
      {
        "file": "modules/aaa/mod_authnz_ldap.dsp"
      },
      {
        "file": "modules/aaa/mod_authz_dbm.dsp"
      },
      {
        "file": "modules/aaa/mod_authz_default.dsp"
      },
      {
        "file": "modules/aaa/mod_authz_groupfile.dsp"
      },
      {
        "file": "modules/aaa/mod_authz_host.dsp"
      },
      {
        "file": "modules/aaa/mod_authz_user.dsp"
      },
      {
        "file": "modules/arch/win32/mod_isapi.dsp"
      },
      {
        "file": "modules/cache/mod_cache.dsp"
      },
      {
        "file": "modules/cache/mod_disk_cache.dsp"
      },
      {
        "file": "modules/cache/mod_file_cache.dsp"
      },
      {
        "file": "modules/cache/mod_mem_cache.dsp"
      },
      {
        "file": "modules/database/mod_dbd.dsp"
      },
      {
        "file": "modules/dav/fs/mod_dav_fs.dsp"
      },
      {
        "file": "modules/dav/main/mod_dav.dsp"
      },
      {
        "file": "modules/debug/mod_bucketeer.dsp"
      },
      {
        "file": "modules/debug/mod_dumpio.dsp"
      },
      {
        "file": "modules/echo/mod_echo.dsp"
      },
      {
        "file": "modules/filters/mod_charset_lite.dsp"
      },
      {
        "file": "modules/filters/mod_deflate.dsp"
      },
      {
        "file": "modules/filters/mod_ext_filter.dsp"
      },
      {
        "file": "modules/filters/mod_include.dsp"
      },
      {
        "file": "modules/generators/mod_asis.dsp"
      },
      {
        "file": "modules/generators/mod_autoindex.dsp"
      },
      {
        "file": "modules/generators/mod_cgi.dsp"
      },
      {
        "file": "modules/generators/mod_info.dsp"
      },
      {
        "file": "modules/generators/mod_status.dsp"
      },
      {
        "file": "modules/http/mod_mime.dsp"
      },
      {
        "file": "modules/ldap/mod_ldap.dsp"
      },
      {
        "file": "modules/loggers/mod_log_config.dsp"
      },
      {
        "file": "modules/loggers/mod_log_forensic.dsp"
      },
      {
        "file": "modules/loggers/mod_logio.dsp"
      },
      {
        "file": "modules/mappers/mod_actions.dsp"
      },
      {
        "file": "modules/mappers/mod_alias.dsp"
      },
      {
        "file": "modules/mappers/mod_dir.dsp"
      },
      {
        "file": "modules/mappers/mod_imagemap.dsp"
      },
      {
        "file": "modules/mappers/mod_negotiation.dsp"
      },
      {
        "file": "modules/mappers/mod_rewrite.dsp"
      },
      {
        "file": "modules/mappers/mod_speling.dsp"
      },
      {
        "file": "modules/mappers/mod_userdir.dsp"
      },
      {
        "file": "modules/mappers/mod_vhost_alias.dsp"
      },
      {
        "file": "modules/metadata/mod_cern_meta.dsp"
      },
      {
        "file": "modules/metadata/mod_env.dsp"
      },
      {
        "file": "modules/metadata/mod_expires.dsp"
      },
      {
        "file": "modules/metadata/mod_headers.dsp"
      },
      {
        "file": "modules/metadata/mod_ident.dsp"
      },
      {
        "file": "modules/metadata/mod_mime_magic.dsp"
      },
      {
        "file": "modules/metadata/mod_setenvif.dsp"
      },
      {
        "file": "modules/metadata/mod_unique_id.dsp"
      },
      {
        "file": "modules/metadata/mod_usertrack.dsp"
      },
      {
        "file": "modules/metadata/mod_version.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy_ajp.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy_balancer.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy_connect.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy_ftp.dsp"
      },
      {
        "file": "modules/proxy/mod_proxy_http.dsp"
      },
      {
        "file": "modules/ssl/mod_ssl.dsp"
      },
      {
        "file": "support/ab.dsp"
      },
      {
        "file": "support/abs.dsp"
      },
      {
        "file": "support/htcacheclean.dsp"
      },
      {
        "file": "support/htdbm.dsp"
      },
      {
        "file": "support/htdigest.dsp"
      },
      {
        "file": "support/htpasswd.dsp"
      },
      {
        "file": "support/logresolve.dsp"
      },
      {
        "file": "support/rotatelogs.dsp"
      },
      {
        "file": "support/win32/ApacheMonitor.dsp"
      },
      {
        "file": "support/win32/ApacheMonitor.rc"
      },
      {
        "file": "support/win32/wintty.dsp"
      }
    ]
  },
  "e97839d65937a514a222d2fee56c5c13f9d7653f": {
    "message": "Thiago Zaninotti reported to security@apache.org on 20060410 a possible\ncross-site scripting flaw because the Expect header error message isn't\nescaped.  We couldn't find a way that this could be used by an attacker\nhowever, as they can't influence the Expect header a victim will send to a\ntarget site.  Thiago agreed and we're therefore not treating this as a\nsecurity flaw, but it is a bug that ought to get fixed.  I'll add to \nSTATUS for 1.3/2.0/2.2 shortly for acks.",
    "match": "cross-site scripting flaw because the Expect header error message isn't\nescaped.  We couldn't find a way that this could be used by an attacker\nhowever, as they can't influence the Expect header a victim will send to a\ntarget site.  Thiago agreed and we're therefore not treating this as a\nsecurity flaw, but it is a bug that ought to get fix",
    "vulnerabilities": [
      "Cross-Site Scripting",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "927ba95a0ce742f730bd38e1ea91d8e0587f61ff": {
    "message": "htdbm: Warn the user when adding a plaintext password on a platform\nwhere it wouldn't work with the server (i.e., anywhere that has\ncrypt()).",
    "match": "plaintext pass",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/htdbm.c"
      }
    ]
  },
  "da6c28e7420b757f66200c1856e06f6d5450ddf7": {
    "message": "* Do not remove the connection headers from r->headers_in. They are needed\n  by the http output filter to create the correct connection response headers.\n  Instead work on a copy of r->headers_in.\n\nPR: 38524",
    "match": "remove the connection headers from r->headers_in. They are needed\n  by the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "93fcdef720b4607ab94a450eb0b1906ce4693970": {
    "message": "* Add some remarks how to mitigate the risk of DoS attacks by setting\n  proper values for the Timeout and Keepalive parameters.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/misc/security_tips.xml"
      }
    ]
  },
  "b6f1cb216f8a0b8229f2d3616d9f469f3406fdb7": {
    "message": "Take a stab at documenting how we respond to DoS issues.\nPlease review!",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "docs/manual/misc/security_tips.html.en"
      },
      {
        "file": "docs/manual/misc/security_tips.xml"
      }
    ]
  },
  "98964b78f3a25d721ef13bee6242e20a64e80c22": {
    "message": "* Fix ap_http_chunk_filter to create correct chunks in the case that a\n  flush bucket is pre- and postfixed by data buckets in the brigade.\n\nSubmitted by: Ruediger Pluem\nReviewed by: Justin Erenkrantz, Joe Orton, Jim Jagielski",
    "match": "Fix ap_http_chunk_filter to create correct chunks in the case that a\n  flush bucket is pre- and postfixed by data buckets in the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/chunk_filter.c"
      }
    ]
  },
  "a34a19e4b4c9ffc488af26972173633275fe22da": {
    "message": "Bring forward the fix for CVE-2005-3352 already on the branches:\n\n* modules/mappers/mod_imagemap.c (imap_url): Escape the referer.\n\n* server/util.c (ap_escape_html): Escape the \" character.\n\nSubmitted by: mjc\nReviewed by: fielding, jorton",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_imagemap.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "c64a3138344b79106277cefeaf204b84ba5c661e": {
    "message": "fix memory leak. Reported by <christophe.jaillet@wanadoo.fr>",
    "match": "fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "modules/cache/mod_mem_cache.c"
      }
    ]
  },
  "d69e69b5eab99ca5f127adc4ffeb1c115e770488": {
    "message": "* Fix PR37145 (data loss with httpd-2.0.55 reverse proxy method=post) by\n  exchanging APR_BRIGADE_CONCAT with ap_save_brigade to ensure that\n  transient buckets get setaside correctly between various iterations of\n  ap_get_brigade calls.\n\nReviewed by: Joe Orton, William Rowe, Jim Jagielski, Jeff Trawick",
    "match": "Fix PR37145 (data loss with httpd-2.0.55 reverse proxy method=post) by\n  exchanging APR_BRIGADE_CONCAT with ap_save_brigade to ensure that\n  transient buckets get setaside correctly between various iterations of\n  ap_get_brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "450c0c4106ea07a31bf137a0dd552207e4bb75a2": {
    "message": "Today a one-time change happens to all CAN- names as they are\nrenamed to CVE-.  Make this change to our changelog.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "f270ca718a6d80d21a32e6cfde91283507fc0d5b": {
    "message": "NET_TIME, as a standalone feature, was a horrid idea.\n\n  The core filter will NOT operate correctly across platforms \n  (even between Linux/Solaris) without setting up the conn->timeout,\n  so always apply the timeout when establishing the core filter.\n\n  The keep-alive-timeout is entirely an HTTP-ism, and needs to\n  move to the http protocol handler.  Note #1; this isn't triggered\n  in the event mpm, but the event mpm introspects s->keep_alive_timeout\n  directly adding it to the pollset, so this is a non-sequitor.\n\n  Finally, once the headers are read, the named virtual host may\n  have a different (more/less permissive) timeout for the remainder\n  of the request body.  This http-centric patch picks up that subtle\n  detail and can switch to a named-vhost timeout.",
    "match": "remainder\n  of the request body.  This http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/core_filters.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "6a28069cef904802aeb334adce5e210a7379194c": {
    "message": "SECURITY: CAN-2005-2970 (cve.mitre.org)\nworker MPM: Fix a memory leak which can occur after an aborted\nconnection in some limited circumstances.",
    "match": "cve",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/mpm/worker/worker.c"
      }
    ]
  },
  "2f1295e7e0fffa966b31d5b6b09faefc7ee773c0": {
    "message": "* fix some content errors of the TraceEnable description\n* add markup",
    "match": "fix some content errors of the TraceEnable des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.xml"
      }
    ]
  },
  "a344c639929f8f53a47ba5eab157162294c676f3": {
    "message": "Fix CVE CAN-2005-2700:\n\n* modules/ssl/ssl_engine_kernel.c (ssl_hook_Access): Ensure that\nrenegotiation is performed for a transition from \"SSLVerifyClient\noptional\" to \"SSLVerifyClient require\".\n\nThe boolean \"verify_old & SSL_VERIFY_PEER_STRICT\" is true if the old\ncontext merely has optional verification configured, since the\ndefinition of SSL_VERIFY_PEER_STRICT is\n(SSL_VERIFY_FAIL_IF_NO_PEER_CERT | SSL_VERIFY_PEER).",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "ce53fda97d4ee7b928a5c3cae1c1a54fa4016686": {
    "message": "Remove support for the threaded-mpm's on Linux 2.0, and de-autoconf the\ngraceful restart signal. Frees up SIGWINCH for implementing graceful stop.\nSee <20050727114058.GA3390@stdlib.net> and subsequent thread on httpd-dev.",
    "match": "Remove support for the threaded-mpm's on Linux 2.0, and de-autoconf the\ngraceful restart signal. Frees up SIGWINCH for implementing graceful stop.\nSee <20050727114058.GA3390@stdlib.net> and subsequent thread on http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "include/mpm_common.h"
      },
      {
        "file": "server/mpm/config.m4"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "929a32abd3bc4fe48a1c269cde93c851003f9663": {
    "message": "Backport patch from pcre 6.2 to fix integer overflows in quantifier\nparsing:\n\n* srclib/pcre/pcre.c (read_repeat_counts): Check for integer overflow.\n\nObtained from: pcre 6.2 upstream",
    "match": "patch from pcre 6.2 to fix integer overflows in quantifier\nparsing:\n\n* srclib/pcre/pcre.c (read_repeat_counts): Check for integer overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "srclib/pcre/pcre.c"
      }
    ]
  },
  "9a9218610c859ec20e1ae443766b5e82c385fd05": {
    "message": "* modules/experimental/mod_filter.c (filter_trace): Fix gcc\n-Wformat-security warning.",
    "match": "Fix gcc\n-Wformat-security warning",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_filter.c"
      }
    ]
  },
  "87ac4362167945022aababe4192f9b5684e3ed66": {
    "message": "Collaborative work: (Thanks, dreid!)\nImplement OID checking for mod_ssl. This code allows for checking of arbitrary client\ncertificate extensions by OID, in a syntax like:\n   SSLRequire \"BaDCA Generated Certificate\" in Oid(\"2.16.840.1.113730.1.13\") \\\n          || \"committers\"                   in Oid(\"1.3.6.1.4.1.18060.1\")\nNote the following:\n* A given OID can occur multiple times in one cert, with different values. Therefore\n  the OID function compares the left-hand string against each of the OID values,\n  until a complete match is found. If none patches, the result is FALSE\n* The left hand side can be another expression, so can be a reference to a variable\n  or an file() invocation etc.\n* The OID is also just a reference to a string, or function, or whatever.\n* My manual description is very short. Someone else please help improve the description",
    "match": "patches, the result is FALSE\n* The left hand side can be another expression, so can be a reference to a variable\n  or an file() invocation etc.\n* The OID is also just a reference to a string, or function, or whatever.\n* My manual description is very short. Someone else please help improve the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      },
      {
        "file": "modules/ssl/ssl_expr.h"
      },
      {
        "file": "modules/ssl/ssl_expr_eval.c"
      },
      {
        "file": "modules/ssl/ssl_expr_parse.y"
      },
      {
        "file": "modules/ssl/ssl_expr_scan.l"
      }
    ]
  },
  "9d73dd78674af81afdef04a315fe561f8e7dcacb": {
    "message": "Fix broken while () {} loops (lingering code from the old logic),\n  closes an infinite loop in the most recent version.  Init the cl_val\n  to prevent failure of zero length bodies in the most recent version.\n\n  Use 'request body' instead of 'data' to describe any errors.\n\n  Finally, loop around ap_get_brigade to grab multiple chunks that still\n  fall below our MAX_MEM_SPOOL threshold, since the chunk decoding from\n  the client will pass up just one small chunk per ap_get_brigade call.",
    "match": "Fix broken while () {} loops (lingering code from the old logic),\n  closes an infinite loop in the most recent version.  Init the cl_val\n  to prevent failure of zero length bodies in the most recent version.\n\n  Use 'request body' instead of 'data' to des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "01fce1eded3d0e78951125b4f26ff9e337907543": {
    "message": "proxy HTTP: If a response contains both Transfer-Encoding and a\nContent-Length, remove the Content-Length and don't reuse the\nconnection, stopping some HTTP Request smuggling attacks.",
    "match": "remove the Content-Length and don't reuse the\nconnection, stopping some HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy_http.c"
      }
    ]
  },
  "f72c6a1dd509f56793eba025ba764fab52943824": {
    "message": "mod_cgid: Fix buffer overflow processing ScriptSock directive.\n\nSubmitted by:        Steve Kemp <steve steve.org.uk>\nReviewed/tweaked by: trawick",
    "match": "Fix buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      }
    ]
  },
  "552edee8fc808b300a7100c553f7b72aa85cba69": {
    "message": "If a request contains both a T-E and C-L, remove the C-L, stopping some HTTP Request Smuggling attacks exploited when using HTTPD as a forward or reverse proxy.",
    "match": "remove the C-L, stopping some HTTP Request Smuggling attacks exploited when using HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "74fdbcbc547b23de748d3b7211d3ee77ce9c323c": {
    "message": "Sanitize the installed config_vars.mk to remove references to the\nbuild and source directories, and to remove variables which are\ninternal to the httpd build system:\n\n* build/config_vars.sh.in: New file.\n\n* Makefile.in (build/config_vars.out): New target.\n(install-build): Install build/config_vars.out as config_vars.mk.\n\n* configure.in: Add include path for srclib/pcre to INCLUDES rather\nthan CPPFLAGS, and use a topdir-relative not absolute path name.\nGenerate build/config_vars.sh.\n\nReviewed by: Paul Querna\nPR: 20874, 28145",
    "match": "remove references to the\nbuild and source directories, and to remove variables which are\ninternal to the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Makefile.in"
      },
      {
        "file": "build/config_vars.sh.in"
      },
      {
        "file": "configure.in"
      }
    ]
  },
  "00f5659d3522f7fb0e744627d456079e957bbcda": {
    "message": "Fix some symbols which should -not- be exported, and decorate real_exit_code\n  with ap_ (this symbol must be exported.)  If the others were desired to be\n  public, they should have been ap_xxx decorated.",
    "match": "Fix some symbols which should -not- be exported, and decorate real_exit_code\n  with ap_ (this symbol must be exported.)  If the others were des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/ap_release.h"
      },
      {
        "file": "include/scoreboard.h"
      },
      {
        "file": "server/mpm/winnt/child.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.h"
      },
      {
        "file": "server/mpm/winnt/service.c"
      },
      {
        "file": "server/scoreboard.c"
      }
    ]
  },
  "4a36b68605c7ee02da18618c85491634da54187a": {
    "message": "Fix the directive descriptions",
    "match": "Fix the directive des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/directives.html.en"
      },
      {
        "file": "docs/manual/mod/index.html.en"
      },
      {
        "file": "docs/manual/mod/mod_dumpio.html.en"
      },
      {
        "file": "docs/manual/mod/mod_dumpio.xml"
      },
      {
        "file": "docs/manual/mod/quickreference.html.en"
      }
    ]
  },
  "eeae7b53d88461458fdf17491f95fbc2d375aacc": {
    "message": "fix child process aborts with\n  assertion \"!((queue)->nelts == (queue)->bounds)\" failed\ndue to worker queue overflows. The listener/event thread\nneeds to block when all worker threads are busy.",
    "match": "fix child process aborts with\n  assertion \"!((queue)->nelts == (queue)->bounds)\" failed\ndue to worker queue overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "server/mpm/experimental/event/event.c"
      }
    ]
  },
  "d3708d123a13d844c8377695f37aa1cb228b2003": {
    "message": "Removed the documentation files because they were making the httpd\nsource checkout too large, added a README file pointing to the reference\ncopy of the docs in the PCRE vendor branch",
    "match": "Removed the documentation files because they were making the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "srclib/pcre/doc/README_httpd"
      },
      {
        "file": "srclib/pcre/doc/Tech.Notes"
      },
      {
        "file": "srclib/pcre/doc/html/index.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_compile.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_config.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_copy_named_substring.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_copy_substring.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_exec.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_free_substring.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_free_substring_list.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_fullinfo.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_get_named_substring.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_get_stringnumber.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_get_substring.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_get_substring_list.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_info.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_maketables.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_study.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcre_version.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcreapi.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcrebuild.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcrecallout.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcrecompat.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcregrep.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcrepartial.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcrepattern.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcreperform.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcreposix.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcreprecompile.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcresample.html"
      },
      {
        "file": "srclib/pcre/doc/html/pcretest.html"
      },
      {
        "file": "srclib/pcre/doc/pcre.3"
      },
      {
        "file": "srclib/pcre/doc/pcre.html"
      },
      {
        "file": "srclib/pcre/doc/pcre.txt"
      },
      {
        "file": "srclib/pcre/doc/pcre_compile.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_config.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_copy_named_substring.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_copy_substring.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_exec.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_free_substring.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_free_substring_list.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_fullinfo.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_get_named_substring.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_get_stringnumber.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_get_substring.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_get_substring_list.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_info.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_maketables.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_study.3"
      },
      {
        "file": "srclib/pcre/doc/pcre_version.3"
      },
      {
        "file": "srclib/pcre/doc/pcreapi.3"
      },
      {
        "file": "srclib/pcre/doc/pcrebuild.3"
      },
      {
        "file": "srclib/pcre/doc/pcrecallout.3"
      },
      {
        "file": "srclib/pcre/doc/pcrecompat.3"
      },
      {
        "file": "srclib/pcre/doc/pcregrep.1"
      },
      {
        "file": "srclib/pcre/doc/pcregrep.html"
      },
      {
        "file": "srclib/pcre/doc/pcregrep.txt"
      },
      {
        "file": "srclib/pcre/doc/pcrepartial.3"
      },
      {
        "file": "srclib/pcre/doc/pcrepattern.3"
      },
      {
        "file": "srclib/pcre/doc/pcreperform.3"
      },
      {
        "file": "srclib/pcre/doc/pcreposix.3"
      },
      {
        "file": "srclib/pcre/doc/pcreposix.html"
      },
      {
        "file": "srclib/pcre/doc/pcreposix.txt"
      },
      {
        "file": "srclib/pcre/doc/pcreprecompile.3"
      },
      {
        "file": "srclib/pcre/doc/pcresample.3"
      },
      {
        "file": "srclib/pcre/doc/pcretest.1"
      },
      {
        "file": "srclib/pcre/doc/pcretest.html"
      },
      {
        "file": "srclib/pcre/doc/pcretest.txt"
      },
      {
        "file": "srclib/pcre/doc/perltest.txt"
      },
      {
        "file": "srclib/pcre/doc/pgrep.1"
      },
      {
        "file": "srclib/pcre/doc/pgrep.html"
      },
      {
        "file": "srclib/pcre/doc/pgrep.txt"
      }
    ]
  },
  "d632ab6808549c3cb6b8319e468453c836af60c5": {
    "message": "Eliminate awk autogeneration of the ApacheMonitor's .rc resource\n  source file.\n\n  By adding several macros to ap_release.h:\n\n    - the stringize magic, in leiu of including a ton of cruft,\n    - split subversion and \"-dev\" tokens (with a binary flag)\n    - a _CSV token in the form of m,n,p (not a string)\n\n  we are able to have use a static ApacheMonitor.rc file, which picks\n  up all of the necessary values right from ap_release.h.\n\n  If the group likes this approach, I will percolate it throughout\n  the project, and we will lose the requirement of awk for everything\n  -except- rewriting the installed httpd.conf script (developer builds\n  always get an installed httpd.conf script - it's only 'fixed up' \n  with the correct @@ substitutions if they have awk.)\n\n  This project was chosen because ApacheMonitor.rc already exists in svn.\n\n  Comment please.",
    "match": "rement of awk for everything\n  -except- rewriting the installed httpd.conf script (developer builds\n  always get an installed http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_release.h"
      },
      {
        "file": "support/win32/ApacheMonitor.dsp"
      },
      {
        "file": "support/win32/ApacheMonitor.rc"
      }
    ]
  },
  "cc919db19e2a9c4b4216e9a15baf44f470a05268": {
    "message": "Preparation step to simplify merging to a newer pcre:\n\n* srclib/pcre/ltmain.sh, ltconfig, config.guess, config.sub: Remove\nfiles which are unneeded when pcre is built by the httpd build system.\n\n* srclib/pcre/RunTest: Remove generated file, a leftover from an older\nversion of pcre.",
    "match": "Remove\nfiles which are unneeded when pcre is built by the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "srclib/pcre/RunTest"
      },
      {
        "file": "srclib/pcre/config.guess"
      },
      {
        "file": "srclib/pcre/config.sub"
      },
      {
        "file": "srclib/pcre/ltconfig"
      },
      {
        "file": "srclib/pcre/ltmain.sh"
      }
    ]
  },
  "f2ef1c9ece9deeb8cc22a7e7ab1415374d9283f2": {
    "message": "Fix for memory consumption DoS, CVE CAN-2004-0942:\n\n* server/protocol.c (ap_rgetline_core): Don't trim trailing whitespace\nfrom the buffer here.\n(ap_get_mime_headers_core): Trim trailing whitespace here, after\nreading a complete field including continuation lines.  Also simplify\ncode to remove whitespace between field-name and colon.\n\nReviewed by: Andr\ufffd\ufffd Malo, Bill Stoddard",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "f680d9acd0fbc3ae485cf7bca26efbe157fdd7ed": {
    "message": "Add the check for an upgraded https connection when responding to the state of a connection",
    "match": "Add the check for an upgraded https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/arch/netware/mod_nw_ssl.c"
      }
    ]
  },
  "d140d3c44fe374abb71eea696bc9699ace84b4d1": {
    "message": "This will put some messages in the error log when some people try a lame\nDoS by just opening a socket, and never sending any data.\n\nIvan suggested such a change about a month ago, to match the 1.3 behavoir.\n\nToday I helped OSU's Admins figure out that someone was trying this 'attack'\nagainst their mirror server.  The server status just showed hundreds of\nApache Children stuck in Reading.  This will at least hint to the admins\nwhere the problem is by telling them about it in the error log.\n\nInspired by: Rici Lake, Ivan Ristic <ivanr webkreator.com>",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "e06d33da39a4f1b83a7ded391c6090be087cb688": {
    "message": "OR_ALL is not a good choice. Use more restrictive permissions for the\nmod_filter directives.\n\nOR_OPTIONS for all but FilterTrace, which isn't allowed in htaccess,\nbecause it could DoS the server (see docs).\n\nWe should consider to introduce an allowoverride filters or so.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_filter.c"
      }
    ]
  },
  "b50af20ef4ea659d7c9a53d2cb913fca27a0ce3f": {
    "message": "As the first stage of a simplification of the default config in 2.1 (only!), I'm\ngoing to remove all the html files under httpd-2.1/docs/docroot/ and replace them\nwith an index.html file containing only <html><body><h1>It works!</h1></body></html>\n\nI'm going to do this because:\n\n1. The old welcome page is a constant source of confusion to random web surfers who\nstumble on unconfigured apache installs.\n\n2. New users, when finding on a docroot with dozens of files, are often confused\nabout where to put their own content.\n\n3. The international welcome page is a large source of bug reports from people\nwanting to tweak grammar or provide new translations.\n\n4. This will allow us to simplify the default config by removing the config stuff\nnecessary to handle the typemap.",
    "match": "remove all the html files under http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/docroot/index.html"
      },
      {
        "file": "docs/docroot/index.html.ca"
      },
      {
        "file": "docs/docroot/index.html.cz.iso8859-2"
      },
      {
        "file": "docs/docroot/index.html.de"
      },
      {
        "file": "docs/docroot/index.html.dk"
      },
      {
        "file": "docs/docroot/index.html.ee"
      },
      {
        "file": "docs/docroot/index.html.el"
      },
      {
        "file": "docs/docroot/index.html.en"
      },
      {
        "file": "docs/docroot/index.html.es"
      },
      {
        "file": "docs/docroot/index.html.et"
      },
      {
        "file": "docs/docroot/index.html.fr"
      },
      {
        "file": "docs/docroot/index.html.he.iso8859-8"
      },
      {
        "file": "docs/docroot/index.html.hr.iso8859-2"
      },
      {
        "file": "docs/docroot/index.html.hu"
      },
      {
        "file": "docs/docroot/index.html.it"
      },
      {
        "file": "docs/docroot/index.html.ja.iso2022-jp"
      },
      {
        "file": "docs/docroot/index.html.ko.euc-kr"
      },
      {
        "file": "docs/docroot/index.html.lb.utf8"
      },
      {
        "file": "docs/docroot/index.html.nl"
      },
      {
        "file": "docs/docroot/index.html.nn"
      },
      {
        "file": "docs/docroot/index.html.no"
      },
      {
        "file": "docs/docroot/index.html.po.iso8859-2"
      },
      {
        "file": "docs/docroot/index.html.pt"
      },
      {
        "file": "docs/docroot/index.html.pt-br"
      },
      {
        "file": "docs/docroot/index.html.ru.cp-1251"
      },
      {
        "file": "docs/docroot/index.html.ru.cp866"
      },
      {
        "file": "docs/docroot/index.html.ru.iso-ru"
      },
      {
        "file": "docs/docroot/index.html.ru.koi8-r"
      },
      {
        "file": "docs/docroot/index.html.ru.utf8"
      },
      {
        "file": "docs/docroot/index.html.sv"
      },
      {
        "file": "docs/docroot/index.html.var"
      },
      {
        "file": "docs/docroot/index.html.zh-cn.gb2312"
      },
      {
        "file": "docs/docroot/index.html.zh-tw.big5"
      }
    ]
  },
  "e29f8e261960e178d08c4e0a2f82058c0835e512": {
    "message": "* server/util.c (ap_resolve_env): Rewrite to avoid buffer overflows.\n\nSubmitted by: Andr\ufffd\ufffd Malo\nReviewed by: jorton, mjc",
    "match": "buffer overflow",
    "vulnerabilities": [
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "server/util.c"
      }
    ]
  },
  "3ce4ad969ab940ebef087ed204634ed4cdfb943d": {
    "message": "* modules/ldap/util_ldap.c (util_ldap_post_config): Fix false\npositives from gcc -Wformat-security.\n\n* modules/ldap/util_ldap_cache.c (util_ldap_url_node_display): Add default\nto switch to avoid uninitialised variable warnings.\n\n* modules/ldap/util_ldap_cache_mgr.c (util_ald_create_caches): Fix to\nreturn NULL rather than random chunk from stack on error path.",
    "match": "Fix false\npositives from gcc -Wformat-security.\n\n* modules/ldap/util_ldap_cache.c (util_ldap_url_node_display): Add default\nto switch to avoid uninitialised variable warnings.\n\n* modules/ldap/util_ldap_cache_mgr.c (util_ald_create_caches): Fix to\nreturn NULL rather than random chunk from stack on error",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ldap/util_ldap.c"
      },
      {
        "file": "modules/ldap/util_ldap_cache.c"
      },
      {
        "file": "modules/ldap/util_ldap_cache_mgr.c"
      }
    ]
  },
  "c644777845c02e582ff8e99e0cdb3a8a32b5e654": {
    "message": "Add sockaddr to proxy_conn_rec. Using the workers address\nis unsafe for forward proxy workers, cause unlike reverse\nproxies the forward can have each connection with different\nremote address.",
    "match": "unsafe for forward proxy workers, cause unlike reverse\nproxies the forward can have each connect",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "0058a3feaabe0d6d23bb219ed0df4bc2bfb20381": {
    "message": "CAN to CVE promotions from CVE version 20040901\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "013ffdee3cc944ce0ee80581c4295f390d6c98d8": {
    "message": "tweak error handling when reading the pid file\n\npreviously strtol() would look at unitialized\nstorage, but now the string is terminated where\nthe data read ends\n\ngive user a hint about removing the file if we can't\nread/parse it properly\n\n(somehow I ended up with a truncated httpd.pid on my\nown system, leading to these tweaks)",
    "match": "removing the file if we can't\nread/parse it properly\n\n(somehow I ended up with a truncated http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/log.c"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "cec701bfbec7c771e385cf420276dbb6bff653f6": {
    "message": "Fix the url rewriting, and few minor developement bugs.\n\nSubmitted by: mturk",
    "match": "Fix the url rewriting",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_balancer.c"
      }
    ]
  },
  "ae26418e569c429fa4005a68eb1267eee364c37e": {
    "message": "badly encoded urls could cause a null byte skipping (read buffer overflow).\n(e.g. % as last character).\navoid that.",
    "match": "buffer overflow",
    "vulnerabilities": [
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy.c"
      }
    ]
  },
  "05ef17166d78b425a9cdd7f242f1233314890c3d": {
    "message": "*** Patch for EBCDIC-host and HTTP/0.9 responses only ***\nIn dealing with a HTTP/0.9 response to a proxy request, we have pre-read\ndata that is not an HTTP header. At this point of processing, we don't\nknow yet whether the data is going to be interpreted an binary or not.\n(In fact, we may never find out because HTTP/0.9 lacks the Content-Type\nheaders; only by configuring mod_charset_lite can we control the conversion).\nBut mod_charset_lite will get control only later, so it cannot decide on\nthe conversion of the current buffer full of data.\n=> This is an extreme and rare situation normally.\nSo, for catching the most obvious problem (talking not to a HTTP server\nbut to some other protocol), the best guess here is to treat the buffer\nas \"text/*\" (to make error messages readable).",
    "match": "reme and rare situation normally.\nSo, for catching the most obvious problem (talking not to a HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "3d5263c6dcdf517a9eb5a0ab916e1ad49d354355": {
    "message": "CAN-2004-0493 - memory exhaustion denial of service\n\nReviewed by:\tjerenkrantz",
    "match": " denial of service",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "d8f71ba6b7c20cad59faa66c1a9bc93f947e651f": {
    "message": "* modules/ssl/ssl_engine_kernel.c (ssl_hook_UserCheck): Fix buffer\noverflow in FakeBasicAuth code if client's subject DN exceeds 6K in\nlength (CVE CAN-2004-0488); switch to using apr-util base64 encoder\nfunctions.",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "483a28ba9e076fafdad1baff679bb48d9a8e1e3b": {
    "message": "Fix description of Indexignore argument.\n\nPR: 25870",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_autoindex.html.en"
      },
      {
        "file": "docs/manual/mod/mod_autoindex.xml"
      }
    ]
  },
  "d8163c79fe5741c06e5843cff830b026e8fe3fb7": {
    "message": "*) SECURITY: CAN-2004-0174 (cve.mitre.org)\n     Fix starvation issue on listening sockets where a short-lived\n     connection on a rarely-accessed listening socket will cause a\n     child to hold the accept mutex and block out new connections until\n     another connection arrives on that rarely-accessed listening socket.\n     With Apache 2.x there is no performance concern about enabling the\n     logic for platforms which don't need it, so it is enabled everywhere\n     except for Win32.  [Jeff Trawick]\n\n(already in 2.0.49, propagating to mirrors now)",
    "match": "cve",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "include/ap_config.h"
      },
      {
        "file": "os/unix/unixd.c"
      },
      {
        "file": "server/listen.c"
      },
      {
        "file": "server/mpm/netware/mpm_netware.c"
      }
    ]
  },
  "38888c0982c91e00513de83113b6464ebf5aa744": {
    "message": "Win32: Taking down the child process on accept errors opens the possibility of a DoS attack.",
    "match": " DoS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/child.c"
      }
    ]
  },
  "67089b080a8ed5467665fb8e5bd8627dc3f5df02": {
    "message": "fix the name of the failing API call in a log message",
    "match": "fix the name of the failing API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/mpm/prefork/prefork.c"
      }
    ]
  },
  "3cdc793b2c4cac02dc8a8e7af1c4f546b7e05c8f": {
    "message": "Fix memory leak in handling of request bodies during reverse\nproxy operations.\n\nPR:      24991\nSubmitted by: Larry Toppi <larry.toppi citrix.com>\nReviewed by:  Jeff Trawick",
    "match": "Fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "4a615b31cec2e7e92f1f4324ba63c099881e24c7": {
    "message": "Fix a few typos and change the description a bit.",
    "match": "Fix a few typos and change the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_autoindex.html.en"
      },
      {
        "file": "docs/manual/mod/mod_autoindex.xml"
      }
    ]
  },
  "949596d3dc35f4f5fd723ef0df4455674907c6e8": {
    "message": "darn, the patch for bug 9587 (wrong icon for directories shown) broke\nthe directory descriptions more or less completely. Fix it now.",
    "match": "patch for bug 9587 (wrong icon for directories shown) broke\nthe directory des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_autoindex.c"
      }
    ]
  },
  "821bab7d68325e0628530a504b354aaaba5978a5": {
    "message": "Fix a typo and remove an invalid section about the non-existent mod_ssl\nbugdb. According to Ralf there are no plans to fix it and this doc is\npretty out of date anyways. See also PR#18574.",
    "match": "Fix a typo and remove an invalid section about the non-existent mod_ssl\nbug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/ssl/ssl_faq.html.en"
      },
      {
        "file": "docs/manual/ssl/ssl_faq.xml"
      },
      {
        "file": "docs/manual/vhosts/examples.html.en"
      },
      {
        "file": "docs/manual/vhosts/examples.xml"
      }
    ]
  },
  "b7d2bbd8941cdb6f0a70aef00c011530c96d5057": {
    "message": "fix misleading ap_get_token description",
    "match": "fix misleading ap_get_token des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      }
    ]
  },
  "61af7abdab75f0c479c259846cf00178467ee294": {
    "message": "Standardize on example.com names, never bogus your-server.name style\n  entries.  Roy attacked this recently, but apparently there are some\n  holdovers or reversions to this policy.",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd-std.conf.in"
      },
      {
        "file": "docs/conf/ssl-std.conf.in"
      }
    ]
  },
  "c1f1d9b88c4f5fdd7a3d7785347e99c2ec6f24c0": {
    "message": "Fixed a trio of mod include bugs.  The first two were\nreported and investigated by Ron Park on dev@httpd in msgid\n<161E04AB9955D54E826FD86360578554D27087@169.32.17.10.nat.cnet.com>;\nthe third was reported by Kevin Varley in PR 21095.\n\nBug 1:  An incorrect parameter to bndm() was causing start sequences\n        that spanned buckets to drop characters.\nBug 2:  Failed conditional text spanning brigades would cause portions\n        of the text that should have been removed to be present anyway.\nBug 3:  Dropped characters when the end sequence spanned an\n        8000-byte boundary with MMAP off.\n\nPR: 21095\nSubmitted by:\tRon Park <ronald.park@cnet.com>, Andr\ufffd Malo, Cliff Woolley",
    "match": "Fixed a trio of mod include bugs.  The first two were\nreported and investigated by Ron Park on dev@httpd in msgid\n<161E04AB9955D54E826FD86360578554D27087@169.32.17.10.nat.cnet.com>;\nthe third was reported by Kevin Varley in PR 21095.\n\nBug 1:  An incorrect parameter to bndm() was causing start sequences\n        that spanned buckets to drop characters.\nBug 2:  Failed conditional text spanning brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "3e8eb8c75827e283d69fc1bb8c1c9875ae37b385": {
    "message": "Speed up ap_md5digest() a little.\n\n* util_md5.c (ap_md5digest): Use a larger buffer; ensure size is a\nmultiple of 64 to prevent buffering in MD5 code.  Remove redundant\n'length' variable.  Reset read size in case of short reads.",
    "match": "prevent buffering in MD5",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/util_md5.c"
      }
    ]
  },
  "532a5ff3f23462bebe50a32b04a59e399b5c907f": {
    "message": "When the top-level directory section for / was added for the sake\nof performance and to allow automount symlinks to be followed, we\nmistakenly opened access to the entire directory system by default.\nI noticed this because all of the /~user directories are available\nby default without any restrictions, which is a bad idea for anything\nother than one server within a department of shared users.  However,\nit also makes it easier to serve files anywhere on disk by mistake,\nand makes other URI-handling bugs more severe than they would be\notherwise.  Therefore, this patch reinstates access control to deny\naccess to all files other than under DocumentRoot, icons, and manual,\nuntil additional directory/locations are explicitly allowed by the admin.",
    "match": "section for / was added for the sake\nof performance and to allow automount symlinks to be followed, we\nmistakenly opened access to the entire directory system by default.\nI noticed this because all of the /~user directories are available\nby default without any restrictions, which is a bad idea for anything\nother than one server within a department of shared users.  However,\nit also makes it easier to serve files anywhere on disk by mistake,\nand makes other URI-handling bugs more severe than they would be\notherwise.  Therefore, this patch",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd-std.conf.in"
      },
      {
        "file": "docs/conf/httpd-win.conf"
      }
    ]
  },
  "cd2c6d3a25ad8712c10d0b845010cccffca0f596": {
    "message": "Forward port patch for CAN-2003-0192 from 2.0.\n\nSECURITY [CAN-2003-0192]: Fixed a bug whereby certain sequences\nof per-directory renegotiations and the SSLCipherSuite directive\nbeing used to upgrade from a weak ciphersuite to a strong one\ncould result in the weak ciphersuite being used in place of the\nstrong one.  [Ben Laurie]",
    "match": "patch for CAN-2003-0192 from 2.0.\n\nSECURITY [CAN-2003-0192]: Fixed a bug whereby certain sequences\nof per-directory renegotiations and the SSLCipherSuite directive\nbeing used to upgrade from a weak ciphersuite to a strong one\ncould result in the weak",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "9bc02aba1972e6a7b2e691008cdac6618ef2f516": {
    "message": "Forward port patch for CAN-2003-0253 from 2.0.\n\nSECURITY [CAN-2003-0253]: Fixed a bug in prefork MPM causing\ntemporary denial of service when accept() on a rarely accessed port\nreturns certain errors.  Reported by Saheed Akhtar\n<S.Akhtar@talis.com>.  [Jeff Trawick]",
    "match": " denial of service",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      }
    ]
  },
  "46e359cd54f16e830ea9c8830eaa4773f420f5dc": {
    "message": "Forward port security patch for CAN-2003-0254 from 2.0.\n\nSECURITY [CAN-2003-0254]: Fixed a bug in ftp proxy causing denial\nof service when target host is IPv6 but proxy server can't create\nIPv6 socket.  Fixed by the reporter.  [Yoshioka Tsuneo\n<tsuneo.yoshioka@f-secure.com>]",
    "match": " denial\nof service",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/proxy_ftp.c"
      }
    ]
  },
  "a14d9f8551e18c1f4c995caa4b33b7ef6a320e82": {
    "message": "Fix some really nasty markup in mod_ssl (well, just a work-around\nreally; the <pre> needs to be removed).\n\nAdd a missing faq section to the sitemap (my fault)\n\nAdd a columnspec to the quickreference.",
    "match": "Fix some really nasty markup in mod_ssl (well, just a work-around\nreally; the <pre> needs to be removed).\n\nAdd a missing faq section to the sitemap (my fault",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_ssl.xml"
      },
      {
        "file": "docs/manual/mod/quickreference.xml"
      },
      {
        "file": "docs/manual/sitemap.xml"
      }
    ]
  },
  "ec76efbcd670dea0e1707127b24ee54c857a1357": {
    "message": "core_output_filter: don't split the brigade after a FLUSH bucket if it's the\nlast bucket.  This prevents creating unneccessary empty brigades which may\nnot be destroyed until the end of a keepalive connection.\n\nSubmitted by:\tJuan Rivera <Juan.Rivera@NO_SPAM.citrix.com>",
    "match": "prevents creating unneccessary empty brigades which may\nnot be des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "1f37c225b6da3b4207995f52dbc3e5ae07794188": {
    "message": "Be more consistant in how we label security issues\nPromote the issues that have been allocated a full CVE name (to replace CAN)\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "6f5204f2a595a01d41abd6560a7a0604e1929631": {
    "message": "Forward port a fix for a pair of potential buffer overflows in htdigest from 1.3",
    "match": "fix for a pair of potential buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "1468576afb79d537d53d69e695f90c1c5c514c47": {
    "message": "Some serious updates to the top section of the mod_dav docs.  Many of the ideas\nare stolen from Greg's mod_dav site.  Some specifics:\n\n- Change recommendations about where to place the dav lockfile and be specific\nabout required permissions.\n\n- Remote the HEAD from the <Limit> block, since it is implied by GET.\n\n- Add a security section discussing file permissions, auth issues, denial of\nservice, etc.\n\n- Add a \"complex config\" section discussing the dynamic content issue.\n\nReview requested.  Unfortunately, I can't check in the html because of\ntransformation problems in my setup.",
    "match": " denial of\nservice",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_dav.xml"
      }
    ]
  },
  "5f32e9664168af3f6e4e10ddcbd7c1e3c4efde59": {
    "message": "Clarify some wording.\n\n\tNote this change (as previously written, it implied that 1.3.5\n\thad this vulnerability, which is not true). I'm not sure if\n\t\"httpd 2.0\" is the preferred name.\n\n-    <p>Note that in versions previous to 2.0.46 no escaping has been performed\n+    <p>Note that in httpd 2.0 versions prior to 2.0.46, no escaping was performed\n     on the strings from <code>%...r</code>, <code>%...i</code> and\n     <code>%...o</code>. This was mainly to comply with the requirements of\n     the Common Log Format. This implied that clients could insert control\n     characters into the log, so you had to be quite careful when dealing\n     with raw log files.</p>\n\n-    <p>For security reasons starting with 2.0.46 non-printable and\n+    <p>For security reasons, starting with 2.0.46, non-printable and\n     other special characters are escaped mostly by using\n     <code>\\x<var>hh</var></code> sequences, where <var>hh</var> stands for\n     the hexadecimal representation of the raw byte. Exceptions from this\n     rule are <code>\"</code> and <code>\\</code> which are escaped by prepending\n-    a backslash, and all whitespace characters that are written in their\n-    C-notation (<code>\\n</code>, <code>\\t</code> etc).</p>\n+    a backslash, and all whitespace characters which are written in their\n+    C-style notation (<code>\\n</code>, <code>\\t</code> etc).</p>",
    "match": "vulnerability, which is not true). I'm not sure if\n\t\"httpd 2.0\" is the preferred name.\n\n-    <p>Note that in versions previous to 2.0.46 no escaping has been performed\n+    <p>Note that in httpd 2.0 version",
    "vulnerabilities": [
      "Using Components with Known Vulnerabilities",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_log_config.xml"
      }
    ]
  },
  "d5a6dc2cc23a0e0623f3aebc562d83218f5de70a": {
    "message": "uh, oh. Fix possible 1-byte buffer overflow.",
    "match": "Fix possible 1-byte buffer overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      }
    ]
  },
  "50c613cd3e1ef551ae81c2b90925488ba2a3ad5d": {
    "message": "Fixed example description to solve PR#17006.",
    "match": "Fixed example des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/misc/rewriteguide.html.en"
      },
      {
        "file": "docs/manual/misc/rewriteguide.xml"
      }
    ]
  },
  "c033b90993e312f6dd470d214dd191950932770c": {
    "message": "Statements about the authorship of mod_ssl being in Germany are no longer\ntrue.  And besides, the links are broken.\n\nPR: 15627",
    "match": "authorship of mod_ssl being in Germany are no longer\ntrue.  And besides, the links are brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "docs/manual/ssl/ssl_faq.html.en"
      },
      {
        "file": "docs/manual/ssl/ssl_faq.xml"
      }
    ]
  },
  "a4a0b0f31ff78b1a4046254ca295658f70d2dad6": {
    "message": "- mpm_common:\n  * fixed the <modulelist>s in mpm_common\n  * moved AcceptMutex to mpm_common;\n    document the mutex mechanism \"posixsem\"\n  * added BS2000Account to mpm_common\n    (I'm not sure, whether it should appear here or elsewhere. It *seems*\n    to be supported only by prefork and perchild (if perchild would work)).\n    The description is obtained from the 1.3 docs.\n  * fixed several default values\n  * moved MaxThreadsPerChild and NumServers out to perchild\n    (btw: we could consider to rename NumServers to StartServers...)\n  * rearranged some stuff and added several comments, that I found useful\n    ;-)\n- mpm_netware:\n  * MaxThreads 2048 (as maximum and default)\n- perchild:\n  * extended the explanations about using different user ids. Hope, that's\n    correct.\n  * extended and adjusted the directive descriptions\n    (remember, NumServers and MaxThreadsPerChild moved in)\n- prefork:\n  * moved AcceptMutex to mpm_common (as stated already above)\n- mpm_winnt:\n  * added reference to ScoreBoardFile\n- worker:\n  * added reference to AcceptMutex\n- general: markup & formatting",
    "match": "fixed the <modulelist>s in mpm_common\n  * moved AcceptMutex to mpm_common;\n    document the mutex mechanism \"posixsem\"\n  * added BS2000Account to mpm_common\n    (I'm not sure, whether it should appear here or elsewhere. It *seems*\n    to be supported only by prefork and perchild (if perchild would work)).\n    The description is obtained from the 1.3 docs.\n  * fixed several default values\n  * moved MaxThreadsPerChild and NumServers out to perchild\n    (btw: we could consider to rename NumServers to StartServers...)\n  * rearranged some stuff and added several comments, that I found useful\n    ;-)\n- mpm_netware:\n  * MaxThreads 2048 (as maximum and default)\n- perchild:\n  * extended the explanations about using different user ids. Hope, that's\n    correct.\n  * extended and adjusted the directive des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mpm_common.xml"
      },
      {
        "file": "docs/manual/mod/mpm_netware.xml"
      },
      {
        "file": "docs/manual/mod/mpm_winnt.xml"
      },
      {
        "file": "docs/manual/mod/perchild.xml"
      },
      {
        "file": "docs/manual/mod/prefork.xml"
      },
      {
        "file": "docs/manual/mod/worker.xml"
      }
    ]
  },
  "fe8d30929d6ec20a56bbd86ecd83a4299bc71afa": {
    "message": "Set the appropriate mime response headers for negotated type-map\n  Body: responses.\n\n  wrowe's review;\n    My earlier concern doesn't apply.  Type maps have always required the\n    author to be explicit in all header fields to be negotiated; if the\n    headers aren't given in the type map file the resulting redirect\n    (for non-body maps) is broken anyways.  As to my other concern, the\n    charset should only exist if the Content-Type was given.\n\nSubmitted by: Andr\ufffd Malo <nd@perlig.de>",
    "match": "author to be explicit in all header fields to be negotiated; if the\n    headers aren't given in the type map file the resulting redirect\n    (for non-body maps) is brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_negotiation.c"
      }
    ]
  },
  "76e9075d45e62a7cf5bd7c0b794063dc0fe9183b": {
    "message": "more formal changes:\n- moved path_info section below the \"enabling\" section\n- dropped \"Using Server Side Includes for ErrorDocuments\" section and added\n  a simple seealso instead. I don't see, that we need a separate section to\n  set a link.\n- created an own subsection for every SSI element and put an overview table\n  on top of it, this resolves also the mozilla problem with nested <dl>s,\n  that was still present (sometimes)\n- fixed some typos\n- markup.\n\ncontent changes:\n- added a note about the behaviour of fsize/flastmod virtual\n- removed apache 1.2 compatibility notes (this is a 2.x documentation)\n- added a compat note in the module overview table\n- added description for QUERY_STRING_UNESCAPED\n- splitted flow control descriptions (=, != vs. <, <=, >, >=; the former\n  allow regexps, the latter don't)\n- added a sentence and an example about regexp capturing\n- mentioned the literal comparison (vs. numerical)\n- includesNOEXEC allows only text/* ressources to be included.\n  mentioned that.",
    "match": "fixed some typos\n- markup.\n\ncontent changes:\n- added a note about the behaviour of fsize/flastmod virtual\n- removed apache 1.2 compatibility notes (this is a 2.x documentation)\n- added a compat note in the module overview table\n- added description for QUERY_STRING_UNESCAPED\n- splitted flow control des",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_include.xml"
      }
    ]
  },
  "899ffeb57a6a972b72450d1c7657ed541d8d763f": {
    "message": "Fix a memory leak in mod_deflate with dynamic content.  Because the\nbrigade was being destroyed (ie, cleanup unregistered) rather than just\nemptied out and then reused anyway, the last call down the filter stack\nwould leak buckets.\n\nPR: 14321\nSubmitted by:\tKen Franken <kfranken@decisionmark.com>\nReviewed by:\tJeff Trawick, Cliff Woolley",
    "match": "Fix a memory leak in mod_deflate with dynamic content.  Because the\nbrigade was being des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "77600812c530e7041ee8378e13951f8f2ad96f9b": {
    "message": "Remove the nroff httpd man page and put in an xml one in the manual.\nAt the same time, update with some new args.  More review of\nthis would be good.\n\nReviewed by: Astrid Kessler, Erik Abele, Andr\ufffd Malo, Rich Bowen",
    "match": "Remove the nroff http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/man/httpd.8"
      },
      {
        "file": "docs/manual/programs/httpd.html"
      },
      {
        "file": "docs/manual/programs/httpd.html.en"
      },
      {
        "file": "docs/manual/programs/httpd.xml"
      }
    ]
  },
  "748c60dae4bb903dc605963fd38d27adb5abc252": {
    "message": "prevent seg faults when running with Electric Fence.\n\nThe \"more\" brigade (created by apr_brigade_split after seeing a FLUSH bucket)\nwas in the deferred_write_pool.  d_w_p is cleared, \"more\" is copied into b,\nthen the while loop test for APR_BRIGADE_EMPTY(b) blows up.",
    "match": "prevent seg faults when running with Electric Fence.\n\nThe \"more\" brigade (created by apr_brigade_split after seeing a FLUSH bucket)\nwas in the deferred_write_pool.  d_w_p is cleared, \"more\" is copied into b,\nthen the while loop test for APR_BRIG",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "dbce4ab3d3ba21d106abebf4c177930ea829c6b4": {
    "message": "mod_isapi: Fix an issue where HSE_REQ_DONE_WITH_SESSION notification\n  is received before the HttpExtensionProc() returns HSE_STATUS_PENDING.\n  [John DeSetto <jdesetto@radiantsystems.com>, William Rowe]\n\nPR: 11918",
    "match": "Fix an issue where HSE_REQ_DONE_WITH_SESSION notification\n  is received before the HttpExtensionProc() returns HSE_STATUS_PENDING.\n  [John DeS",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/arch/win32/mod_isapi.c"
      }
    ]
  },
  "e0d3acab6037f1bea3526946e060aa381dec4ee7": {
    "message": "formal:\n- <em> -> <var>\n- markup changes\n- some whitespace reformatting\n\ncontent:\n- fix directive contexts\n- clarify the flag directives and add default values\n- add short description for CacheDefaultExpire",
    "match": "fix directive contexts\n- clarify the flag directives and add default values\n- add short des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_cache.xml"
      }
    ]
  },
  "95b2e3783820974f7eaca442296a408052b3f396": {
    "message": "Merge the last of the 'filtering' functions into ssl_engine_io.c, merge\n  ssl_abort into what was ssl_hook_CloseConnection, clean out a bunch of\n  now-static or private headers from mod_ssl.h, and final fix a very small\n  but potent segfault if ->pssl is destroyed within our read loop.",
    "match": "fix a very small\n  but potent segfault if ->pssl is des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/mod_ssl.c"
      },
      {
        "file": "modules/ssl/mod_ssl.h"
      },
      {
        "file": "modules/ssl/ssl_engine_io.c"
      },
      {
        "file": "modules/ssl/ssl_engine_kernel.c"
      }
    ]
  },
  "605172ce7746c8b3e8d61006a6060a48f9c178d8": {
    "message": "SSIUndefinedEcho never defaulted to <!-- undef -->\n\nbtw: could someone fix the directive description in\n     mod_include.c:3522? ;-)",
    "match": "fix the directive des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_include.html.en"
      },
      {
        "file": "docs/manual/mod/mod_include.xml"
      },
      {
        "file": "docs/manual/mod/quickreference.html.en"
      }
    ]
  },
  "494c39d038c77f19d0f01ff442a6d4b9afa06a65": {
    "message": "Suggestions by Justin, implemention by Will.  Rename away all bogisity,\n  especially eliminating all of 'our' capitalized identifiers that were\n  easily confused with library symbols; go with APR_STATUS_IS_EOF() just\n  in case there is a platform result; fix a bogus *len = 0; reassignment\n  and fold the two flavors of input context tracking into one.",
    "match": "apitalized identifiers that were\n  easily confused with library symbols; go with APR_STATUS_IS_EOF() just\n  in case there is a platform result; fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/ssl_engine_io.c"
      }
    ]
  },
  "b1375767dda30f7b2d932436228a985f33af8e3d": {
    "message": "Fix memory leak in mod_ssl from internal SSL library allocations\n  within SSL_get_peer_certificate and X509_get_pubkey.\n\nSubmitted by:\tZvi Har'El <rl@math.technion.ac.il>\nReviewed by:\tMadhusudan Mathihalli <madhusudan_mathihalli@hp.com>",
    "match": "Fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/ssl/ssl_engine_init.c"
      }
    ]
  },
  "0e21e1ef5b97dd5c77cb0bf507ac9945506fd9d6": {
    "message": "Code a bit more defensively. If dav_lookup_uri() ever placed user\ninput into lookup.err.desc for the HTTP_BAD_REQUEST case, then we\ncould have problems (via a format string attack). This change frees us\nfrom *future* worries.",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/dav/main/mod_dav.c"
      }
    ]
  },
  "62f9304b0253fec959b9064a4fbbde29a86ec184": {
    "message": "This is worthy of a CVE name, thanks to Joe for the headsup and text\nPR:\nObtained from: Joe Orton\nSubmitted by:\nReviewed by:",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "deaeb1407a553fcfe9a0c8158cad8a780c52139d": {
    "message": "*) SECURITY: [CAN-2002-0840] HTML-escape the address produced by\n     ap_server_signature() against this cross-site scripting\n     vulnerability exposed by the directive 'UseCanonicalName Off'.\n     Also HTML-escape the SERVER_NAME environment variable for CGI\n     and SSI requests.  It's safe to escape as only the '<', '>',\n     and '&' characters are affected, which won't appear in a valid\n     hostname.  Reported by Matthew Murphy <mattmurphy@kc.rr.com>.\n     [Brian Pane]",
    "match": "vulnerab",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/util_script.c"
      }
    ]
  },
  "158c2fe4c47fd856eca8363a019079f8a0ecf082": {
    "message": "Removed an extra apr_atomic_init() call from the mem_cache\npost-config code (the APR init takes care of this at httpd\nstartup)",
    "match": "Removed an extra apr_atomic_init() call from the mem_cache\npost-config code (the APR init takes care of this at http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_mem_cache.c"
      }
    ]
  },
  "fb8aecd2cd42b428861f0528449fba9c8e9f8430": {
    "message": "Fix broken link to rewritemap in rewritelock description\nof the quickreference.\nRelative anchors to directives may only be set, if we're\nactually transforming the particular <modulesynopsis> document.",
    "match": "Fix broken link to rewritemap in rewritelock des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/quickreference.html.en"
      },
      {
        "file": "docs/manual/style/xsl/common.xsl"
      }
    ]
  },
  "7414c5b2dfc35725b4abc6084f885d60e8985855": {
    "message": "- fix examples: turn example.isp.com to domain.example.com\n  (isp.com is really a bad choice, YMMV)\n- add \"none\" to syntax descriptions and fix defaults\n- fix several <directive>s\n- add infos the descriptions of *IP directives\n  (redundant, but to reach more clearness)\n- add section ids\n- fix some typos",
    "match": "fix examples: turn example.isp.com to domain.example.com\n  (isp.com is really a bad choice, YMMV)\n- add \"none\" to syntax descriptions and fix defaults\n- fix several <directive>s\n- add infos the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_vhost_alias.html.en"
      },
      {
        "file": "docs/manual/mod/mod_vhost_alias.xml"
      }
    ]
  },
  "091ee616587a877e246ade41ce1698cda44599e4": {
    "message": "Fix memory leak in core_output_filter.\n\nThis would result in at least two EOS buckets being leaked per connection.",
    "match": "Fix memory leak in core_output_filter.\n\nThis would result in at least two EOS buckets being leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "e6cb949501003c112cfcec7c60b0ce3fa0e79d96": {
    "message": "Eliminated some fixed-size buffers that didn't have proper overflow checks",
    "match": "fixed-size buffers that didn't have proper overflow",
    "vulnerabilities": [
      "Overflow",
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "support/ab.c"
      }
    ]
  },
  "fe995aa9af037bb29cb8e36ffebc20b81360fa1d": {
    "message": "This was never a 'vulnerability'... the APR_FILEPATH_SECUREROOT flag\n  passed to apr_filepath_merge refused to merge any rooted 'addpath'.\n  However, that isn't the traditional 1.3 behavior, so fly past any\n  leading '/'s on the way to merging the uri to the DocumentRoot.\n\nPR: 10946",
    "match": "vulnerab",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "619f5747ec818aee6666d1837fd8d36f80c0d826": {
    "message": "Fix the PATH exposure security problem I thought I fixed in 2.0.36.",
    "match": "Fix the PATH exposure security problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/http_log.h"
      }
    ]
  },
  "0e9bda7c9d578820b0c32cd1080a9b25b6fab85e": {
    "message": "Add in missing CVE name; make SECURITY entries more consistant\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "93628c19b1462150ee6d199c3597f2d5ebe703cc": {
    "message": "Solve C-L post body reads from the HTTP_IN by ap_get_brigade() so that\n  we know -immediately- that we've read the last of the data.  This patch\n  adds an EOS bucket to the brigade if ctx->remaining has been consumed.\n\nReviewed by:\tJustin Erenkrantz",
    "match": "patch\n  adds an EOS bucket to the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "f5ed88a7b2057d7264c7ee549f0d7fc5d02e35d2": {
    "message": "Fix the long-standing bug that \"ab -t10\" would loop for 10000 seconds\ninstead of 10 as documented. Also fix an off-by-one-second error, which\ndid not matter much (in comparison to the 1000x error ;-)",
    "match": "Fix the long-standing bug that \"ab -t10\" would loop for 10000 seconds\ninstead of 10 as documented. Also fix an off-by-one-second error, which\ndid not matter much (in comparison to the 1000x error",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "support/ab.c"
      }
    ]
  },
  "c59fa8d9fd1c290dd14bfafdb89f97dec62dd9d3": {
    "message": "Fix C-L filter non-blocking-mode brokenness.  It was failing to ever\nread from pipe/socket buckets again if it got APR_EAGAIN from them\ndue to its use of APR_BRIGADE_FOREACH.\n\nSubmitted by: the gang on IRC",
    "match": "Fix C-L filter non-blocking-mode brokenness.  It was failing to ever\nread from pipe/socket buckets again if it got APR_EAGAIN from them\ndue to its use of APR_BRIG",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "383424016d59f51e9ddb0b74fb396af1fbe77682": {
    "message": "- Fix segfault in core_output_filter when we are passed an empty brigade.\n- Stash the remainder of the brigade in more when we see a flush bucket.\n  Previous to this commit, we would only process the buckets before the\n  flush on a HTTP/1.0 request and then return.\n\nWe are proably only finding this now since we now correctly check for\nkeepalive connection status.",
    "match": "remainder of the brigade in more when we see a flush bucket.\n  Previous to this commit, we would only process the buckets before the\n  flush on a HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "d2e992c473f64ca077f420b27930a1f081f8a6b2": {
    "message": "Rewrite ap_get_client_block to rely on assumptions that have been\nsolidified after this code was originally written.  Namely:\n\n- AP_MODE_READBYTES will only return a brigade representing AT MOST bytes\n  of data.  It can NOT return MORE than requested.\n- APR_BLOCK_READ is respected - it is considered a design error of a filter\n  if it returns without reading something.\n- apr_brigade_flatten is available to do the heavy lifting of the copying\n  into a flat buffer (as hinted at by the removed comment).\n\nTested with httpd-test.",
    "match": "removed comment).\n\nTested with http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "799874ed3691e1739b23ecd8455fa2ce045bcb13": {
    "message": "An important observations before some x86'er attacks this idea.",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_deflate.c"
      }
    ]
  },
  "1b95832a0c6bde726cb25add9e05d157c071d093": {
    "message": "add 2 new enviornment variables to deal with misbehaving backends\n\"proxy-nokeepalive\" which removes the Connection: line completely\n\"force-proxy-request-1.0\" which forces the request to be HTTP/1.0\nthis allows apache to reverse proxy misbehaving appservers",
    "match": "removes the Connection: line completely\n\"force-proxy-request-1.0\" which forces the request to be HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "fcfce9d92367eb6031b9a0212625c2c757c46290": {
    "message": "Fix the case where if there is no ErrorDocument specified for an error,\nthe error would be sent to the client *twice* because both the filter\nand the core would trigger error responses.\n\nThe problem is that the filters have already handled some errors (say 413)\nand due to the ap_get_client_block API, the error was morphed into 400.\nTherefore, ap_discard_request_body must use brigades directly rather than\nthe ap_get_client_block API so that any potential errors are not dropped.\n\nThe special value AP_FILTER_ERROR indicates that the lower level has\nalready dealt with this problem (ap_die() will realize this).  Otherwise,\nwe'll error with HTTP_BAD_REQUEST and ap_die() will take it from there.\n\nThis also prevents needless memory copies when we are just going to\ndiscard it anyway.\n\nThanks to Cliff Woolley who found this wacky problem.",
    "match": "Fix the case where if there is no ErrorDocument specified for an error,\nthe error would be sent to the client *twice* because both the filter\nand the core would trigger error responses.\n\nThe problem is that the filters have already handled some errors (say 413)\nand due to the ap_get_client_block API, the error was morphed into 400.\nTherefore, ap_discard_request_body must use brigades directly rather than\nthe ap_get_client_block API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "f7744d68b8e21b6a186c7576a3ee1f8862efeb8a": {
    "message": "- Fix case where the initial chunk length was 0 was not handled correctly.\n- Fix bucket lifetimes so that they don't live longer than their brigades.\n  That's not nice.\n- Simplify some usage of f->r->connection to f->c in the bucket creation\n  calls.",
    "match": "Fix case where the initial chunk length was 0 was not handled correctly.\n- Fix bucket lifetimes so that they don't live longer than their brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "77133b88ec95670c7ad0bb2a9bcc50bbf9af65f5": {
    "message": "As the prior commit message indicated, pass the accept thread a listen\n  rec as opposed to simply the listen socket.\n\n  However, the prior commit (which I crossed up with this patch) really\n  closed a segfault where we attempted to log messages to ap_server_conf,\n  after the server conf was destroyed, and prior to setting the new\n  value in the next go-around of post_config.",
    "match": "patch) really\n  closed a segfault where we attempted to log messages to ap_server_conf,\n  after the server conf was des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      }
    ]
  },
  "30ab960e20117ee6002a3297791427023440e0a7": {
    "message": "Now for the major refactoring.  Introduce mod_isapi.h, as we have had\n  untold problems with compatibility between different Visual Studio and\n  PlatformSDK users [based on their generation of the MS ISAPI header.]\n  This header is coded from scratch in native APR types.\n\n  Replace the apr_array_t with an apr_hash_t, mutex protected, to allow us\n  to preload and late-load isapi modules.  This closes a significant bug\n  with trafficed sites using uncached isapi modules, where one would be\n  closing the module just as another request is opening it [as if for the\n  first time.]  This would cause some ISAPI modules to crash.  Now that\n  we load modules for the lifetime of the server, a simple graceful restart\n  is all that's required to unload all the non-precached modules.\n\n  Crack out all FAKE_ASYNC code while we complete it.  Total support for\n  the Completion Context callback and end-of-request termination is required\n  before we can toggle this on.\n\n  My next commit; complete fake async support.  But this was all I'd had\n  in me for one night.",
    "match": "api.h, as we have had\n  untold problems with compatibility between different Visual Studio and\n  PlatformSDK users [based on their generation of the MS ISAPI header.]\n  This header is coded from scratch in native APR types.\n\n  Replace the apr_array_t with an apr_hash_t, mutex protect",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/arch/win32/mod_isapi.c"
      },
      {
        "file": "modules/arch/win32/mod_isapi.dsp"
      },
      {
        "file": "modules/arch/win32/mod_isapi.h"
      }
    ]
  },
  "72fb0585b019645ba249feb1cbd331aae96f5250": {
    "message": "Protect us from this dirty hack that gets SysV Sem working again\non mod_rewrite. This, along with the original usage of a unix-only\nfunction in mod_rewrite, is a temporary stopgap measure designed only\nto workaround limitations in APR's handling of permission attributes.\nIt shall be removed as soon as that interface is improved.",
    "match": "Protect us from this dirty hack that gets SysV Sem working again\non mod_rewrite. This, along with the original usage of a unix-only\nfunction in mod_rewrite, is a temporary stopgap measure des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      }
    ]
  },
  "6d04eed40982ae64cbab037b007aafcae244a243": {
    "message": "Protect from buffer overflow when populating a HEAP based cache object.",
    "match": "buffer overflow",
    "vulnerabilities": [
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_mem_cache.c"
      }
    ]
  },
  "9e23c1b493ee469879aa45dab96f9d034c5807f4": {
    "message": "Fix the link to the description of the CoredumpDirectory\ndirective in the server-wide document.\n\nPR:          8643",
    "match": "Fix the link to the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "docs/manual/server-wide.html.en"
      },
      {
        "file": "docs/manual/server-wide.html.ja.jis"
      }
    ]
  },
  "a060efabfe10a2f53e1d5e96a07c60f98433941b": {
    "message": "Major improvement in concurrent processing for AB:\n- Enable non-blocking connects.\n- Prevent quasi-blocking mode apr_recv (which would prevent AB from\n  multiplexing over the entire descriptor set).\n- Catch other fatal apr_recv() errors.\n\n[This patch is slightly different than the one posted to the dev list,\nbut regardless thanks to the many people who reviewed this.]",
    "match": "Prevent quasi-blocking mode apr_recv (which would prevent AB from\n  multiplexing over the entire des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "support/ab.c"
      }
    ]
  },
  "27ae584197c72e0c8f1130abbf1b1c937734c08f": {
    "message": "ap_send_error_response: reset r->output filters to the protocol filters.\nThe equivalent logic was deleted when request filters were renamed to\nRESOURCE filters.  This fixes the seg faults that sometimes happen on\ndaedalus after a bogus 416 HTTP response is generated.\n\nIn this case, includes_filter had found an <!--#include virtual > tag, and\nsent a brigade representing the data before it down the filter chain.  The\nbyterange filter generated the bogus 416.  ap_send_error_response essentially\nstarts over with a new response, but it didn't do anything to clean up the\nfilter chain.  So the same instance of the includes_filter got driven from the\ntop with the canned error text and and EOS bucket, which confused the heck\nout of it.  It inserted a sentinel from the original brigade into the\nerror page brigade, causing problems further down the filter chain.\n\nSubmitted by:\tGreg Ames, Jeff Trawick",
    "match": "fixes the seg faults that sometimes happen on\ndaedalus after a bogus 416 HTTP response is generated.\n\nIn this case, includes_filter had found an <!--#include virtual > tag, and\nsent a brigade representing the data before it down the filter chain.  The\nbyterange filter generated the bogus 416.  ap_send_error_response essentially\nstarts over with a new response, but it didn't do anything to clean up the\nfilter chain.  So the same instance of the includes_filter got driven from the\ntop with the canned error text and and EOS bucket, which confused the heck\nout of it.  It inserted a sentinel from the original brigade into the\nerror page brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "5071d9e1746c31b6162532f12498f8e3bc51266b": {
    "message": "Remove hardcoded paths from MPMs and move them to a more central\nplace.  Expand paths in httpd-std.conf in a similar fashion as we do\nin our headers.\n\nSubmitted by:\tPier Fumagalli <pier@betaversion.org>",
    "match": "Remove hardcoded paths from MPMs and move them to a more central\nplace.  Expand paths in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Makefile.in"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "docs/conf/httpd-std.conf.in"
      },
      {
        "file": "include/ap_config.h"
      },
      {
        "file": "include/ap_config_layout.h.in"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "server/mpm/beos/mpm_default.h"
      },
      {
        "file": "server/mpm/experimental/perchild/mpm_default.h"
      },
      {
        "file": "server/mpm/mpmt_os2/mpm_default.h"
      },
      {
        "file": "server/mpm/netware/mpm_default.h"
      },
      {
        "file": "server/mpm/perchild/mpm_default.h"
      },
      {
        "file": "server/mpm/prefork/mpm_default.h"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm/winnt/mpm_default.h"
      },
      {
        "file": "server/mpm/worker/mpm_default.h"
      },
      {
        "file": "support/apachectl.in"
      }
    ]
  },
  "be891c26c90ba0dbb0eb5889e2360802d6a8a032": {
    "message": "PR:\nObtained from:\nSubmitted by:\nReviewed by:    Ryan Bloom\nap_remove_output_filter no longer works for connection filters.\nchange logic in the case of \"HTTP spoken on HTTPS port\" to disable the\nssl filters rather than attempt to remove the filters.",
    "match": "remove_output_filter no longer works for connection filters.\nchange logic in the case of \"HTTP spoken on HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/ssl/mod_ssl.c"
      },
      {
        "file": "modules/ssl/ssl_engine_io.c"
      }
    ]
  },
  "b49f2c8d3df6ee25c7db4ff94c4b01135c24ece7": {
    "message": "Win32: Move apr_bucket_alloc() to a more reasonable location to fix memory leak.",
    "match": "fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.h"
      }
    ]
  },
  "ca3b3ea5f123a10cfbb5cead5925f9572a613fcf": {
    "message": "If this is a subrequest, register the cleanup against\nthe main request. This will prevent the cache object\nfrom being cleaned up from under the request after the\nsubrequest is destroyed.",
    "match": "prevent the cache object\nfrom being cleaned up from under the request after the\nsubrequest is des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_mem_cache.c"
      }
    ]
  },
  "2f1fdebb2d7b574095bc217521afc7481d4a1384": {
    "message": "Here's the patch that really sucks.  old_listeners points to an array\n  of apr_socket objects already destroyed by their cleanups, and in any\n  case they now live in invalid memory.  Extend their lifetimes.\n\n  This implies that the process pool grows on every restart for no good\n  reason.  One possible solution is to let the old pconf survive until\n  the new pconf is alive.  Another is to create the listeners in a subpool\n  of process->pool, destroyed after the old_listeners are closed.\n\n  Either which way, a better solution exists, but this closes the immediate\n  bug.  [How haven't we been segfaulting in unix on restarts before this\n  patch, gurus?]",
    "match": "patch that really sucks.  old_listeners points to an array\n  of apr_socket objects already destroyed by their cleanups, and in any\n  case they now live in invalid memory.  Extend their lifetimes.\n\n  This implies that the process pool grows on every restart for no good\n  reason.  One possible solution is to let the old pconf survive until\n  the new pconf is alive.  Another is to create the listeners in a subpool\n  of process->pool, des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/listen.c"
      }
    ]
  },
  "56a7c0d889de64a249a4ff8e030cd0275f9a091e": {
    "message": "New directive ProxyIOBufferSize. Sets the size of the buffer used\nwhen reading from a remote HTTP server in proxy.\n\nModify receive/send loop in proxy_http and proxy_ftp so that\nshould it be necessary, the remote server socket is closed before\ntransmitting the last buffer (set by ProxyIOBufferSize) to the\nclient. This prevents the backend server from being forced to hang\naround while the last few bytes are transmitted to a slow client.\nFix the case where no error checking was performed on the final\nbrigade in the loop.\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "remote HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/proxy_ftp.c"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "fd8791dd22ca2c2bd907fc820a0b0175011b0118": {
    "message": "Fix the mod_dir/mod_negotiation bug, where redirects and sub requests\nwere not getting the correct filters.  This is done by creating a location\nin the request rec that holds protocol level filters.  Protocol level\nfilters survive for one request, from the time the request is received\nfrom the user to the time the response is sent.  r->output_filters now\nstores the request level filters, which are only valid for the lifetime\nof one request_rec.\n\nThis patch works, but it is not complete.  The second half of the problem\nis that add_any_filter doesn't check where it puts the filters that it\nadds, so it is possible for filters to be put on this wrong list, and\nfor filters to be lost completely during request processing.  That half\nof the fix will be coming in the next day or so.\n\nSubmitted by:\tWill Rowe, Justin Erenkrantz, Ryan Bloom",
    "match": "Fix the mod_dir/mod_negotiation bug, where redirects and sub requests\nwere not getting the correct filters.  This is done by creating a location\nin the request rec that holds protocol level filters.  Protocol level\nfilters survive for one request, from the time the request is received\nfrom the user to the time the response is sent.  r->output_filters now\nstores the request level filters, which are only valid for the lifetime\nof one request_rec.\n\nThis patch works, but it is not complete.  The second half of the problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "server/protocol.c"
      },
      {
        "file": "server/request.c"
      },
      {
        "file": "server/util_filter.c"
      }
    ]
  },
  "5d686c2c5284b151c8aeea49350137c183e0f670": {
    "message": "Paren-protect macro arguments when used.  (This will be needed later when\nthe bucket api gets changed.)\n\nSubmitted by: Brian Pane",
    "match": "protect macro arguments when used.  (This will be needed later when\nthe bucket api",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_include.h"
      }
    ]
  },
  "2f3b58c1319cf8a34d07daa84e4a32eb3ad7730c": {
    "message": "Removed unixd_set_lock_perms(apr_lock_t *), which is no longer\nused by any of the MPMs.  (This is another step toward eliminating\nthe httpd's dependencies on the old lock API.)",
    "match": "Removed unixd_set_lock_perms(apr_lock_t *), which is no longer\nused by any of the MPMs.  (This is another step toward eliminating\nthe http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "os/unix/unixd.c"
      },
      {
        "file": "os/unix/unixd.h"
      }
    ]
  },
  "6ef0fe6dc596722245889c5743fc7e8526f090f9": {
    "message": "Fix for the code that handles SSI tokens that span multiple\nbuckets: if a brigade containing an incomplete \"<!--#\" token\nhas been set aside in ctx->ssi_tag_brigade, we need to retrieve\nand output the contents of that brigade if the next bucket (in\nthe next brigade) doesn't actually complete the \"<!--#\".\n\nAs part of this commit, I've commented out the recent changes\nto detect flush buckets in the brigade, due to segfaults.  (I\nthink the fix may be to add some checks for sentinels and EOS\nwhen advancing to the next bucket after the flush bucket.)",
    "match": "Fix for the code that handles SSI tokens that span multiple\nbuckets: if a brigade containing an incomplete \"<!--#\" token\nhas been set aside in ctx->ssi_tag_brigade, we need to retrieve\nand output the contents of that brigade if the next bucket (in\nthe next brigade) doesn't actually complete the \"<!--#\".\n\nAs part of this commit, I've commented out the recent changes\nto detect flush buckets in the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "c4afab3428d032dcc3155f9bd6eff22a97de9053": {
    "message": "This code should be a noop today.  But I did not feel comfortable about\n  reusing/recopying each bucket -after- inserting it into the brigade.\n  Also, copying bucket c from b from a seemed obtuse.\n\n  This patch creates the single bucket, makes a copy of it for each\n  sendfile chunk we are about to add to the brigade, and finally consumes\n  that initial bucket as the final file bucket of the brigade.",
    "match": "patch creates the single bucket, makes a copy of it for each\n  sendfile chunk we are about to add to the brigade, and finally consumes\n  that initial bucket as the final file bucket of the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "6ea3b953e77aba835bad174aed992fbbd1449503": {
    "message": "fix the short description for mod_deflate",
    "match": "fix the short des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_deflate.html"
      }
    ]
  },
  "1fa6645b88e686991ea9ad50cdbda4ea79aaad00": {
    "message": "fix a broken link to the SetOutputFilter description",
    "match": "fix a broken link to the SetOutputFilter des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_include.html"
      }
    ]
  },
  "ab1700a771ce2ff0258d5cb08caddc51a8617159": {
    "message": "Remove and demote two showstoppers:\n- The support binaries now have an option for static builds at\n  configure-time.  However, it is questioned whether httpd can even be\n  built statically.  In point of fact, this exact item has been addressed,\n  but httpd is still a bit murky so add a \"nice to have\" item.\n- The worker MPM showstopper has been questioned on-list and no\n  justification or further information was provided.  No one else is able\n  to reproduce this case, therefore it is now demoted to a \"nice to have.\"\n  It is not fair to us to have a showstopper when there is no reproduction\n  or explanation present.  When information is provided on how to\n  independently reproduce this case, this issue can be promoted.  But, no\n  one else has reported problems with CGI and worker.",
    "match": "Remove and demote two showstoppers:\n- The support binaries now have an option for static builds at\n  configure-time.  However, it is questioned whether httpd can even be\n  built statically.  In point of fact, this exact item has been addressed,\n  but http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "e2ca13398fae348b532e27789ae98f92678ac84e": {
    "message": "Change httpd.conf default UseCanonicalName to off to make the server\nmore idiot proof.\n\nAlso, move UseCanonicalName to directly under ServerName to make the\nconnection clearer, and clean up the comments.\n\nI removed the http://123.123.123.231/ example, because it just makes it\ntoo tempting for people to use\nServerName http://123.23.23.23/",
    "match": "removed the http://123.123.123.231/ example, because it just makes it\ntoo tempting for people to use\nServerName http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd-nw.conf"
      },
      {
        "file": "docs/conf/httpd-std.conf"
      },
      {
        "file": "docs/conf/httpd-win.conf"
      }
    ]
  },
  "37ffebb0a837d334c812dd8f01b6ec5e72714521": {
    "message": "Fix some unix socket descriptor leaks in the handler side of\nmod_cgid (the part that runs in the server process).  Whack a\nsilly \"close(-1)\" in the handler too.",
    "match": "Fix some unix socket des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      }
    ]
  },
  "609ca197ddb2f79e24a5918417985fe1bd736c53": {
    "message": "Fixed a read from a deleted brigade in the new version of\nap_rgetline()...\n\nIn the \"folding\" case, there was an ap_get_brigade() call after\nthe brigade had been destroyed.  I noticed this while debugging\na memory leak that showed up while testing the httpd with ab.",
    "match": "Fixed a read from a deleted brigade in the new version of\nap_rgetline()...\n\nIn the \"folding\" case, there was an ap_get_brigade() call after\nthe brigade had been des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "21979a63b6b27b94e8a787a99215acfc89299498": {
    "message": "Fixed the export list generation for NetWare to make sure that only real APIs\nare being exported",
    "match": "Fixed the export list generation for NetWare to make sure that only real API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "build/make_nw_export.awk"
      },
      {
        "file": "build/nw_export.inc"
      },
      {
        "file": "build/prebuildNW.bat"
      }
    ]
  },
  "e3a9f55a2c78306b9597365f1d9694c2d8c90986": {
    "message": "Fix seg fault in HTTP_IN when trying to handle the LimitRequestBody\ndirective when reading a proxy response. We should bypass LimitRequestBody\nactivities when handling a response from the proxied server.\n\nI don't think this will circumvent requestbody checking on a large request\ncoming into the server that is destined to be proxied. (not tested though).",
    "match": "Fix seg fault in HTTP_IN when trying to handle the LimitRequestBody\ndirective when reading a proxy response. We should bypass LimitRequestBody\nactivities when handling a response from the proxied server.\n\nI don't think this will circumvent requestbody checking on a large request\ncoming into the server that is des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "aa77b776e4d98fea753d840a793f2661fd7740fe": {
    "message": "showstoppers--;\n\nThis appears to be due to an API change in LWP 5.61.  A fix has been\ncommitted to httpd-test.  (Works on Linux with prefork and worker now.)",
    "match": "API change in LWP 5.61.  A fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "86b38b9d76f2fcc41ebe06b2120165852ba99cad": {
    "message": "leaving the pipe-of-death in the ap_listeners list led to segfaults\nduring sighup processing since the pipe-of-death listen_rec was\nallocated from a short-lived pool\n\nsimply allocating the pipe-of-death listen_rec from the right pool\nisn't a complete fix since at that point we no longer get the\nproper cleanup and we're left with a file descriptor leak\n\nthe simplest overall fix seems to be to keep the pipe-of-death out\nof the ap_listeners list for now",
    "match": "fix since at that point we no longer get the\nproper cleanup and we're left with a file des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/worker/worker.c"
      }
    ]
  },
  "fed680e2a1a8553c81a22371bbd7024fcf9b4b4f": {
    "message": "fix a problem with graceful restart.  If you look at daedalus early in the\nmorning, you will usually see lots ( >50 ) of old generation processes\nhappily serving requests with yesterday's config.  Late in the afternoon, they\nare usually gone due to MaxRequestsPerChild and perform_idle_server_maintenance.\n\nap_mpm_pod_signal can time out during connect(), causing it to exit with an\nerror.  If it was called by ap_mpm_pod_killpg during graceful restart,\nap_mpm_pod_killpg will exit immediately.  This can cause us to not write\nenough characters to the pod to kill off all the old generation children.\n\nThis fix decouples the loop which writes to the pod from the loop which\ngenerates dummy connect()s.  The connect()s aren't as important as\nwriting to the pod when there is a steady stream of inbound connections.\n\nalso, close the socket and destroy the temporary pool if the connect()\nfails.",
    "match": "fix a problem with graceful restart.  If you look at daedalus early in the\nmorning, you will usually see lots ( >50 ) of old generation processes\nhappily serving requests with yesterday's config.  Late in the afternoon, they\nare usually gone due to MaxRequestsPerChild and perform_idle_server_maintenance.\n\nap_mpm_pod_signal can time out during connect(), causing it to exit with an\nerror.  If it was called by ap_mpm_pod_killpg during graceful restart,\nap_mpm_pod_killpg will exit immediately.  This can cause us to not write\nenough characters to the pod to kill off all the old generation children.\n\nThis fix decouples the loop which writes to the pod from the loop which\ngenerates dummy connect()s.  The connect()s aren't as important as\nwriting to the pod when there is a steady stream of inbound connections.\n\nalso, close the socket and des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "1614bfa3933e304c8405903c9b1d4fb66829a73a": {
    "message": "Another fix for the core_output_filter() code that concatenates\nsmall buckets: It's possible for the temporary brigade to\ncontain more than one bucket.  If this happens, we need to\nrecover the buckets after the first from the temporary brigade\nbefore destroying it.",
    "match": "fix for the core_output_filter() code that concatenates\nsmall buckets: It's possible for the temporary brigade to\ncontain more than one bucket.  If this happens, we need to\nrecover the buckets after the first from the temporary brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "c4f8d4d182cc0ff07cfc4f930efa154a21d2f328": {
    "message": "More fixes for core_input_filter()'s concatenation of small buckets:\nupdate last_e and nbytes after compacting the brigade",
    "match": "fixes for core_input_filter()'s concatenation of small buckets:\nupdate last_e and nbytes after compacting the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/core.c"
      }
    ]
  },
  "6393e27622e818cc9a5a9ee8bc582f128f957df9": {
    "message": "remove test_pass_brigade; it lives in httpd-test not here",
    "match": "remove test_pass_brigade; it lives in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/generators/config5.m4"
      }
    ]
  },
  "32c1e8d54ffd4ffad2497d5f6512df62c46dea5f": {
    "message": "Fix a file descriptor leak in mod_include.  When we include a\nfile, we use a sub-request, but we didn't destroy the sub-request\nimmediately, instead we waited until the original request was\ndone.  This patch closes the sub-request as soon as the data is\ndone being generated.\n\nThis passes all tests in the test suite.\n\nSubmitted by:\tBrian Pane <bpane@pacbell.net>\nReviewed by:\tRyan Bloom and Cliff Woolley",
    "match": "Fix a file descriptor leak in mod_include.  When we include a\nfile, we use a sub-request, but we didn't des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "modules/filters/mod_include.h"
      }
    ]
  },
  "2150a9331b7f9adbf0fad2b087430f1d1fd7b675": {
    "message": "Get the proxy module compiling again.  This is a hack to get past the\ncurrent compiler errors.  Basically, the core now puts the socket\nin the conn_rec->conn_config vector.  The proxy grabs that socket and\nuses it where it used to use the client_socket field from the conn_rec.\nLong-term, all of the direct socket communication needs to be removed,\nand this should go through a filter stack.  Short-term, this gets the\nproxy working again.\n\nI have tested http and connect, but I haven't looked at the FTP proxy,\nalthough it does compile now.",
    "match": "removed,\nand this should go through a filter stack.  Short-term, this gets the\nproxy working again.\n\nI have tested http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_connect.c"
      },
      {
        "file": "modules/proxy/proxy_ftp.c"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "5f2b4718d407fb76e7a4738045e3a258fb5c0d50": {
    "message": "Remove the returned-length \"w\" parameter from apr_bucket_heap_create()\nand apr_bucket_heap_make().  It was useless, since the length is invariant\nfrom the length passed in and from the resulting bucket's b->length.  This\ntakes care of a long-standing issue first brought up in February and\ndiscussed on the dev@apr list.  (Issue #2 from the \"Bucket API Cleanup\nIssues\" thread.)\n\nSee http://marc.theaimsgroup.com/?l=apr-dev&m=98324983126666&w=2\n\nReviewed by:    Ryan Bloom (concept)",
    "match": "Remove the returned-length \"w\" parameter from apr_bucket_heap_create()\nand apr_bucket_heap_make().  It was useless, since the length is invariant\nfrom the length passed in and from the resulting bucket's b->length.  This\ntakes care of a long-standing issue first brought up in February and\ndiscussed on the dev@apr list.  (Issue #2 from the \"Bucket API Cleanup\nIssues\" thread.)\n\nSee http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_case_filter_in.c"
      },
      {
        "file": "modules/experimental/mod_charset_lite.c"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "modules/filters/mod_include.h"
      },
      {
        "file": "modules/generators/mod_cgi.c"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "d8adfa3c833cd9bff89831dc01ea7e044f1a0f3b": {
    "message": "Fix erroneous description",
    "match": "Fix erroneous des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.html"
      }
    ]
  },
  "c75705c57d82afaa315385b117b9a763989a241b": {
    "message": "When no port is given in a \"ServerName host\" directive, the\nserver_rec->port is now set to zero, not 80. That allows for\nrun-time deduction of the correct server port (depending on\nSSL/plain, and depending also on the current setting of\nUseCanonicalName). This change makes redirections\nwork, even with https:// connections. [Martin Kraemer]",
    "match": "change makes redirections\nwork, even with https",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "73300ae07dfc3ba0dfd3b46538c7bf2d7657c545": {
    "message": "Fixed to import the aprlib module and export the httpd api's",
    "match": "Fixed to import the aprlib module and export the httpd api",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "os/netware/Apache.def"
      }
    ]
  },
  "7202a1d6913ee46a1f9aec464beafe8159d1cf2b": {
    "message": "Remerge proxy configuration.  Tally: of 9 votes;\n\n  Majority for segregating mod_ssl\n  Minority for segregating mod_proxy\n\n  Also remove a lingering bit of ldap config from httpd-std.conf",
    "match": "Remerge proxy configuration.  Tally: of 9 votes;\n\n  Majority for segregating mod_ssl\n  Minority for segregating mod_proxy\n\n  Also remove a lingering bit of ldap config from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Makefile.in"
      },
      {
        "file": "Makefile.win"
      },
      {
        "file": "STATUS"
      },
      {
        "file": "docs/conf/httpd-nw.conf"
      },
      {
        "file": "docs/conf/httpd-std.conf"
      },
      {
        "file": "docs/conf/httpd-win.conf"
      },
      {
        "file": "docs/conf/proxy-std.conf"
      }
    ]
  },
  "6a1c5bf7c016a6804d745fac771dd2700f10b39e": {
    "message": "Oh, don't you love buffer overflows?\nWe need to allocate storage space for the terminating NULL AND the extra /\nwe may tack on to the string at some point.\n\nHow in the hell the stars were aligned for this to corrupt newv via the\nstrcat at line 580 is unknown.\n\nResolves segfault seen on daedalus.",
    "match": "buffer overflow",
    "vulnerabilities": [
      "Buffer Overflow"
    ],
    "files_changed": [
      {
        "file": "server/request.c"
      }
    ]
  },
  "a3040aca8a5de38c018ae0c3309c29ea87f97dda": {
    "message": "Remove all of the ldap modules.  These have been moved to their own\nrepository, httpd-ldap, and they now form their own sub-project of the\nhttpd project.",
    "match": "Remove all of the ldap modules.  These have been moved to their own\nrepository, http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/aaa/config.m4"
      },
      {
        "file": "modules/aaa/mod_auth_ldap.c"
      },
      {
        "file": "modules/ldap/Makefile.in"
      },
      {
        "file": "modules/ldap/config2.m4"
      },
      {
        "file": "modules/ldap/util_ldap.c"
      },
      {
        "file": "modules/ldap/util_ldap_cache.c"
      },
      {
        "file": "modules/ldap/util_ldap_cache.h"
      }
    ]
  },
  "b4bb9c9b169e851989e4c36f4207183aaea4c7a8": {
    "message": "In one target we weren't always creating the $libexecdir\n($prefix/modules) directory, and in another we were assuming that the\ndirectory existed. Now we always create it in the first target, and we\ncheck that it exists in the second.\n\nThis fixes a bug where httpd.exp would be installed as a _file_ called\n$prefix/modules.",
    "match": "fix/modules) directory, and in another we were assuming that the\ndirectory existed. Now we always create it in the first target, and we\ncheck that it exists in the second.\n\nThis fixes a bug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "build/special.mk"
      },
      {
        "file": "support/Makefile.in"
      }
    ]
  },
  "44b902995d349b7ae1367c1f5fbb3ece96c0febb": {
    "message": "Remove ^M character.  Someone thinks they are in DOS land.",
    "match": " DOS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      }
    ]
  },
  "403ec62fcc05536a565e97d3526726a398b0036b": {
    "message": "dechunking filter removed.\nadd HTTP_IN filter after the headers have been parsed.\nso that the HTTP_IN can check them ;-)\nStill not 100% if this works properly, but I don't get\nthe chunking numbers displayed on my browser,\nso it's better than what was there.\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "removed.\nadd HTTP_IN filter after the headers have been parsed.\nso that the HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/proxy_http.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "5f7b3f278e1135d34fbdc92dde36af25556f3120": {
    "message": "Switch from tmpnam() to apr_file_mktemp() so that gcc with a recent glibc\nwill shut the hell up about tmpnam() being unsafe.  htpasswd.c needs a\nsimilar treatment, but it won't be _quite_ as easy since htpasswd has not\nbeen completely apr-ized yet.",
    "match": "unsafe.  htpasswd.c needs a\nsimilar treatment, but it won't be _quite_ as easy since htpass",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "support/htdigest.c"
      }
    ]
  },
  "0e2376aa327bf9ca49cb258b4605857d6c73cdb7": {
    "message": "Remove the lameo create_req hack and delay the addition of the HTTP_IN\nfilter until after we have read the headers.  This eliminates the status\nhack that was in http_protocol.c and makes it all around better.\n\nserver/protocol.c now directly adds HTTP_IN filter - should we create a\nspecific hook for this?  (Could we do this as a post_read_request hook?)\nI'm not terribly sure, but let's move it down to the lowest possible\nplace in ap_read_request.  We can change this detail later as we see fit.",
    "match": "Remove the lameo create_req hack and delay the addition of the HTTP_IN\nfilter until after we have read the headers.  This eliminates the status\nhack that was in http_protocol.c and makes it all around better.\n\nserver/protocol.c now directly adds HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "27677a4383e0c5d63d83a276ab931380976ef925": {
    "message": "Input filtering rewrite.  Consolidate how we handle HTTP input parsing by\nrearranging and rethinking some things.  The net result is that the HTTP\nfilter is now a request filter and is now only responsible for HTTP things.\nThe core input filter is now responsible for handling all of the dirty work.\n\nHighlights:\n- Removes the dechunk filter and merges it with ap_http_filter (aka HTTP_IN).\n  The dechunk filter was incorrectly handling certain cases (trailers).\n- Moves ap_http_filter from a connection filter to a request filter\n  to support the consolidation above (it needs header info).\n- Change support code to allow the http_filter to be a\n  request filter (how the request is setup initially).\n- Move most of the logic from HTTP_IN to CORE_IN (core_input_filter).\n  HTTP_IN is now only concerned about HTTP things.  The core filter\n  is now responsible for returning data.  It is impossible to\n  consolidate dechunk and http without this because HTTP_IN previously\n  buffered data.  As Greg has suggested, it may make sense to write\n  some brigade functions that handle input (getline).  It should be\n  fairly trivial to add these.  Some of the calls in ap_http_filter\n  could be switched as well.\n\nThis is the original patch as submitted to dev@httpd on Monday, Sep.\n24th.  Additional comments and some minor tweaks done after that\nsubmission are coming up next.  This should allow people who reviewed\nthe original patch to see what has changed and review them piecemeal.\n\nThis test passes all current tests in httpd-test.  Please perform\nchicken sacrifices to verify that this hasn't blown up your favorite\ninput.\n\nReviewed by:\tGreg Stein, Ryan Bloom, and Cliff Woolley (buckets)",
    "match": "weaks done after that\nsubmission are coming up next.  This should allow people who reviewed\nthe original patch to see what has changed and review them piecemeal.\n\nThis test passes all current tests in httpd-test.  Please perform\nchicken sacrifices to verif",
    "vulnerabilities": [
      "Broken Authentication and Session Management",
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/protocol.c"
      }
    ]
  },
  "330f45c5b2661dbe69f72329fd70b6bc7c6c13da": {
    "message": "AFAICT, we have never created server configs of _all_ modules for _all_\n  contexts, only when they come up (e.g., a directive of that particular\n  module is provided) with the except that vhost containers complete the\n  initialization of all modules.  I haven't stepped this, but it appears\n  to be correct.\n\n  This patch assures we can merge two incomplete directory sections\n  together.  They will (obviously) need to be merged with a LHS default,\n  e.g. a vhost's or main server's default dir config.  That's fine, this\n  just allows either the LHS or RHS value to be null, and for merging to\n  still succeed.\n\nReported by:  Sander Striker <striker@apache.org>\nAdditional Analysis:  Doug MacEachern",
    "match": "patch assures we can merge two incomplete directory sections\n  together.  They will (obviously) need to be merged with a LHS default,\n  e.g. a vhost's or main server's default",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/config.c"
      }
    ]
  },
  "36f360a8bb83551830cb3367116a3fa4b9b2d409": {
    "message": "if we're gonna trash the connection due to a queue overflow, at the\nvery least we should close the socket and write a log message (mostly\nto aid debugging, as this is a showstopper problem)\n\nthis is no fix; there is a design issue to consider; hopefully this\nwill",
    "match": "fix; there is a des",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "server/mpm/worker/worker.c"
      }
    ]
  },
  "99ec1c2a33a2141a9d4f617f362874bfd9a8f36f": {
    "message": "Switch back to SIGUSR1 for graceful restarts on all platforms that\nsupport it.  This defines a symbol called AP_SIG_GRACEFUL in\nap_config_auto.h which will have the appropriate signal value.  All\ndirect references to SIGWINCH have been replaced with AP_SIG_GRACEFUL.\n\nOn Linux 2.0, use SIGWINCH instead since SIGUSR1 is used by glibc\n2.0's user-space threading library to control threads.  All later\nversions of Linux/glibc don't have this problem.  (Not to mention the\nsecurity holes in older Linux versions which make it unsuitable for\nuse as a web server.)  If your platform doesn't have SIGUSR1, use the\nappropriate mojo in configure to define what your graceful restart\nsignal should be.\n\nIn theory, a configure switch could be added to allow the admin to\nspecify the appropriate signal that should be used.  This is left\nas an exercise to the reader for now.\n\nThe docs need to be updated.  Since the signal is now configurable,\njust saying SIGUSR1 for graceful restart isn't completely true.  Also,\nthe apachectl functionality needs to be moved into httpd - this is\nwhat Win32 does and it makes us consistent across platforms.\n\nRoy issued a veto against use of SIGWINCH by default, so this should\nresolve that veto.",
    "match": "direct references to SIGWINCH have been replaced with AP_SIG_GRACEFUL.\n\nOn Linux 2.0, use SIGWINCH instead since SIGUSR1 is used by glibc\n2.0's user-space threading library to control threads.  All later\nversions of Linux/glibc don't have this problem.  (Not to mention the\nsecurity holes in older Linux versions which make it unsuitable for\nuse as a web server.)  If your platform doesn't have SIGUSR1, use the\nappropriate mojo in configure to define what your graceful restart\nsignal should be.\n\nIn theory, a configure switch could be added to allow the admin to\nspecify the appropriate signal that should be used.  This is left\nas an exercise to the reader for now.\n\nThe docs need to be updated.  Since the signal is now configurable,\njust saying SIGUSR1 for graceful restart isn't completely true.  Also,\nthe apachectl functionality needs to be moved into httpd - this is\nwhat Win32 does and it makes us consistent across platforms.\n\nRoy issued a veto against use of SIGWINCH by default, so this should\nresolve that veto.",
    "vulnerabilities": [
      "Broken Access Control",
      "Security Misconfiguration"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "configure.in"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "modules/mappers/mod_so.c"
      },
      {
        "file": "server/log.c"
      },
      {
        "file": "server/mpm/beos/beos.c"
      },
      {
        "file": "server/mpm/experimental/perchild/perchild.c"
      },
      {
        "file": "server/mpm/perchild/perchild.c"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm/threaded/threaded.c"
      },
      {
        "file": "server/mpm/worker/worker.c"
      },
      {
        "file": "server/mpm_common.c"
      },
      {
        "file": "server/protocol.c"
      },
      {
        "file": "support/apachectl.in"
      }
    ]
  },
  "0cf3a6139b4c5999a48071d702f372c1fc48150d": {
    "message": "From Mark Cox:\n\nI've had a couple of emails from users using mod_usertrack for authentication.\nAdd the equivalent of a \"warning: coffee may be hot\" label, and fix a broken\nemail address at the same time.\n\nSubmitted by:\tMark Cox",
    "match": "authentication.\nAdd the equivalent of a \"warning: coffee may be hot\" label, and fix a brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "modules/metadata/mod_usertrack.c"
      }
    ]
  },
  "e501b50354fa19eae6fb39d45d1ec42a656dcb4a": {
    "message": "Also in the prior commit (1.338)\n\n  *) Modfied mod_mime to prevent mod_negotation from serving a multiview\n     of a 'handler' or 'filter', so that any filename extension that does\n     not contribute to the negotiated metadata can't be served without\n     an explicit request.  E.g., if the .Z extension is associated with\n     an unzip filter, the user request somefile.Z.html, mod_negotiation\n     won't serve it.  It can serve somefile.Z.html when somefile.Z is\n     requested, since the .Z extension is explictly requested, if the\n     .html extension is associated with ContentType text/html.\n\n    See changes for a complete description.  Because (in the example) the\n    .Z extension doesn't affect negotiated behavior, the files index.html\n    and index.Z.html couldn't be distinguished, and the user would get an\n    error 406 NOT ACCEPTABLE, which is the _wrong_ answer.",
    "match": "prevent mod_negotation from serving a multiview\n     of a 'handler' or 'filter', so that any filename extension that does\n     not contribute to the negotiated metadata can't be served without\n     an explicit request.  E.g., if the .Z extension is associated with\n     an unzip filter, the user request somefile.Z.html, mod_negotiation\n     won't serve it.  It can serve somefile.Z.html when somefile.Z is\n     requested, since the .Z extension is explictly requested, if the\n     .html extension is associated with ContentType text/html.\n\n    See changes for a complete des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/mod_mime.c"
      }
    ]
  },
  "ae0b5278e53ef4ad6de776249baedbcb8d8caecb": {
    "message": "The consensus now is that mod_include should just butt out of any decisions\nabout what to do with different request methods.  It's true that mod_include\nin 1.3.x did not allow POST, but back then it was a handler.  Now it's a\nfilter and can be used to filter the output of dynamically generated responses,\neven ones resulting from a POST request.  So if mod_include is in the filter\nstack, it should just blindly parse the brigade regardless of request method.\n\nThis still fixes the security problem, it just fixes it by being more flexible\nrather than less so.",
    "match": "fixes the security problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "b8861dacd8b0bbc76187d13d67ea9878659e3b43": {
    "message": "Remove some unneeded autoconf checks.  We now have no duplicate libraries\nin the generated EXTRA_LIBS in config_vars.mk (at least on Linux 2.4).\n\nAPR already determines if we need nsl, socket - checking for it in httpd\nis merely redundant.\n\nNone of the code in httpd-2.0 seems to deal with HAVE_GMTOFF as all of\nthat code was moved to APR a long time ago.",
    "match": "Remove some unneeded autoconf checks.  We now have no duplicate libraries\nin the generated EXTRA_LIBS in config_vars.mk (at least on Linux 2.4).\n\nAPR already determines if we need nsl, socket - checking for it in httpd\nis merely redundant.\n\nNone of the code in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "configure.in"
      },
      {
        "file": "server/config.m4"
      }
    ]
  },
  "554005aec76b220f998fb668ed238afacfb1d135": {
    "message": "Fix a security problem which would allow an SSI document\nto be passed to the client unparsed.\n\nReported by:\tBrian Pane",
    "match": "Fix a security problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "e75abb77c7596b93cc01396b740699700b78d213": {
    "message": "Fix a double-free condition when byterange requests are made on brigades\ncontaining any bucket that cannot be copied natively (ie, pipe or socket\nbuckets).\n\nBefore, we were reading that bucket to morph it to a heap bucket and then\ntaking the str that heap bucket points to and placing it in a second,\ncompletely separate heap bucket.  That means we'd have two apr_bucket/\napr_bucket_heap pairs each with a refcount of 1 (rather than two apr_buckets\nand a single apr_bucket_heap with a refcount of 2).  str would then be\ndoubly-freed when the second of those two buckets was destroyed.",
    "match": "Fix a double-free condition when byterange requests are made on brigades\ncontaining any bucket that cannot be copied natively (ie, pipe or socket\nbuckets).\n\nBefore, we were reading that bucket to morph it to a heap bucket and then\ntaking the str that heap bucket points to and placing it in a second,\ncompletely separate heap bucket.  That means we'd have two apr_bucket/\napr_bucket_heap pairs each with a refcount of 1 (rather than two apr_buckets\nand a single apr_bucket_heap with a refcount of 2).  str would then be\ndoubly-freed when the second of those two buckets was des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "e2dc4d7e7f6cb8c4a9782054f4a1614cbf31d454": {
    "message": "Fix a small bug that limited the description's width to the filename's width.\n\nSubmitted by:\tMladen Turk <mladen.turk@mail.inet.hr>",
    "match": "Fix a small bug that limited the des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/generators/mod_autoindex.c"
      }
    ]
  },
  "b9ab526e97f7399c04a8a5abafe5d9462030065c": {
    "message": "Lots of small config file changes including:\n\n- Beat everything down to less than 80 character lines.\n\n- Revise the comments for the DSO section to eliminate mention\nof ordering problems.\n\n- Add LoadModule lines for all extension modules, commented out.\nNote that it is very difficult in the current ./configure\nsystem to make the base modules DSOs, so I didn't include those.\n\n- Remove ServerType comments.\n\n- Add \"deny from all\" to the root directory container.  The comments\nindicate that it should be there.\n\n- Delete a little (in my opinion) excess verbosity in the\ndescription of the .htacess download blocker.\n\n- Remove the CacheNegotiatedDocs directive.  It was wrong,\nand is obscure enough that people should probably just look\nit up in the docs.\n\n- Make the example for Redirect a little more explicit\n\n- Change the examples and descriptions for READMENAME/HEADERNAME\nsince, if multiviews are off, they haven't worked as described\nsince 1.3.something.\n\n- Remove the phf trap example.  This is very old and probably\nworthless.\n\n- Remove MetDir/MetSuffix.  These are rarely used.",
    "match": "section to eliminate mention\nof ordering problems.\n\n- Add LoadModule lines for all extension modules, commented out.\nNote that it is very difficult in the current ./configure\nsystem to make the base modules DSOs, so I didn't include those.\n\n- Remove ServerType comments.\n\n- Add \"deny from all\" to the root directory container.  The comments\nindicate that it should be there.\n\n- Delete a little (in my opinion) excess verbosity in the\ndescription of the .htacess download blocker.\n\n- Remove the CacheNegotiatedDocs directive.  It was wrong,\nand is obscure enough that people should probably just look\nit up in the docs.\n\n- Make the example for Redirect a little more explicit\n\n- Change the examples and descriptions for READMENAME/HEADERNAME\nsince, if multiviews are off, they haven't worked as described\nsince 1.3.something.\n\n- Remove the phf trap example.  This is very old and probably\nworthless.\n\n- Remove MetDir/MetSuffix",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd-std.conf"
      },
      {
        "file": "docs/conf/httpd-win.conf"
      }
    ]
  },
  "1a16222dbd33e1f7e0c1374c4a357bf592cb81cb": {
    "message": "This should fix the remaining problems with POST.  Basically, we\nadd a new macro, called APR_BRIGADE_NORMALIZE.  This macro searches\nall the buckets, and removes any zero length bucket.  They we can\njust use APR_BRIGADE_EMPTY to determine if our brigade has any data,\nand we can quickly call ap_get_brigade if it doesn't.\n\nDoug, please throw your battery of tests at this to make sure it works.",
    "match": "fix the remaining problems with POST.  Basically, we\nadd a new macro, called APR_BRIGADE_NORMALIZE.  This macro searches\nall the buckets, and removes any zero length bucket.  They we can\njust use APR_BRIGADE_EMPTY to determine if our brigade has any data,\nand we can quickly call ap_get_brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "3c87fb851865e1c51d509a2d333059a7c1fdcee8": {
    "message": "Fix a bug in mod_expires.  Previous to this patch, if you\ntold mod_expires to add 604800 seconds to the last-modified\ntime, it actually added 604800 usec's to the last-modified time,\nso that when looking at the response it looked like nothing\nhad been done.  The root of the problem was that we always compute\ntime in usec's, but we ask users to input sec's.  This means we\nneed to convert to usec's before using those values.\nCS: Obtained from:",
    "match": "Fix a bug in mod_expires.  Previous to this patch, if you\ntold mod_expires to add 604800 seconds to the last-modified\ntime, it actually added 604800 usec's to the last-modified time,\nso that when looking at the response it looked like nothing\nhad been done.  The root of the problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/metadata/mod_expires.c"
      }
    ]
  },
  "bacc151823ab25f7dd9ffb9a29d08e380678c02b": {
    "message": "Re-apply the patch from yesterday that makes ap_http_filter use\napr_brigade_partition.  In order to do this cleanly, I had to make\nsome changes to the apr_brigade_partition API, so this also adds fixes\nall of the calls to that function throughout the server.",
    "match": "API, so this also adds fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "cc3dfda9bb5f648bee5ff90c2972b1d429cfb989": {
    "message": "I accidentally committed the DOS line endings in that last commit.  This\nstrips them back out again.  Diff this against v1.1 for the real changes.",
    "match": " DOS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "support/win32/ApacheMonitor.dsp"
      }
    ]
  },
  "aa1db8029f7bc554580d70e7880db959950f698b": {
    "message": "That's it.  There are no further emits for signedness or size conversion\n  in MSVC 5.x.  Enough for 2.0.22, I'll revisit under -w4 (msvc's -wall)\n  and attack the other modules in 2.0.23-dev.",
    "match": "attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "116c107876adc4b9752a0203ad2a28c06cb2a651": {
    "message": "Fix problem with the previous patch to handle HEAD requests.  Now, the\nheader_filter will stay installed in the filter chain when processing\nHEAD requests to intercept and discard content bodys sent by poorly\nwritten handlers. This work also points out the need for an optimization\nin the content_length filter to not split the brigade if the next bucket\nin the brigade is an EOS.",
    "match": "Fix problem with the previous patch to handle HEAD requests.  Now, the\nheader_filter will stay installed in the filter chain when processing\nHEAD requests to intercept and discard content bodys sent by poorly\nwritten handlers. This work also points out the need for an optimization\nin the content_length filter to not split the brigade if the next bucket\nin the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "ce0b029d3dc46512ae7fec271d4ca536fe22257b": {
    "message": "fix memory leak of apr_sockaddr_t and apr_socket_t in ap_mpm_pod_signal,\ncalled by perform_idle_server_maintenance.\n\nallocate & init one apr_sockaddr_t for the dummy connect at pod open time.\nuse a temporary subpool for the apr_socket_t",
    "match": "fix memory leak",
    "vulnerabilities": [
      "Memory Leaks"
    ],
    "files_changed": [
      {
        "file": "include/mpm_common.h"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "1878245c367824e37a8424c5f913ba8f6f86492f": {
    "message": "Added an inherit flag to apr_socket_create and other socket creation\nfunctions.  This allows APR programs to specify that a socket should\nbe passed to any child processes that are created.  The inherit flag\nis only meaningful if programs use apr_process_create().  This\nalso adds a couple of macros that allow APR types to set and unset\nthe inherit flag.\n\nThis also fixes Apache to use the new API.",
    "match": "fixes Apache to use the new API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/listen.c"
      },
      {
        "file": "server/mpm_common.c"
      },
      {
        "file": "server/rfc1413.c"
      },
      {
        "file": "support/ab.c"
      }
    ]
  },
  "06a9110fa97eefecb6779cb00c8b505aa9d157c5": {
    "message": "Win32: First of two patches to prevent child processes from inheriting open\nsocket descriptors.",
    "match": "patches to prevent child processes from inheriting open\nsocket des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      }
    ]
  },
  "13dabfa934ee88286bbad8cd00188545ab67a995": {
    "message": "fix a comment describing how we kill off a single child process",
    "match": "fix a comment des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/prefork/prefork.c"
      }
    ]
  },
  "1e494a8c11d045a2e9d07bf66a4409697cb36c63": {
    "message": "implement Ryan's suggested fix for buckets associated with a subrequest\nhaving private data in the wrong (i.e., subrequest) pool, leading to\na segfault later in processing the main request\n\nin the patch posted on new-httpd, the temporary brigade was allocated from\nthe connection pool; the committed code allocates the brigade from the\nmain-request pool, as suggested by Ian Holsman",
    "match": "fix for buckets associated with a subrequest\nhaving private data in the wrong (i.e., subrequest) pool, leading to\na segfault later in processing the main request\n\nin the patch posted on new-httpd, the temporary brigade was allocated from\nthe connection pool; the committed code allocates the brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/request.c"
      }
    ]
  },
  "95a2ba01ed4638f5e2169a3af4a8dae77bd87299": {
    "message": "Moved util_uri to apr-util/uri/apr_uri, which means adding the apr_\nprefix to all of the uri functions (yuck), changing some includes,\nand using APR error codes instead of HTTP-specific error codes.\n\nOther notes to test this patch:\n- You need to delete the util_uri.h file - exports picks up on this.\n- I'd like to remove the apr_uri.h from httpd.h, but that might\n  increase the complexity of this patch even further.  Once this patch\n  is accepted (in some form), then I can focus on removing apr_uri.h\n  from httpd.h entirely.  I need baby steps (heh) right now.\n- I imagine that this might break a bunch of stuff in Win32 or other OS\n  builds with foreign dependency files.  Any help here is appreciated.\n\nThis is a start...  -- justin\n\nSubmitted by:\tJustin Erenkrantz\nReviewed by:\tRoy Fielding",
    "match": "remove the apr_uri.h from httpd.h, but that might\n  increase the complexity of this patch even further.  Once this patch\n  is accepted (in some form), then I can focus on removing apr_uri.h\n  from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/aaa/mod_auth_digest.c"
      },
      {
        "file": "modules/dav/main/util.c"
      },
      {
        "file": "modules/loggers/mod_log_config.c"
      },
      {
        "file": "modules/mappers/mod_alias.c"
      },
      {
        "file": "modules/test/mod_test_util_uri.c"
      },
      {
        "file": "server/Makefile.in"
      },
      {
        "file": "server/main.c"
      },
      {
        "file": "server/protocol.c"
      },
      {
        "file": "server/scoreboard.c"
      }
    ]
  },
  "2793534d55b5df3e2cf27c315e8955365144f20f": {
    "message": "Back out the recent change to ap_get_brigade, to make it use indirection\nagain.  The problem is that the amount of data read from the network,\nis not necessarily the amount of data returned from the filters.  It is\npossible for input filters to add bytes to the data read from the network.\n\nTo fix the original bug, I just removed the line from ap_get_client_block\nthat decremented r->remaining, we allow the http_filter to do that for\nus.\n\nI have also removed an incorrect comment.",
    "match": "removed the line from ap_get_client_block\nthat decremented r->remaining, we allow the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/util_filter.h"
      },
      {
        "file": "modules/experimental/mod_case_filter_in.c"
      },
      {
        "file": "modules/experimental/mod_charset_lite.c"
      },
      {
        "file": "modules/experimental/mod_ext_filter.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "modules/http/mod_core.h"
      },
      {
        "file": "modules/mappers/mod_alias.c"
      },
      {
        "file": "modules/tls/mod_tls.c"
      },
      {
        "file": "server/core.c"
      },
      {
        "file": "server/mpm/experimental/perchild/perchild.c"
      },
      {
        "file": "server/mpm/perchild/perchild.c"
      },
      {
        "file": "server/protocol.c"
      },
      {
        "file": "server/util_filter.c"
      }
    ]
  },
  "0e352bf4a06443bacdb9e6e5a3e31e30b1a21b95": {
    "message": "Revert about half of the last commit because of an oversight on my part\nthat broke it.  Unfortunately, fixing the oversight \"the right way\" is\nalmost as ugly as the original code; it's easier to just go back to the way\nit was, at least for now.\n\nThe problem is that the original code would delete buckets from foo through\nbar in the brigade, and the patched code deletes *everything* up through\nbar, which is bad.  I could have fixed it by doing two splits, but that\nintroduces too many palloc's for my taste.  It's also fixable with RING macros,\nbut I refuse to start using RING macros directly on brigades.  The best\nsolution would be if there were a brigade equivalent to a RING_UNSPLICE/\nRING_INSERT_HEAD sequence (this sequence is also used interally by\napr_brigade_split(), btw), something like this:\nAPR_BRIGADE_TRANSFER_BUCKETS(oldbrigade,newbrigade,startbucket,endbucket);\n\nAbsent that, the affected parts of the patch are hereby reverted (grumble,\ngrumble).  If people liek the APR_BRIGADE_TRANSFER_BUCKETS() idea, I'll\nimplement that and repatch mod_include later.",
    "match": "fixing the oversight \"the right way\" is\nalmost as ugly as the original code; it's easier to just go back to the way\nit was, at least for now.\n\nThe problem is that the original code would delete buckets from foo through\nbar in the brigade, and the patched code deletes *everything* up through\nbar, which is bad.  I could have fixed it by doing two splits, but that\nintroduces too many palloc's for my taste.  It's also fixable with RING macros,\nbut I refuse to start using RING macros directly on brigades.  The best\nsolution would be if there were a brigade equivalent to a RING_UNSPLICE/\nRING_INSERT_HEAD sequence (this sequence is also used interally by\napr_brigade_split(), btw), something like this:\nAPR_BRIGADE_TRANSFER_BUCKETS(oldbrigade,newbrigade,startbucket,endbucket);\n\nAbsent that, the affected parts of the patch are hereby reverted (grumble,\ngrumble).  If people liek the APR_BRIG",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/filters/mod_include.c"
      }
    ]
  },
  "f80e0aec0262eac9fba04a16f69f340f93678894": {
    "message": "Changes required to make prefork clean up idle children properly. There was a window during which a starting worker deadlocks when an idle cleanup arrives before it completes init. Apache then keeps trying to cleanup the same deadlocked worker forever (until higher pids come along, but it still will never reduce below the deadlocked pid). Thus the number of children would not reduce to the correct idle level.",
    "match": "deadlocks",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "include/ap_mpm.h"
      },
      {
        "file": "include/scoreboard.h"
      },
      {
        "file": "modules/generators/mod_status.c"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "08aa30e4bbf9e16c352eaf937267991e2994032d": {
    "message": "A sunny day in Cupertino.\n\nWe haven't seen this problem on daedalus since the ap_getline() assert was\nfixed a week and a half ago.  It is hereby declared fixed.\n\nHere's a theory:  the garbage in c->remaining caused header lines to be\nsucked in on persistant/pipelined connections when only the http request\nline was desired, causing mime headers to get logged, including the \\n\ndelimiters.",
    "match": "fixed a week and a half ago.  It is hereby declared fixed.\n\nHere's a theory:  the garbage in c->remaining caused header lines to be\nsucked in on persistant/pipelined connections when only the http request\nline was des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "e56dc237978d0cb45c4bfe53195bed0a1bd0623f": {
    "message": "Fix a storage leak in mod_cgid... the temporary pool created for\neach request was not cleaned up.\n\nThis removes the nastiest symptom of some excess pipes being created\n(i.e., we don't run out of file descriptors), though something\nadditional is needed to keep from creating the pipes to begin with.",
    "match": "Fix a storage leak in mod_cgid... the temporary pool created for\neach request was not cleaned up.\n\nThis removes the nastiest symptom of some excess pipes being created\n(i.e., we don't run out of file des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      }
    ]
  },
  "aafa7afb8b5fccb114754f17d3d5af3995636179": {
    "message": "Fix a major security problem with double-reverse lookup checking.\nPreviously, a client connecting over IPv4 would not be matched\nproperly when the server had an IPv6 listening socket.\n\nPR:\t      7407\nSubmitted by: Taketo Kabe <kiabe@sra-tohoku.co.jp>\nReviewed by:  Jeff Trawick",
    "match": "Fix a major security problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "server/core.c"
      }
    ]
  },
  "77bc182a6038df0a3a0cf9e549cd94a7be34193f": {
    "message": "Fix a problem in mod_mime_magic where file descriptor 2 would be\ninadvertently closed.  This logic was in the uncompress child in 1.3\nbut was in the parent in 2.0.\n\nuncompress_child() was renamed to create_uncompress_child() to reflect\na change in use since 1.3.\n\nA note was added about missing 1.3 logic for doing something with the\nstderr of the uncompress process.",
    "match": "Fix a problem in mod_mime_magic where file des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/metadata/mod_mime_magic.c"
      }
    ]
  },
  "8aa41688e08dd7d3d0263bf9ad9cb49d94b2f26e": {
    "message": "Fix a security exposure in mod_access.  Previously when IPv6\nlistening sockets were used, allow/deny-from-IPv4-address rules\nwere not evaluated properly (PR #7407).  Also, add the ability to\nspecify IPv6 address strings with optional prefix length on Allow\nand Deny.\n\nNote: A bit more of PR #7407 remains dealing with a problem with\ndouble-reverse lookups when an IPv6 listening socket is used.",
    "match": "Fix a security exposure in mod_access.  Previously when IPv6\nlistening sockets were used, allow/deny-from-IPv4-address rules\nwere not evaluated properly (PR #7407).  Also, add the ability to\nspecify IPv6 address strings with optional prefix length on Allow\nand Deny.\n\nNote: A bit more of PR #7407 remains dealing with a problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "CHANGES"
      },
      {
        "file": "modules/aaa/mod_access.c"
      }
    ]
  },
  "7246d9b0859941f24ef2d90cc74314f5499b1b0a": {
    "message": "Fix a problem displaying status when a threaded MPM is used.\n\nThe line\n\n   int indx = (i * HARD_THREAD_LIMIT) + j;\n\nin the vicinity of the change was bad; k needed to be added\ninstead of j.\n\nI swapped the use of j and k in this section so that i and j\nhad the same meaning as in an earlier nested loop.  I suspect\nthat the difference in meaning is what led to the bug.",
    "match": "Fix a problem displaying status when a threaded MPM is used.\n\nThe line\n\n   int indx = (i * HARD_THREAD_LIMIT) + j;\n\nin the vicinity of the change was bad; k needed to be added\ninstead of j.\n\nI swapped the use of j and k in this section so that i and j\nhad the same meaning as in an earlier nested loop.  I suspect\nthat the difference in meaning is what led to the bug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/generators/mod_status.c"
      }
    ]
  },
  "9174184e2ace1dcd39c987c0b70a1f6aad5eafd3": {
    "message": "*) remove some obsolete/unused defines from httpd.h.\n*) remove DEFAULT_XFERLOG from main.c; it is never set/used\n*) move ap_get_max_daemons() to ap_mpm.h\n*) move DEFAULT_LISTENBACKLOG to mpm_common.h",
    "match": "remove some obsolete/unused defines from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/ap_mpm.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "include/mpm_common.h"
      },
      {
        "file": "server/main.c"
      },
      {
        "file": "server/mpm_common.c"
      }
    ]
  },
  "d7c3b91b80832aa2930e5a2d1f13c27f7682da9f": {
    "message": "*) remove obsolete http_conf_globals.h\n*) simplify all this #ifdef'ing: just nuke the unixd.h header. it isn't\n   actually needed.",
    "match": "remove obsolete http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/http_conf_globals.h"
      },
      {
        "file": "modules/generators/mod_cgi.c"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "modules/generators/mod_info.c"
      },
      {
        "file": "os/tpf/os.c"
      },
      {
        "file": "server/mpm/winnt/service.c"
      },
      {
        "file": "server/scoreboard.c"
      }
    ]
  },
  "742f55e381e2c5cbb3564470bffe6650711b246a": {
    "message": "Fix the byterange filter for the case where the bucket can't be\ncopied natively.  This will only ever happen if a bucket can be split\nbut not copied, because we read the bucket in apr_brigade_partition if\nwe can't split it.  Regardless, this is much safer.  This should also fix\nall of the problems with the byterange filter.",
    "match": "Fix the byterange filter for the case where the bucket can't be\ncopied natively.  This will only ever happen if a bucket can be split\nbut not copied, because we read the bucket in apr_brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "9d0b07d498db0e48a0a53280b0a4b4b5287d7b8f": {
    "message": "Fix a problem found by Ryan when deleting collections, which triggered an\nunderlying (broad) bug. dav_add_response() was assuming the walk params were\na dav_walker_ctx. During the walker cleanup in Nov00, that assumption was\nremoved, so response errors that occurred in the cleaned sections (such as\ndav_fs_delete_resource) could trigger a segfault.\n\nSolution: add a pool to dav_walk_resource and alter dav_add_response to use\nthat, rather than assume the ctx is a dav_walker_ctx.\n\n[ note there is also a pool in dav_walk_resource.resource, but that pool is\n  associated with the *resource* rather than the process of walking, so we\n  introduced another field. currently they are the same, however. ]\n\nFound by: Ryan Bloom",
    "match": "Fix a problem found by Ryan when deleting collections, which triggered an\nunderlying (broad) bug. dav_add_response() was assuming the walk params were\na dav_walker_ctx. During the walker cleanup in Nov00, that assumption was\nremoved, so response errors that occurred in the cleaned sections (such as\ndav_fs_delete_resource) could trigger a segfault",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/dav/fs/repos.c"
      },
      {
        "file": "modules/dav/main/mod_dav.c"
      },
      {
        "file": "modules/dav/main/mod_dav.h"
      }
    ]
  },
  "41080e5a7545e6f5d7fad57196d46178e40d0258": {
    "message": "With this patch, dav and file_cache ride again :-)  Note file_cache now\n  uses mmaps, which may or may not be desired on win32.",
    "match": "patch, dav and file_cache ride again :-)  Note file_cache now\n  uses mmaps, which may or may not be des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Apache.dsw"
      },
      {
        "file": "ApacheCore.def"
      },
      {
        "file": "Makefile.win"
      },
      {
        "file": "libhttpd.def"
      }
    ]
  },
  "82628abb1f1225639580cb948da30bd28f801f1f": {
    "message": "*) fix up buildexports.sh:\n   - enable it to be run from any dir by passing a parameter for the\n     location of srclib, and using its own location for determining where\n     the AWK script is located\n   - accept exports files on STDIN, and produce output on STDOUT\n   - use \"pwd\" and cd back to it, rather than assuming ../../.. (which might\n     not apply if we feed it other export files)\n   - add USAGE reporting\n\n*) generate exports.c during normal build of \"server\" rather than during the\n   buildconf stage. update invocation to match above changes\n\n*) revamp the ap_ugly_hack referencing in main.c: put it at the bottom of\n   the file with the other, similar references, and style it similarly.\n\n*) remove the ap_ugly_hack declaration from http_main.h; it is internal to\n   the \"server\" code",
    "match": "remove the ap_ugly_hack declaration from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "build/build2.mk"
      },
      {
        "file": "build/buildexports.sh"
      },
      {
        "file": "include/http_main.h"
      },
      {
        "file": "server/Makefile.in"
      },
      {
        "file": "server/main.c"
      }
    ]
  },
  "285ef283913b681e023aa94e662b74e3de05507d": {
    "message": "Buff was removed this weekend, so the STATUS item should go away.  This\nalso adds the STATUS file to the new httpd-2.0 directory, with all the\nhistory from apache-2.0",
    "match": "removed this weekend, so the STATUS item should go away.  This\nalso adds the STATUS file to the new http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "c312688331a2bbe43343d05843224384ccdc2d9c": {
    "message": "Begin to remove some of the cache-ing logic from the http proxy.",
    "match": "remove some of the cache-ing logic from the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/proxy_connect.c"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      }
    ]
  },
  "b3852b0e99dfd2eb9c7cf235af6f1bb270936c60": {
    "message": "This removes all BUFF's from the HTTP proxy.  This code is relatively\nugly, but it does proxy pages.  This even fixes the content-type bug\nthat I introduced yesterday sometime.  As soon as BUFF is removed from\nthe FTP proxy, the buff.c and buff.h files need to go away.",
    "match": "removes all BUFF's from the HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/http_protocol.h"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "modules/proxy/proxy_http.c"
      },
      {
        "file": "modules/proxy/proxy_util.c"
      }
    ]
  },
  "87112b9ed318480dfbf1ac51df89b46ff1a7a30f": {
    "message": "More local/remote changes and tidy up http_vhost a bit.\n\nAlso add a new function to get an ap_ina_addr_t from a socket.",
    "match": "remote changes and tidy up http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "server/vhost.c"
      }
    ]
  },
  "658ec6df00e15a85fc70993b6e04fe87b2f05ae6": {
    "message": "final round of walker cleanup: fix the provider API to match what is Right.",
    "match": "fix the provider API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/dav/fs/repos.c"
      },
      {
        "file": "modules/dav/main/mod_dav.c"
      },
      {
        "file": "modules/dav/main/mod_dav.h"
      },
      {
        "file": "modules/dav/main/util.c"
      },
      {
        "file": "modules/dav/main/util_lock.c"
      }
    ]
  },
  "a0a16ca1a3ac19f92eb206f8bab102c958bb605e": {
    "message": "Two patches (sorry), first to clean up the double assignment of the\n  r->content_type value on UNICODE_FS, and the second to add ETag and\n  Modified-Date to the file listing.  If anyone sees an objection to\n  this thing, please scream (loudly) before I go and attack 1.3.x with\n  the ETag/Modified-Date Friday a.m.",
    "match": "patches (sorry), first to clean up the double assignment of the\n  r->content_type value on UNICODE_FS, and the second to add ETag and\n  Modified-Date to the file listing.  If anyone sees an objection to\n  this thing, please scream (loudly) before I go and attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/generators/mod_autoindex.c"
      }
    ]
  },
  "ef40383b1e15b2dfc44500eb0bf967ee5157e44c": {
    "message": "other than minor tweaks:\n\n. mod_charset_lite is now a bit naughty, looking in core_dir_config to see if\n  its filter is coded in Add{Input|Output}Filter.  There are various weird\n  scenarios that happen when one of the filters gets added both by\n  mod_charset_lite and due to Add{Input|Output}Filter.  It is much nicer (to\n  the code and to the user) to avoid the problem rather than to trying to\n  keep things from blowing up when we are misconfigured in this manner.\n\n  It may be generally useful to add API functions a module can call to see if\n  its filter is configured on input/output.\n\n  Note that CharsetOptions [No]ImplicitAdd is no longer interesting, but that\n  code has not yet been removed.\n\n. Fix input filtering so that we handle translating a brigade in multiple\n  passes when our translation buffer fills up.\n\n. xlate_brigade is cleaned up a bit and hopefully has less bugs\n\n(far too many changes in one commit, but I couldn't access locus from 30,000 feet)",
    "match": "API functions a module can call to see if\n  its filter is configured on input/output.\n\n  Note that CharsetOptions [No]ImplicitAdd is no longer interesting, but that\n  code has not yet been removed.\n\n. Fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_charset_lite.c"
      }
    ]
  },
  "3e965f1f47747affb3fe83f428d3254daa9758a4": {
    "message": "Fix internal redirects.  They should have their own HTTP_HEADER filter\ninstance, and we need to remove the main-request's HTTP_HEADER.",
    "match": "remove the main-request's HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_request.c"
      }
    ]
  },
  "972b5a5e156822fda64a6b4d96c6a9e560c1b65c": {
    "message": "Add a way to remove output filters.  This is used by http_header_filter to\nremove itself once it has actually sent the headers.",
    "match": "remove output filters.  This is used by http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/util_filter.h"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "server/util_filter.c"
      }
    ]
  },
  "7b2aa25b8e483014d41aaa5a4310a7c53a6532ad": {
    "message": "Tighten up the syntax checking of Host: headers to fix a\nsecurity bug in some mass virtual hosting configurations\nthat can allow a remote attacker to retrieve some files\non the system that should be inaccessible. The problem\noccured with requests including the line \"Host: ...\" --\nthe last dot is stripped and the remaining \"..\" then\nreveals a parent directory.\n\nReported by: Peter Christoffersen <pch@mindpass.com>\nMessage-ID: <8quts6$2el$1@news.inet.tele.dk>\nNewsgroups: comp.infosystems.www.servers.unix",
    "match": "fix a\nsecurity bug in some mass virtual hosting configurations\nthat can allow a remote attacker to retrieve some files\non the system that should be inaccessible. The problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/vhost.c"
      }
    ]
  },
  "f7e5100cb8d11bd1e6743894769883585be5b8d6": {
    "message": "Remove some annoying warnings from http_protocol.  This is untested, but\nit makes sense logically.",
    "match": "Remove some annoying warnings from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "cbcc412994399190c5164383e1436b53d806e0de": {
    "message": "Renamed all MODULE_EXPORT symbols to AP_MODULE_DECLARE and all symbols\n  for CORE_EXPORT to AP_CORE_DECLARE (namespace protecting the wrapper)\n  and retitled API_EXPORT as AP_DECLARE and APR_EXPORT as APR_DECLARE.\n  All _VAR_ flavors changes to _DATA to be absolutely clear.\n  Thank you Greg, for the most obvious suggestion.",
    "match": "protecting the wrapper)\n  and retitled API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "ApacheCore.dsp"
      },
      {
        "file": "ApacheCoreDll.dsp"
      },
      {
        "file": "build/MakeEtags"
      },
      {
        "file": "httpd.dsp"
      },
      {
        "file": "include/ap_config.h"
      },
      {
        "file": "include/ap_mmn.h"
      },
      {
        "file": "include/ap_mpm.h"
      },
      {
        "file": "include/http_config.h"
      },
      {
        "file": "include/http_connection.h"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "include/http_log.h"
      },
      {
        "file": "include/http_main.h"
      },
      {
        "file": "include/http_protocol.h"
      },
      {
        "file": "include/http_request.h"
      },
      {
        "file": "include/http_vhost.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "include/mpm_status.h"
      },
      {
        "file": "include/util_charset.h"
      },
      {
        "file": "include/util_date.h"
      },
      {
        "file": "include/util_filter.h"
      },
      {
        "file": "include/util_md5.h"
      },
      {
        "file": "include/util_script.h"
      },
      {
        "file": "include/util_uri.h"
      },
      {
        "file": "include/util_xml.h"
      },
      {
        "file": "libhttpd.dsp"
      },
      {
        "file": "modules/aaa/mod_access.c"
      },
      {
        "file": "modules/aaa/mod_auth.c"
      },
      {
        "file": "modules/aaa/mod_auth_anon.c"
      },
      {
        "file": "modules/aaa/mod_auth_dbm.c"
      },
      {
        "file": "modules/aaa/mod_auth_digest.c"
      },
      {
        "file": "modules/cache/mod_file_cache.c"
      },
      {
        "file": "modules/echo/mod_echo.c"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "modules/generators/mod_asis.c"
      },
      {
        "file": "modules/generators/mod_autoindex.c"
      },
      {
        "file": "modules/generators/mod_cgi.c"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "modules/generators/mod_info.c"
      },
      {
        "file": "modules/generators/mod_status.c"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "modules/http/mod_mime.c"
      },
      {
        "file": "modules/loggers/mod_log_config.c"
      },
      {
        "file": "modules/mappers/mod_alias.c"
      },
      {
        "file": "modules/mappers/mod_dir.c"
      },
      {
        "file": "modules/mappers/mod_imap.c"
      },
      {
        "file": "modules/mappers/mod_negotiation.c"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/mappers/mod_so.c"
      },
      {
        "file": "modules/mappers/mod_speling.c"
      },
      {
        "file": "modules/mappers/mod_vhost_alias.c"
      },
      {
        "file": "modules/metadata/mod_cern_meta.c"
      },
      {
        "file": "modules/metadata/mod_env.c"
      },
      {
        "file": "modules/metadata/mod_expires.c"
      },
      {
        "file": "modules/metadata/mod_headers.c"
      },
      {
        "file": "modules/metadata/mod_setenvif.c"
      },
      {
        "file": "modules/metadata/mod_unique_id.c"
      },
      {
        "file": "modules/metadata/mod_usertrack.c"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "os/os2/util_os2.c"
      },
      {
        "file": "os/unix/unixd.c"
      },
      {
        "file": "os/unix/unixd.h"
      },
      {
        "file": "os/win32/os.h"
      },
      {
        "file": "os/win32/util_win32.c"
      },
      {
        "file": "server/buildmark.c"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/connection.c"
      },
      {
        "file": "server/log.c"
      },
      {
        "file": "server/mpm/beos/beos.c"
      },
      {
        "file": "server/mpm/beos/scoreboard.c"
      },
      {
        "file": "server/mpm/beos/scoreboard.h"
      },
      {
        "file": "server/mpm/dexter/dexter.c"
      },
      {
        "file": "server/mpm/dexter/scoreboard.h"
      },
      {
        "file": "server/mpm/experimental/perchild/perchild.c"
      },
      {
        "file": "server/mpm/mpmt_beos/mpmt_beos.c"
      },
      {
        "file": "server/mpm/mpmt_beos/scoreboard.c"
      },
      {
        "file": "server/mpm/mpmt_beos/scoreboard.h"
      },
      {
        "file": "server/mpm/mpmt_pthread/mpmt_pthread.c"
      },
      {
        "file": "server/mpm/mpmt_pthread/scoreboard.c"
      },
      {
        "file": "server/mpm/mpmt_pthread/scoreboard.h"
      },
      {
        "file": "server/mpm/perchild/perchild.c"
      },
      {
        "file": "server/mpm/perchild/scoreboard.h"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm/prefork/scoreboard.h"
      },
      {
        "file": "server/mpm/spmt_os2/scoreboard.h"
      },
      {
        "file": "server/mpm/spmt_os2/spmt_os2.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.h"
      },
      {
        "file": "server/util.c"
      },
      {
        "file": "server/util_charset.c"
      },
      {
        "file": "server/util_date.c"
      },
      {
        "file": "server/util_filter.c"
      },
      {
        "file": "server/util_md5.c"
      },
      {
        "file": "server/util_script.c"
      },
      {
        "file": "server/util_uri.c"
      },
      {
        "file": "server/util_xml.c"
      },
      {
        "file": "server/vhost.c"
      },
      {
        "file": "support/apxs.in"
      },
      {
        "file": "test/test_date.c"
      },
      {
        "file": "test/test_find.c"
      },
      {
        "file": "test/test_parser.c"
      }
    ]
  },
  "f5b55123300ec8e738f80baaae6ff525022ba20f": {
    "message": "getline() fixes...\n\nIf ap_get_brigade() returns APR_SUCCESS but an empty brigade, bail out.\nPreviously, we kept going and sometimes segfaulted while operating on\nwhat we thought was the first bucket.\n\nFree the temporary brigade used by getline().",
    "match": "fixes...\n\nIf ap_get_brigade() returns APR_SUCCESS but an empty brigade, bail out.\nPreviously, we kept going and sometimes segfaulted while operating on\nwhat we thought was the first bucket.\n\nFree the temporary brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "5da43cbcef6646b917d572ea5918e6ac4293dbdc": {
    "message": "Fix a couple of problems related to large request bodies:\n  http_filter() - this was referencing e->length even though e->length\n    is sometimes -1 (if we have to read the socket bucket to get the\n    next bit of the request body); now it does e->read() to force a\n    socket need if required\n  ap_get_client_block() - this was getting a brigade back with the\n    desired amount of data (yeah, right) but only copying out the first\n    bucket",
    "match": "Fix a couple of problems related to large request bodies:\n  http_filter() - this was referencing e->length even though e->length\n    is sometimes -1 (if we have to read the socket bucket to get the\n    next bit of the request body); now it does e->read() to force a\n    socket need if required\n  ap_get_client_block() - this was getting a brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "c1da648935b8113f11adc95bcb952e31cae9a9da": {
    "message": "The newest incarnation of http_filter.  This is far from perfect, but it\nis a step in the right direction.  The idea is that the http_filter knows\nabout the http protocol.  So, it uses that knowledge to discover HTTP\nrequest headers, and sends those headers up to getline.  However, it keeps\nthe request body saved in it's ctx pointer.\n\nLater, when ap_get_client_block is called, we have set the remaining field\nin the conn_rec.  This tells the http_filter how much of the remaining\ndata is request body, and how much isn't.  So, the http_filter can return\nthe request body unparsed up throught ap_get_client_block.\n\nThis doesn't even try to work with chunked input data, and there are still\nsome other bugs in it, but it works for small-ish files in my tests, and\nit lets other people play with the concept of input filters.  I will try\nto play with this more, but others should feel free to hack around in it\ntoo.",
    "match": "remaining field\nin the conn_rec.  This tells the http_filter how much of the remaining\ndata is request body, and how much isn't.  So, the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "5e816d7cc55719a305fd147c46b60a16adaf7f87": {
    "message": "Here it is, the Win32 part of the big canonical errors patch.\n\n  The reason is really, really simple.  If we ever choose to mix clib and\n  dos error codes, they criss-cross and don't line up, but they share the\n  same number space.  As I wrote the new APR_IS_ERROR macros, I realized\n  we were about to shoot ourselves in the foot.\n\n  These changes nearly entirely affect Win32 only.  The next big patch will\n  affect all of the rv == APR_ENOENT type problems throughout the system.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": " dos ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "modules/arch/win32/mod_isapi.c"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "os/win32/mod_isapi.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      },
      {
        "file": "server/mpm/winnt/registry.c"
      },
      {
        "file": "server/mpm/winnt/service.c"
      }
    ]
  },
  "0f1ea8f5f913b5c1fe46517b4732e88b0636f727": {
    "message": "Fix two problems. First we are setting aside the wrong bucket brigade. Second, we need to\ncheck that a setaside routine is defined for the bucket before attempting to call it.  Not sure\nat all if we even want to keep this routine as it does not allow using filter->ctx for other\npurposes.",
    "match": "Fix two problems. First we are setting aside the wrong bucket brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/util_filter.c"
      }
    ]
  },
  "03b11ae6ade7a4a896a2e547e22281b55a896348": {
    "message": "Fix the default logformat and CLF description.\nPR: 6556\nSubmitted by:\tMike Abbott <mja@sgi.com>\nReviewed by:\tJoshua Slive",
    "match": "Fix the default logformat and CLF des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_log_config.html"
      }
    ]
  },
  "79d59d659a802ac0b4622c21e63646bc36d30483": {
    "message": "Cleaner feature tests and new -d -m -s -p options for crypt, MD5, SHA1\n  and plaintext password cyphers.  Not certain what the $^O tag for\n  NETWARE really is, so this may need to be fixed.",
    "match": "plaintext pass",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      },
      {
        "file": "support/dbmmanage"
      }
    ]
  },
  "1740c8332fde78118a84a5344dd76f830b31d2d1": {
    "message": "Fix a security problem that affects certain configurations of mod_rewrite.\nIf the result of a RewriteRule is a filename that contains expansion\nspecifiers, especially regexp backreferences $0..$9 and %0..%9, then it\nmay be possible for an attacker to access any file on the web server.\nThe fix replaces a multi-pass string expander with a one-pass expander,\nand includes the code quality improvements that were committed separately\nto 1.3.\n\nMessage-Id: <E13OQB5-0004Xs-00@hand.dotat.at>",
    "match": "Fix a security problem that affects certain configurations of mod_rewrite.\nIf the result of a RewriteRule is a filename that contains expansion\nspecifiers, especially regexp backreferences $0..$9 and %0..%9, then it\nmay be possible for an attack",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/mappers/mod_rewrite.h"
      }
    ]
  },
  "62bd391c7951632184a136c732cf95ba1ac1da63": {
    "message": "Fix a bug where errors that happen during early request parsing (like 400\nHTTP_BAD_REQUEST) don't send any error message content to the browser.\nThe core_filter wasn't present this early in request parsing, so the output\nwent into the bit bucket via r[v]puts->ap_pass_brigade.\n\nThe chunking filter takes care of itself nicely, because it is added in\nap_send_http_header if it's needed.",
    "match": "Fix a bug where errors that happen during early request parsing (like 400\nHTTP_BAD_REQUEST) don't send any error message content to the browser.\nThe core_filter wasn't present this early in request parsing, so the output\nwent into the bit bucket via r[v]puts->ap_pass_brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      }
    ]
  },
  "4862563ff6cf7d717beb67448ef7b6d7f983f966": {
    "message": "Fix a bug parsing configuration file containers.  With a sequence\nlike this in the config file\n\n       <IfModule mod_kilroy.c>\n       any stuff\n       </IfModule>\n       <IfModule mod_lovejoy.c>\n       (blank line)\n       any stuff\n       </IfModule>\n\nthe second container would be terminated at the blank line due to\nsediment in the buffer from reading the prior </IfModule> and an\nerror message would be generated for the real </IfModule> for the\nsecond container.  Also due to this problem, any two characters\ncould be used for \"</\" in the close of a container.",
    "match": "Fix a bug parsing configuration file containers.  With a sequence\nlike this in the config file\n\n       <IfModule mod_kilroy.c>\n       any stuff\n       </IfModule>\n       <IfModule mod_lovejoy.c>\n       (blank line)\n       any stuff\n       </IfModule>\n\nthe second container would be terminated at the blank line due to\nsediment in the buffer from reading the prior </IfModule> and an\nerror message would be generated for the real </IfModule> for the\nsecond container.  Also due to this problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/config.c"
      }
    ]
  },
  "fb7cc17a4c5fcfa98e3eb370959a08f9bb7e9079": {
    "message": "Fix default Timeout & KeepaliveTimeout. Still need to limit directive\nvalues to prevent integer microsecond overflow.",
    "match": "Fix default Timeout & KeepaliveTimeout. Still need to limit directive\nvalues to prevent integer microsecond overflow",
    "vulnerabilities": [
      "Overflow"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      }
    ]
  },
  "c8c4047dddc606ce51df42a8735cc4da20ac37aa": {
    "message": "fix a few bugs and improve error handling:\n\nintroduce extended error status as a start of more helpful error logging;\n\ninstead of aborting the process when we get a bucket-straddling char too\nwide to handle, trace the problem and return an error;\n\nwhen we get to the end of the brigade and we're still waiting for the rest\nof a character, return an error instead of ignoring the problem;\n\nif we get 0 bytes when reading from a pipe, don't fret (segfault); skip\nover this empty bucket and read the next one;\n\ndon't set done if send_downstream() returns APR_SUCCESS; set it for the\nopposite condition; that bug kept us from processing our entire input\nbrigade for brigades that caused lots of output;",
    "match": "fix a few bugs and improve error handling:\n\nintroduce extended error status as a start of more helpful error logging;\n\ninstead of aborting the process when we get a bucket-straddling char too\nwide to handle, trace the problem and return an error;\n\nwhen we get to the end of the brigade and we're still waiting for the rest\nof a character, return an error instead of ignoring the problem;\n\nif we get 0 bytes when reading from a pipe, don't fret (segfault); skip\nover this empty bucket and read the next one;\n\ndon't set done if send_downstream() returns APR_SUCCESS; set it for the\nopposite condition; that bug kept us from processing our entire input\nbrigade for brig",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/experimental/mod_charset_lite.c"
      }
    ]
  },
  "b79d0218004ad2391d2bf8961f01eb1b66b0cb80": {
    "message": "Install htdocs again.  This was recently removed for an unknown (or at\nleast unmentioned) reason.\n\nCrash course on populating the htdocs directory:\n\ncd myprefix/apache-2.0\ncvs checkout -d htdocs httpd-docs-2.0/htdocs",
    "match": "removed for an unknown (or at\nleast unmentioned) reason.\n\nCrash course on populating the htdocs directory:\n\ncd myprefix/apache-2.0\ncvs checkout -d htdocs http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "Makefile.in"
      }
    ]
  },
  "0a02dce8df90693bbaf8cb3a44cb52cd26a86847": {
    "message": "I am removing my veto and stepping away from this discussion for at least\ntwo days.  This does NOT mean I like the patch at all, it just means I have\nno desire to continue with this discussion right now.  Because I have no\nplans to respond to any more e-mail on the topic currently, I have no right\nto veto a patch.",
    "match": "patch at all, it just means I have\nno des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "STATUS"
      }
    ]
  },
  "48d486494d5be28bea4d3b7403d4a2110697fea2": {
    "message": "Remove const from ap_socket_t parameters on APR functions so that\nAPR can modify the ap_socket_t as it sees fit.  It may choose to\nmodify the ap_socket_t on functions which only read from the ap_socket_t\nconceptually.\n\nNote: http_connection::ap_new_apr_connection() passes its ap_socket_t\narg to one of the changed functions, so const was removed there also.",
    "match": "Remove const from ap_socket_t parameters on APR functions so that\nAPR can modify the ap_socket_t as it sees fit.  It may choose to\nmodify the ap_socket_t on functions which only read from the ap_socket_t\nconceptually.\n\nNote: http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/http_connection.h"
      },
      {
        "file": "server/connection.c"
      }
    ]
  },
  "81ed8ac600575ae10cd4ab77536c3be08ab0702f": {
    "message": "ap_create_pipe was changed to return a pipe with both handles\nblocking (previously, both handles were non-blocking).\n\nap_set_pipe_timeout() is now the only way to manipulate the\nblocking state of the pipe.  Pass -1 for timeout to make it\nblocking; pass 0 for timeout to make it non-blocking.\n\nap_block_pipe() is gone.\n\nA few minor bugs were fixed along the way.\n\nOS-specific notes:\n\nnon-Unix in general:\n\nOnly Unix/BeOS currently has the optimization to keep track of the blocking\nstate.  This is used to avoid syscalls as well as to handle ap_put_os_file(),\nwhich is a case where we don't know the blocking state of the handle we are\ngiven.\n\nOS/2:\n\nap_set_pipe_timeout() with timeout value > 0: The code didn't play with\nthe blocking state before and it doesn't still.  I did add logic for special\ntimeout values 0 and -1 to play with the blocking state.\n\nap_create_pipe():  old logic didn't do anything with the blocking state\nof the second handle; it still doesn't; hopefully it is blocking\n\npre-BONE BEOS:\n\nold code to make a pipe non-blocking was a no-op; now it returns\nAPR_ENOTIMPL\n\nBONE: old code to make a pipe non-blocking; it passed &zero as the\nparm to FIONBIO instead of &one; this bug was fixed\n\nWin32:\n\nThe pipe was always created blocking before; no change\n\npreviously, ap_setprocattr_io() ignored the blocking flag; now it\nrespects it like other platforms and calls ap_set_pipe_timeout(p,0)\non appropriate pipe handles (Bill Stoddard was just working in\nap_set_pipe_timeout(), so I presume this is golden)",
    "match": "fixed along the way.\n\nOS-specific notes:\n\nnon-Unix in general:\n\nOnly Unix/BeOS currently has the optimization to keep track of the blocking\nstate.  This is used to avoid syscalls as well as to handle ap_put_os_file(),\nwhich is a case where we don't know the blocking state of the handle we are\ngiven.\n\nOS/2:\n\nap_set_pipe_timeout() with timeout value > 0: The code didn't play with\nthe blocking state before and it doesn't still.  I did add logic for special\ntimeout values 0 and -1 to play with the blocking state.\n\nap_create_pipe():  old logic didn't do anything with the blocking state\nof the second handle; it still doesn't; hopefully it is blocking\n\npre-BONE BEOS:\n\nold code to make a pipe non-blocking was a no-op; now it returns\nAPR_ENOTIMPL\n\nBONE: old code to make a pipe non-blocking; it passed &zero as the\nparm to FIONBIO instead of &one; this bug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "server/log.c"
      }
    ]
  },
  "1e0fc40d042de8a72dc1e98bb67234158aa9d907": {
    "message": "Back out ap_set_default_perms().  Remove old logic to play with umask\naround the creation of the httpd.pid file.  Pass explicit permissions to\nap_open(), omitting write-ability except by the owning user.  As always,\nwe end up with rw-r--r-- for the permissions unless the umask is something\nunusual.\n\nNote that the OS/2 and Win32 implementations of ap_open() ignore the\npermissions parameter altogether.",
    "match": "Remove old logic to play with umask\naround the creation of the http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/log.c"
      }
    ]
  },
  "b35b92df078529684e4739fdd948b5e7ac880217": {
    "message": "Fix building with DSO support.  If any module is configured to be\ncompiled for shared support then APR_HAS_DSO is enabled and -ldl is\nadded to the LIBS variable.  -ldl may need to be modified based on\nplatform.  If no modules are designated as shared then APR_HAS_DSO is\ndisabled and nothing is added to LIBS.  In basic testing this compiled\nwithout errors or warnings.",
    "match": "Fix building with DSO support.  If any module is configured to be\ncompiled for shared support then APR_HAS_DSO is enabled and -ldl is\nadded to the LIBS variable.  -ldl may need to be modified based on\nplatform.  If no modules are des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/aaa/config.m4"
      }
    ]
  },
  "e88e1af1bb490002b1264ab95f28c359d8215eb9": {
    "message": "Brought mod_auth_digest up to synch with 1.3, fixed ap_time_t-related\nbugs, and changed shmem/locking to use apr API. Shared-mem is currently\ndisabled, however, because of problems with graceful restarts.",
    "match": "fixed ap_time_t-related\nbugs, and changed shmem/locking to use apr API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "modules/aaa/mod_auth_digest.c"
      }
    ]
  },
  "757dcfb18f6ac39f99bfd879e202dfd27d8af6b9": {
    "message": "PR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n  Remove any possiblity of having multiple tags to correct as the version\n  changes.  Split httpd.h's version into tokens.  Roll these tokens into\n  registry.c\n\n  TODO: Remove registry.c from the list of files to touch when rolling",
    "match": "Remove any possiblity of having multiple tags to correct as the version\n  changes.  Split http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      },
      {
        "file": "server/mpm/winnt/registry.c"
      }
    ]
  },
  "ac3dc9263fc3b7b7d1418fa557f06e88ce7963e3": {
    "message": "This patch corrects the issues from the AP_EXPORT and linkage \n  specification arguments to the ap_hooks.h declarations.  As with\n  the APR_ and AP_ patches, API_VAR_EXPORT becomes API_EXPORT_VAR,\n  and MODULE_VAR_EXPORT becomes MODULE_EXPORT_VAR.\n\n  I will be happy to revert the inclusion of ap_config.h from \n  httpd.h if this bothers anyone.  More individual modules need\n  to be patched if we do so.\n\n  The API_EXPORTs all moved into central storage in the ap_config.h\n  header.  Without WIN32 or API_STATIC compile time declarations, \n  these macros remain no-ops.\n\n  This patch also moves the following data from http_main to http_config:\n\n    const char *ap_server_argv0;\n    const char *ap_server_root;\n    ap_array_header_t *ap_server_pre_read_config;\n    ap_array_header_t *ap_server_post_read_config;\n    ap_array_header_t *ap_server_config_defines;\n\n  And the following variables had already moved into ap_hooks.c:\n\n    ap_pool_t *g_pHookPool;  (initialized now in http_config)\n    int g_bDebugHooks;                   (out of http_config)\n    const char *g_szCurrentHookName;     (out of http_config)\n\n  The changes to http_main.c are in preparation for that module to\n  move out to a seperate .exe for win32.  Other platforms will be\n  unaffected, outside of these changes.",
    "match": "remain no-ops.\n\n  This patch also moves the following data from http_main to http_config:\n\n    const char *ap_server_argv0;\n    const char *ap_server_root;\n    ap_array_header_t *ap_server_pre_read_config;\n    ap_array_header_t *ap_server_post_read_config;\n    ap_array_header_t *ap_server_config_defines;\n\n  And the following variables had already moved into ap_hooks.c:\n\n    ap_pool_t *g_pHookPool;  (initialized now in http_config)\n    int g_bDebugHooks;                   (out of http_config)\n    const char *g_szCurrentHookName;     (out of http_config)\n\n  The changes to http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "ApacheCore.dsp"
      },
      {
        "file": "httpd.dsp"
      },
      {
        "file": "include/ap_config.h"
      },
      {
        "file": "include/ap_mpm.h"
      },
      {
        "file": "include/http_config.h"
      },
      {
        "file": "include/http_connection.h"
      },
      {
        "file": "include/http_core.h"
      },
      {
        "file": "include/http_main.h"
      },
      {
        "file": "include/http_protocol.h"
      },
      {
        "file": "include/http_request.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "modules/aaa/mod_access.c"
      },
      {
        "file": "modules/aaa/mod_auth.c"
      },
      {
        "file": "modules/aaa/mod_auth_anon.c"
      },
      {
        "file": "modules/aaa/mod_auth_digest.c"
      },
      {
        "file": "modules/cache/mod_file_cache.c"
      },
      {
        "file": "modules/echo/mod_echo.c"
      },
      {
        "file": "modules/filters/mod_include.c"
      },
      {
        "file": "modules/generators/mod_asis.c"
      },
      {
        "file": "modules/generators/mod_autoindex.c"
      },
      {
        "file": "modules/generators/mod_cgi.c"
      },
      {
        "file": "modules/generators/mod_cgid.c"
      },
      {
        "file": "modules/generators/mod_info.c"
      },
      {
        "file": "modules/generators/mod_status.c"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "modules/http/http_request.c"
      },
      {
        "file": "modules/http/mod_mime.c"
      },
      {
        "file": "modules/loggers/mod_log_config.c"
      },
      {
        "file": "modules/mappers/mod_alias.c"
      },
      {
        "file": "modules/mappers/mod_dir.c"
      },
      {
        "file": "modules/mappers/mod_imap.c"
      },
      {
        "file": "modules/mappers/mod_negotiation.c"
      },
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/mappers/mod_so.c"
      },
      {
        "file": "modules/mappers/mod_speling.c"
      },
      {
        "file": "modules/mappers/mod_vhost_alias.c"
      },
      {
        "file": "modules/metadata/mod_cern_meta.c"
      },
      {
        "file": "modules/metadata/mod_env.c"
      },
      {
        "file": "modules/metadata/mod_expires.c"
      },
      {
        "file": "modules/metadata/mod_headers.c"
      },
      {
        "file": "modules/metadata/mod_setenvif.c"
      },
      {
        "file": "modules/metadata/mod_unique_id.c"
      },
      {
        "file": "modules/metadata/mod_usertrack.c"
      },
      {
        "file": "modules/proxy/mod_proxy.c"
      },
      {
        "file": "modules/proxy/mod_proxy.h"
      },
      {
        "file": "os/win32/os.h"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/connection.c"
      },
      {
        "file": "server/mpm/dexter/dexter.c"
      },
      {
        "file": "server/mpm/mpmt_beos/mpmt_beos.c"
      },
      {
        "file": "server/mpm/mpmt_pthread/mpmt_pthread.c"
      },
      {
        "file": "server/mpm/mpmt_pthread/scoreboard.c"
      },
      {
        "file": "server/mpm/mpmt_pthread/scoreboard.h"
      },
      {
        "file": "server/mpm/prefork/prefork.c"
      },
      {
        "file": "server/mpm/prefork/scoreboard.h"
      },
      {
        "file": "server/mpm/spmt_os2/scoreboard.h"
      },
      {
        "file": "server/mpm/spmt_os2/spmt_os2.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      },
      {
        "file": "server/mpm/winnt/mpm_winnt.h"
      },
      {
        "file": "server/mpm/winnt/registry.c"
      },
      {
        "file": "server/mpm/winnt/service.c"
      }
    ]
  },
  "f223d89d21771b4485c46db1e429912119776ba7": {
    "message": "Win32:\n  install ab.exe\n  fix dependency in Apache.dsw (ab is dependent on aprlib and ap)\n  fix ab and htdigest projects so that they find all header files\n  define ap_signal() in apr.hw - this is o.k. for casual use as with\n    cmd-line programs\n  use API_VAR_EXPORT as appropriate in getopt.c\ngeneral:\n  ab doesn't need to declare ap_optarg/ap_optind; fix a warning\n  htdigest needs to call ap_initialize() to avoid segfault at\n    startup",
    "match": "fix dependency in Apache.dsw (ab is dependent on aprlib and ap)\n  fix ab and htdigest projects so that they find all header files\n  define ap_signal() in apr.hw - this is o.k. for casual use as with\n    cmd-line programs\n  use API",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "Apache.dsw"
      },
      {
        "file": "Makefile.win"
      },
      {
        "file": "support/ab.c"
      },
      {
        "file": "support/ab.dsp"
      },
      {
        "file": "support/htdigest.c"
      },
      {
        "file": "support/htdigest.dsp"
      }
    ]
  },
  "d2a725281559736c331fc8e2b5a6c4626ea5b3f9": {
    "message": "extremely minor cleanup:\napr_file_io.h: fix comment describing APR_OS_DEFAULT\nsockets.c: use socklen_t instead of int to avoid compile\n  warning on systems with unsigned sock len parms\ndexter/.cvsignore: ignore .deps, .libs\nerrorcodes.c: get rid of some unused vars",
    "match": "fix comment des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "server/mpm/dexter/.cvsignore"
      }
    ]
  },
  "417031e2e119454a9c2a0f364a1bb730aa9a43d6": {
    "message": "clean up cmd_parms: config_file is no longer valid; end_token is bogus;\n    add directive.\nmove configfile_t and functions from httpd.h to http_config.h\nnew signature for ap_build_config() (since config_file removed from cmd_parms)\nadd \"data\" to ap_directive_t for future use by modules. add filename.\nsyntax checking for section-close directives: a section-open must exist,\n    the section-close must be </FOO>, and the open/close must match.\n    the file as a whole must be properly balanced (issue errors for each\n    unmatched section-open).\n</FOO> command_rec structures are obsolete. Remove from http_core.c.\ndo not store </FOO> directives in the config tree.\nclean out section-close logic from http_core.c (and old, related comments)\n<Limit> and <LimitExcept> must walk their children.\nnew mechanism in ap_check_cmd_context() for testing enclosure in a\n    Directory/Location/File: find_parent()\n<IfModule> and <IfDefine> must pass cmd->context when walking the children\nseveral places: we had a walk followed by ap_get_module_config(). that\n    assumed the walk would create a config that we could fetch, which is not\n    true -- it is possible that the children are all from other modules\n    (e.g. the <Files> section in httpd.conf-dist has no \"core\" directives).\n    using ap_set_config_vectors() ensures we get a structure, and it returns\n    it to us.\n    [ note: when we had </Directory> (and friends) in the tree, the config\n      would get created; removing the directive removed the config; this\n      was a bitch to track down :-) ]",
    "match": "removed from cmd_parms)\nadd \"data\" to ap_directive_t for future use by modules. add filename.\nsyntax checking for section-close directives: a section-open must exist,\n    the section-close must be </FOO>, and the open/close must match.\n    the file as a whole must be properly balanced (issue errors for each\n    unmatched section-open).\n</FOO> command_rec structures are obsolete. Remove from http_core.c.\ndo not store </FOO> directives in the config tree.\nclean out section-close logic from http_core.c (and old, related comments)\n<Limit> and <LimitExcept> must walk their children.\nnew mechanism in ap_check_cmd_context() for testing enclosure in a\n    Directory/Location/File: find_parent()\n<IfModule> and <IfDefine> must pass cmd->context when walking the children\nseveral places: we had a walk followed by ap_get_module_config(). that\n    assumed the walk would create a config that we could fetch, which is not\n    true -- it is possible that the children are all from other modules\n    (e.g. the <Files> section in http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/http_config.h"
      },
      {
        "file": "include/httpd.h"
      },
      {
        "file": "include/util_cfgtree.h"
      },
      {
        "file": "modules/http/http_core.c"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "b9070f2e11fb12c9c3a2d97cbb16def41de38016": {
    "message": "Server Type is not recognized by any of the current MPMs.  I am removing it\nfrom the sample httpd.conf.",
    "match": "removing it\nfrom the sample http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/conf/httpd-std.conf"
      }
    ]
  },
  "bd5a48fea56bc6838dad3ebf05918efcdafec510": {
    "message": "Get mod_rewrite working with APR locks\n\nThis has been tested on Linux and works (with the caveats:\nmust use --disable-hsregex, must define NO_DBM_REWRITEMAP,\nmust remove Dirks March 14 patch from util.c and httpd_config.c).\n\nSubmitted by:\tPaul Reder\nReviewed by:\tBill Stoddard",
    "match": "remove Dirks March 14 patch from util.c and http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "modules/mappers/mod_rewrite.c"
      },
      {
        "file": "modules/mappers/mod_rewrite.h"
      }
    ]
  },
  "4b0e0942080c21e8342b88509be3e0806518a715": {
    "message": "Another one in the department of fairly useless patches which\nare best described as feature creep. Allows ${ENV} constructs\nin the config file. This avoids the need for mod_perl or\nm4 cleverness whilst mainting some of the usefullness. It\ndoes not do (of course) multiline things or anything that clever.\n\nFeel free to flame me.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "patches which\nare best des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/httpd.h"
      },
      {
        "file": "server/config.c"
      },
      {
        "file": "server/util.c"
      }
    ]
  },
  "10e58106ef98dc1caab17ca4f82af4d37ea2cc32": {
    "message": "Fix description of regex quantifiers.\n\nSubmitted by: Carl van Tast <CvT@netway.at>\nReviewed by: Ralf S. Engelschall\nPR: 5614",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_rewrite.html"
      }
    ]
  },
  "2815a8ae5adbeb4f12bd49d4016d0f47dcd38d54": {
    "message": "Finally, back working on the MPM... Eliminate DOS hole. I can see no easy way\nto time out AcceptEx (a.k.a., accept_and_receive) when a connection is received\nbut no data is sent. So, make AcceptEx just do an accept and leave the receive\nto the other Apache code.",
    "match": " DOS ",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service"
    ],
    "files_changed": [
      {
        "file": "server/mpm/winnt/mpm_winnt.c"
      }
    ]
  },
  "ac6bc848bd5bc5e744a6bb215b9d233c94e6b71d": {
    "message": "Fix the mass vhosting security problem spotted by Lars, as in 1.3\nSubmitted by:\tBen Hyde\nReviewed by:\tTony Finch",
    "match": "Fix the mass vhosting security problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "modules/http/http_protocol.c"
      },
      {
        "file": "server/vhost.c"
      }
    ]
  },
  "b8969fd9ceeff0e08d9aa80e40ec7fcd4183bacd": {
    "message": "Prevent collision with APR symbol of same name.",
    "match": "Prevent collision",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "os/os2/util_os2.c"
      }
    ]
  },
  "b315c34d81b28da8c6b46406f4a7facd85456280": {
    "message": "Remove all but one WIN32 from http_main.  Other minor changes.",
    "match": "Remove all but one WIN32 from http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "include/http_main.h"
      },
      {
        "file": "server/main.c"
      }
    ]
  },
  "bb29070b308d37b0bc5d73add5f762b4c9799004": {
    "message": "Man!  This file vastly improved.  Thanks Dean!\n\nUse the abstraction API_EXPORT_NONSTD for exporting main (aka\napache_main).  Use clear rather than destroy on ptemp as other\n'systolic' pools do.  That also fixing a leak of the first ptemp\ncreated.  Let the destroy of pglobal to all the cleanup.  Meanwhile,\nall exit paths should destroy pglobal so the cleanup/unwind gets run\nand this routine sets a bad example by having many exits that don't -\nanother day.\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": "fixing a leak of the first ptemp\ncreated.  Let the destroy of pglobal to all the cleanup.  Meanwhile,\nall exit paths should des",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "server/main.c"
      }
    ]
  },
  "6850e0f41e3d0be725710ecd22571036f0bb6327": {
    "message": "OS/2 EMX library's select() isn't thread safe so bypass it and go direct to\nthe OS/2 API call. Unfortunately this only works on socket handles which will\nbreak probe_writable_fds() so I'll have to find a way to fix that too.\n\nSubmitted by:\tBrian Havard",
    "match": "API call. Unfortunately this only works on socket handles which will\nbreak probe_writable_fds() so I'll have to find a way to fix",
    "vulnerabilities": [
      "Underprotected APIs"
    ],
    "files_changed": [
      {
        "file": "os/os2/util_os2.c"
      }
    ]
  },
  "464faef4f4eb030727a19ec25e283b01794f00ab": {
    "message": "Fix context description of RedirectMatch. It's also\nuseable in per-dir context - similar to Redirect.\n\nSubmitted by: Klaus Johannes Rusch <KlausRusch@atmedia.net>\nPR: 4611",
    "match": "Fix context des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_alias.html"
      }
    ]
  },
  "9bf12f2ffbdd0e017d94d8b9d5b8587735babd1d": {
    "message": "Fix description of \"Example\" directive. It just activates a demo flag and\ndoesn't really enable the example contents handler.",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_example.html"
      }
    ]
  },
  "6857b46ae0c264ea04e80d6a18aa111d7329877f": {
    "message": "This patch removes the processing of `mxb' parameters in Accept\nheaders in mod_negotiation.  A second patch updates the manual to\nreflect this (mxb is not documented directly in the manual but support\nfor it is implied in one place).\n\nReasons for removing this feature:\n\n1) As currently implemented, the 'mxb' feature makes possible certain\ndenial-of-service attacks on negotiated content.  These attacks are\nposssible for user communities which access an Apache server from\nbehind a HTTP/1.1 proxy which implements `Vary' related optimisations.\nPlugging this denial of service hole without removing `mxb' is fairly\nexpensive in terms of degrading caching efficiency.\n\n2) `mxb' is not in HTTP/1.0 or HTTP/1.1 or any other standard\n\n3) Nobody seems to make use of 'mxb'.  (Balachander Krishnamurthy\nkindly offered to grep some of his web traffic traces -- he did not\nfind a single Accept with mxb in a whole day of recent traffic, nor in\nolder traces)\n\n4) Removing a feature makes a nice change from adding features.\n\nSubmitted by:\tKoen Holtman <Koen.Holtman@cern.ch>",
    "match": "removes the processing of `mxb' parameters in Accept\nheaders in mod_negotiation.  A second patch updates the manual to\nreflect this (mxb is not documented directly in the manual but support\nfor it is implied in one place).\n\nReasons for removing this feature:\n\n1) As currently implemented, the 'mxb' feature makes possible certain\ndenial-of-service attacks on negotiated content.  These attacks are\nposssible for user communities which access an Apache server from\nbehind a HTTP/1.1 proxy which implements `Vary' related optimisations.\nPlugging this denial of service hole without removing `mxb' is fairly\nexpensive in terms of degrading caching efficiency.\n\n2) `mxb' is not in HTTP/1.0 or HTTP",
    "vulnerabilities": [
      "Sensitive Data Exposure",
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/content-negotiation.html"
      },
      {
        "file": "docs/manual/content-negotiation.html.en"
      }
    ]
  },
  "be3aeea1571728455412ad5f7c624e37fdd603e6": {
    "message": "Fix a few minor inconsistencies related to directive scoping\n============================================================\n\n1. httpd -h\n\nUnder \"httpd -h\" one gets a nice English description in which scope a\ndirective can occur. But we talk here only about <Directory> and <Location>,\nalthough <Files> is treated the same (also with `cmd->override ==\nACCESS_CONF|OR_ALL'). So I think it's correct to also list <Files>, too.\n\n2. Used scope variants\n\nCurrently we have 203 directives and they use the following scopes (the\nnumbers in parenthesis gives the number of directives using a particular\nscope):\n\n   RSRC_CONF (106)\n   RSRC_CONF|ACCESS_CONF (5)\n   RSRC_CONF|ACCESS_CONF|OR_ALL (1)            <--\n   RSRC_CONF|ACCESS_CONF|OR_AUTHCFG (2)        <--\n   ACCESS_CONF (5)\n   OR_AUTHCFG (20)\n   OR_LIMIT (3)\n   OR_OPTIONS (4)\n   OR_FILEINFO (21)\n   OR_INDEXES (23)\n   OR_ALL (13)\n\nThis is well spreaded and sounds reasonable. Except for\nthe two classes:\n\n   RSRC_CONF|ACCESS_CONF|OR_ALL (1)\n   RSRC_CONF|ACCESS_CONF|OR_AUTHCFG (2)\n\nThe first one is just a syntax overkill. It means only OR_ALL, because OR_ALL\nincludes (implicitly) already RSRC_CONF and ACCESS_CONF. So, when we fix\nthis to OR_ALL we get:\n\n   RSRC_CONF (106)\n   RSRC_CONF|ACCESS_CONF (5)\n   RSRC_CONF|ACCESS_CONF|OR_AUTHCFG (2)        <--\n   ACCESS_CONF (5)\n   OR_AUTHCFG (20)\n   OR_LIMIT (3)\n   OR_OPTIONS (4)\n   OR_FILEINFO (21)\n   OR_INDEXES (23)\n   OR_ALL (14)\n\nThe remaining RSRC_CONF|ACCESS_CONF|OR_AUTHCFG is used by two directives:\nUseCanonicalName and ContentDigest. Two not too old directives which were\nadded mostly at the same time. They're are implemented the same way.\nBut the scope looks incorrect. Why?\n\nFirst, it's again syntax overkill, ok. We can reduce it to\nRSRC_CONF|OR_AUTHCFG. But when we compare it to all other used scopes, it\nlooks very inconsistent. No other of the 203 directives want to be applicable\nin such a non-orthoginal scope: on the first hand inside the AuthConfig scope\n(which means .htaccess under \"AllowOverride AuthConfig\" plus _INSIDE_ of\n<Directory>/<Location>/<Files> sections in httpd.conf only) and on the other\nhand also in RSRC_CONF (which means _OUTSIDE_ of\n<Directory>/<Location>/<Files> sections in httpd.conf only). Sure, finally\nit's everywhere in httpd.conf plus .htaccess under AuthConfig scope.  But it's\nnot intuitive: Directives which want to be applicable in such a total scope\nuse OR_OPTIONS, OR_FILEINFO or OR_INDEXES. And when we think about\nUseCanonicalName and ContentDigest we find out that they belongs more to\nOptions, XBitHack and CheckSpelling than to any AuthXXXX directives.\n\nSo, I propose to change the scope of those two directives to OR_OPTIONS.  It\nmakes no big difference, of course. It still is useable everwhere inside\nhttpd.conf, but inside .htaccess now under Options instead of AuthConfig.  And\nit both belongs to the more correct group of directives and makes our list of\nused scopes more consistent.\n\nWith the above patch be get this consistent scope-list:\n\n   RSRC_CONF (106)\n   RSRC_CONF|ACCESS_CONF (5)\n   ACCESS_CONF (5)\n   OR_AUTHCFG (20)\n   OR_LIMIT (3)\n   OR_OPTIONS (6)\n   OR_FILEINFO (21)\n   OR_INDEXES (23)\n   OR_ALL (14)\n\nWhen we take into account that _theoretically_ there are a lot more variants\nof these or'ed values are possible, this list is _VERY_ clean. Actually it's\nthe most clean variant I can think of (except for the fact that the whole\nmechanism is a horrible mess ;-)...",
    "match": "Fix a few minor inconsistencies related to directive scoping\n============================================================\n\n1. httpd -h\n\nUnder \"httpd -h\" one gets a nice English des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.html"
      }
    ]
  },
  "9bd54e229683bddd67306abf3ffc432fa5d73c2c": {
    "message": "Make it more clear that AuthName takes a single argument, and fix\n\ta broken example in the FAQ.\n\nPR:\t\t3360\nSubmitted by:\tJonathan Hartzog <jhartzog@w00f.com>",
    "match": "AuthName takes a single argument, and fix\n\ta brok",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "docs/manual/misc/FAQ.html"
      },
      {
        "file": "docs/manual/mod/core.html"
      }
    ]
  },
  "4253176b20af19783da01189dc3918f4e677fbc9": {
    "message": "Add new httpd switches; remove reference to httpd sub-version",
    "match": "remove reference to http",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/invoking.html"
      },
      {
        "file": "docs/manual/invoking.html.en"
      }
    ]
  },
  "11cb1a4280eb0258c2995e355a87ea81d5a102f2": {
    "message": "Fix various parsing bugs with <Dir/Loc/Files> sections.  Improve the\nerror messages generated.  Introduced cmd->end_token to make it easier\nto do nested sections with proper error reporting.  (Note that it can't\nbe used for <IfModule> or <Limit> unfortunately.)\n\nPR#379: <Files> is not allowed within <Location> because it has no effect.\n\nPR#1817: Change <Files> to work with basenames only.  This fixes both\nthe bug introduced by the wildcarding change (* doesn't match /) and\nbugs such as <Files a*b> not working.\n\nPR:             379, 1817",
    "match": "Fix various parsing bugs with <Dir/Loc/Files> sections.  Improve the\nerror messages generated.  Introduced cmd->end_token to make it easier\nto do nested sections with proper error reporting.  (Note that it can't\nbe used for <IfModule> or <Limit> unfortunately.)\n\nPR#379: <Files> is not allowed within <Location> because it has no effect.\n\nPR#1817: Change <Files> to work with basenames only.  This fixes both\nthe bug introduced by the wildcarding change (* doesn't match /) and\nbug",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.html"
      }
    ]
  },
  "4b319f37a0ae7d5c146299c67e376ed4dd87f50b": {
    "message": "Misc cleanups:\n\t- cleanup HTML, <e> --> <em>\n\t- remove bogus security warning about LockFile\n\t- add warning about possible denial of service attack with\n\t  LockFile in world writable directory\n\t- remove security encouragement to use inetd; add warning that\n\t  inetd isn't well supported.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:",
    "match": " denial of service",
    "vulnerabilities": [
      "Distributed Denial-of-Service / Denial-of-Service",
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/core.html"
      }
    ]
  },
  "82ff117c81d8981d6a2a205f27a59959b1427923": {
    "message": "Fix description of DirectoryIndex to explain that a directory index will\nonly be returned if Options +Indexes is set.",
    "match": "Fix des",
    "vulnerabilities": [
      "Sensitive Data Exposure"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_autoindex.html"
      },
      {
        "file": "docs/manual/mod/mod_dir.html"
      }
    ]
  },
  "484e0d25739020e55bc0f38de24d3ecf5b53e780": {
    "message": "Fix typo; add section about SOCKS 4.2/Solaris problems.",
    "match": "Fix typo; add section about SOCKS 4.2/Solaris problem",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "docs/manual/mod/mod_proxy.html"
      }
    ]
  }
}