{
  "78efb337adc1105adbc2a48ec3afd9a327d914a1": {
    "message": "Literature Review update (CVE, CWE, Mining Software Repositories)",
    "match": "CVE",
    "vulnerabilities": [
      "Miscellaneous"
    ],
    "files_changed": [
      {
        "file": "dissertation/acb16zje.bcf",
        "diff": "--- \n+++ \n@@ -1985,22 +1985,25 @@\n     <bcf:citekey order=\"8\">wheeler_2015</bcf:citekey>\n     <bcf:citekey order=\"9\">cowan_2003</bcf:citekey>\n     <bcf:citekey order=\"10\">witten_2001</bcf:citekey>\n-    <bcf:citekey order=\"11\">owasp_home</bcf:citekey>\n-    <bcf:citekey order=\"12\">owasp_top10</bcf:citekey>\n-    <bcf:citekey order=\"13\">pietraszek_2006</bcf:citekey>\n-    <bcf:citekey order=\"14\">othmane_2015</bcf:citekey>\n-    <bcf:citekey order=\"15\">huluka_2012</bcf:citekey>\n-    <bcf:citekey order=\"16\">balzarotti_2006</bcf:citekey>\n-    <bcf:citekey order=\"17\">lindqvist_1999</bcf:citekey>\n-    <bcf:citekey order=\"18\">hansman_2005</bcf:citekey>\n-    <bcf:citekey order=\"19\">matsushita_2005</bcf:citekey>\n+    <bcf:citekey order=\"11\">cve</bcf:citekey>\n+    <bcf:citekey order=\"12\">cwe</bcf:citekey>\n+    <bcf:citekey order=\"13\">cwe_faq</bcf:citekey>\n+    <bcf:citekey order=\"14\">owasp_home</bcf:citekey>\n+    <bcf:citekey order=\"15\">owasp_top10</bcf:citekey>\n+    <bcf:citekey order=\"16\">pietraszek_2006</bcf:citekey>\n+    <bcf:citekey order=\"17\">othmane_2015</bcf:citekey>\n+    <bcf:citekey order=\"18\">huluka_2012</bcf:citekey>\n+    <bcf:citekey order=\"19\">balzarotti_2006</bcf:citekey>\n     <bcf:citekey order=\"20\">cadariu_2015</bcf:citekey>\n     <bcf:citekey order=\"21\">owasp_dependency</bcf:citekey>\n-    <bcf:citekey order=\"22\">secbench</bcf:citekey>\n-    <bcf:citekey order=\"23\">reis_2017</bcf:citekey>\n-    <bcf:citekey order=\"24\">pygithub</bcf:citekey>\n-    <bcf:citekey order=\"25\">gitpython</bcf:citekey>\n-    <bcf:citekey order=\"26\">secbench</bcf:citekey>\n+    <bcf:citekey order=\"22\">lindqvist_1999</bcf:citekey>\n+    <bcf:citekey order=\"23\">hansman_2005</bcf:citekey>\n+    <bcf:citekey order=\"24\">kagdi_2007</bcf:citekey>\n+    <bcf:citekey order=\"25\">hassan_2008</bcf:citekey>\n+    <bcf:citekey order=\"26\">matsushita_2005</bcf:citekey>\n+    <bcf:citekey order=\"27\">williams_2005</bcf:citekey>\n+    <bcf:citekey order=\"28\">secbench</bcf:citekey>\n+    <bcf:citekey order=\"29\">reis_2017</bcf:citekey>\n   </bcf:section>\n   <!-- SORTING TEMPLATES -->\n   <bcf:sortingtemplate name=\"nty\">\n"
      },
      {
        "file": "dissertation/acb16zje.pdf",
        "diff": "binary"
      },
      {
        "file": "dissertation/acb16zje.synctex.gz",
        "diff": "binary"
      },
      {
        "file": "dissertation/acb16zje.tex",
        "diff": "--- \n+++ \n@@ -127,7 +127,7 @@\n \r\n \\section{Challenges}\r\n \\begin{itemize}\r\n-\t\\item \\textbf{Data}: There are a large numbers of open source repositories available on GitHub.\r\n+\t\\item \\textbf{Data}: There are a large number of open source repositories available on GitHub.\r\n \tHowever, it is challenging to find a set of sample repositories that can produce accurate and\r\n \tconsistent results.\r\n \t\\item \\textbf{Misclassification}: Commit messages for a same vulnerability patch are not always\r\n@@ -198,10 +198,27 @@\n Witten, Landwehr, and Caloyannides \\cite{witten_2001} stated that code review is the most effective\r\n method to improve system security and deduced that closed source systems could reach the same\r\n security level as open source systems if there were sufficient review processes being carried out.\r\n-In recent years, the growing popularity of open source softwares has attracted a large numbers of\r\n+In recent years, the growing popularity of open source softwares has attracted a large number of\r\n people to join the community. Some open source softwares are now believed to have better quality as\r\n compared to their respective closed source softwares. However, this argument has yet to be proven in\r\n a formal way.\r\n+\r\n+\\section{Common Vulnerabilities and Exposures}\r\n+The Common Vulnerabilities and Exposures (\\textbf{CVE}) is a project launched by Mitre Corporation\r\n+and sponsored by the National Cyber Security Division of the United States Department of Homeland\r\n+Security \\cite{cve}. The \\textbf{CVE} system provides the computer security community with a\r\n+complete list of publicly known security vulnerabilities, and each vulnerability is identified by a\r\n+unique \\textbf{CVE} ID number. It is now the standardised solution and industry-recognised standard\r\n+for identifying vulnerabilities and exposures.\r\n+\r\n+\\section{Common Weakness Enumeration}\r\n+The Common Weakness Enumeration (\\textbf{CWE}) is another project of Mitre Corporation \\cite{cwe}\r\n+that organises the software weaknesses into a list of different categories, known as the\r\n+\\textbf{CWE} list. Software weaknesses are defined as the errors that can lead to software\r\n+vulnerabilities, which includes buffer overflows, authentication errors, code injection, etc.\r\n+\\cite{cwe_faq}. The \\textbf{CWE} is now a formal standard for representing software weaknesses. Each\r\n+entry in the \\textbf{CWE} are identified by a unique ID number, and contained detailed information\r\n+about the specific weakness.\r\n \r\n \\section{Security Issues in Open Source Softwares}\r\n The Open Web Application Security Project (\\textbf{OWASP}) is a worldwide non-profit organization\r\n@@ -238,6 +255,12 @@\n maintened by different developers or organisations hence it is unable to guarantee that all the\r\n components used will be provided with the latest security patch.\r\n \r\n+Cadariu et al. \\cite{cadariu_2015} used \\textbf{OWASP} Dependency Check tool \\cite{owasp_dependency}\r\n+to find all known vulnerabilities in proprietary softwares written in Java. However, their results\r\n+contained a considerable amount of both false positives and false negatives, which directly affected\r\n+the precision of their technique. Therefore, it is also expected that the final results produced in\r\n+this project might encounter the same problem.\r\n+\r\n \\section{Vulnerabilities Classification Techniques}\r\n Many classification techniques of computer attacks have been introduced before open source became\r\n popular, and these early works have significant influence on the later work of finding and\r\n@@ -247,20 +270,33 @@\n attacks. Hansman and Hunt \\cite{hansman_2005} adapted the ideas of Lindqvist and Jonsson and\r\n suggested the concept of dimensions, where they categorised the attacks into several layers.\r\n \r\n-\\section{Related Work}\r\n+\\section{Mining Software Repositories}\r\n+Mining Software Repositories (\\textbf{MSR}) is a process of collecting and analysing big data from\r\n+repositories, which includes version control repositories, mailing list repositories, and bug\r\n+tracking repositories. The purpose of mining software repositories is to extract practical\r\n+information from rich metadata and discover hidden trends about a specific evolutionary\r\n+characteristic \\cite{kagdi_2007}. The information collected could be used in various development\r\n+process. For example, some developers could gain insight by mining repositories, which may help them\r\n+to enhance their software quality based on previous implementation evidence of other developers\r\n+\\cite{hassan_2008}.\r\n+\r\n Matsushita, Sasaki, and Inoue \\cite{matsushita_2005} developed a system known as CoxR that is able\r\n to analyse open source repositories to search for code fragments, files and commit logs through the\r\n keywords provided. The CoxR system has an integrated analysis module, and the module consists of two\r\n functions: lexical analysis function and token comparing function. Although the main objective of\r\n CoxR system is not about finding security related commits in open source repositories, the\r\n-methodology of CoxR system for searching the commit log is suitable to be used as an implementation\r\n-reference.\r\n-\r\n-Cadariu et al. \\cite{cadariu_2015} used \\textbf{OWASP} Dependency Check tool \\cite{owasp_dependency}\r\n-to find all known vulnerabilities in proprietary softwares written in Java. However, their results\r\n-contained a considerable amount of both false positives and false negatives, which directly affected\r\n-the precision of their technique. Therefore, it is also expected that the final results produced in\r\n-this project might encounter the same problem.\r\n+methodology of CoxR system for searching the commit history is suitable to be used as an\r\n+implementation reference.\r\n+\r\n+Williams and Hollingsworth \\cite{williams_2005} developed a source code analysis tool that searches\r\n+for bug fixes and combines with information mined from repositories to improve the results. It is\r\n+stated that the most efficient way to utilise the historical information is to ignore the commit\r\n+messages and focus on mining the code changes. In order to locate the actual code changes for the\r\n+bug fix, a function return value checker was implemented to compares the number of warnings produced\r\n+by a same function across different versions. Williams and Hollingsworth assumed that a bug is fixed\r\n+if the warnings produced by the same function have decreased between two versions, and the final\r\n+result produced is a list of functions that are related to a potential bug fix in the commit\r\n+history.\r\n \r\n This project extends prior work on Reis and Abreu's \\cite{secbench} Secbench Mining Tool. The tool\r\n aims to find vulnerabilities patch in GitHub repositories by using specific regular expressions for\r\n@@ -268,7 +304,9 @@\n cases are evaluated manually. Reis and Abreu \\cite{reis_2017} discussed the procedure of the\r\n evaluation and explained that human errors could occur due to source code complexity and similarity\r\n of vulnerability pattern. The approach of Secbench Mining Tool is similar to the concept of this\r\n-project. However, it is not practical to perform manual evaluation on every result.\r\n+project. However, it is not practical to perform manual evaluation on every result. In this project,\r\n+the tool developed should be able to automate the evaulation process to some extent, while\r\n+preserving the accuracy of the results.\r\n \r\n \\chapter{Requirements and Analysis}\r\n The purpose of this chapter is to express the aims in more details, and discuss the problems to be\r\n@@ -284,12 +322,13 @@\n \t\t\t\\hline\r\n \t\t\t\\rowcolor[HTML]{D8D8D8}\r\n \t\t\t\\multicolumn{1}{|c|}{Criteria} & Importance \\\\ \\hline\r\n-\t\t\t\\textbf{Compatibility}: The mining tool should be able to run on all machines that meet the system requirements. & Essential \\\\ \\hline\r\n+\t\t\t\\textbf{Compatibility}: The mining tool should be able to run on all machines that meet the\r\n+\t\t\tsystem requirements. & Essential \\\\ \\hline\r\n \t\t\t\\textbf{Completeness}: The mining tool should be able to find all commits that match the\r\n \t\t\tregular expressions. & Essential \\\\ \\hline\r\n \t\t\t\\textbf{Repeatable}: The results should be repeatable and reproducible. & Essential \\\\ \\hline\r\n \t\t\t\\textbf{Automated Evaluation} The process of classifying and evaluating the commits into\r\n-\t\t\tdifferent vulnerabilities patch should be automated. & Desirable \\\\ \\hline\r\n+\t\t\tdifferent vulnerabilities patch should be automated to a certain extent. & Desirable \\\\ \\hline\r\n \t\t\t\\end{tabular}\r\n \t\t\\captionof{table}{Criteria to be met in this project} \\label{table:criteria}\r\n \t\\end{center}\r\n@@ -297,33 +336,33 @@\n \r\n % According to \\hyperref[table:celltable]{\\textbf{Table 3.1}}, \\ref{table:celltable}\r\n \r\n-\\section{Problems}\r\n-As mentioned in \\hyperref[sec:objectives]{\\textbf{Section 1.2}}, the repository mining tool must be\r\n-able to detect commits that contain distinct patterns such as \\textit{fix}, \\textit{patch},\r\n-\\textit{vulnerability} etc. After extracting a possible list of commits, it should perform an\r\n-evaluation process to identify the actual commits that fixed security vulnerability.\tThis could be\r\n-hard because not all open source software repositories are using the same programming language.\r\n-Hence, it might be difficult to determine the actual lines of code that addressed the\r\n-vulnerabilities.\r\n-\r\n-One of the major challenges in this project is the classification or evaluation of the\r\n-vulnerabilities.\r\n-\r\n-\\section{Proposed Method}\r\n-Build a command-line interface program that is able to run two separate process: the mining process\r\n-and the evaluation process. The \\textbf{mining} process takes a Git repository as input, searches\r\n-through the commit log, and return the list of commits that might potentially contain a patch as a\r\n-log file (JSON, HTML, etc.). The \\textbf{evaluation} process takes a log file as input, and check\r\n-the code difference of every commit in the log file to identify the real patches.\r\n-\r\n-\\section{Tools}\r\n-\\begin{itemize}\r\n-\t\\item PyGithub is a Python library build to access the GitHub API \\cite{pygithub}.\r\n-\t\\item GitPython is a Python library build to interact with Git repositories using a combination of\r\n-\tpython and git command implementation \\cite{gitpython}.\r\n-\t\\item Secbench Mining Tool is a repository mining tool build by The Quasar Research Group to mine\r\n-\tvulnerability patterns from GitHub repositories \\cite{secbench}.\r\n-\\end{itemize}\r\n+% \\section{Problems}\r\n+% As mentioned in \\hyperref[sec:objectives]{\\textbf{Section 1.2}}, the repository mining tool must be\r\n+% able to detect commits that contain distinct patterns such as \\textit{fix}, \\textit{patch},\r\n+% \\textit{vulnerability} etc. After extracting a possible list of commits, it should perform an\r\n+% evaluation process to identify the actual commits that fixed security vulnerability.\tThis could be\r\n+% hard because not all open source software repositories are using the same programming language.\r\n+% Hence, it might be difficult to determine the actual lines of code that addressed the\r\n+% vulnerabilities.\r\n+\r\n+% One of the major challenges in this project is the classification or evaluation of the\r\n+% vulnerabilities.\r\n+\r\n+% \\section{Proposed Method}\r\n+% Build a command-line interface program that is able to run two separate process: the mining process\r\n+% and the evaluation process. The \\textbf{mining} process takes a Git repository as input, searches\r\n+% through the commit log, and return the list of commits that might potentially contain a patch as a\r\n+% log file (JSON, HTML, etc.). The \\textbf{evaluation} process takes a log file as input, and check\r\n+% the code difference of every commit in the log file to identify the real patches.\r\n+\r\n+% \\section{Tools}\r\n+% \\begin{itemize}\r\n+% \t\\item PyGithub is a Python library build to access the GitHub API \\cite{pygithub}.\r\n+% \t\\item GitPython is a Python library build to interact with Git repositories using a combination of\r\n+% \tpython and git command implementation \\cite{gitpython}.\r\n+% \t\\item Secbench Mining Tool is a repository mining tool build by The Quasar Research Group to mine\r\n+% \tvulnerability patterns from GitHub repositories \\cite{secbench}.\r\n+% \\end{itemize}\r\n \r\n % \\chapter{Design}\r\n \r\n"
      },
      {
        "file": "dissertation/references.bib",
        "diff": "--- \n+++ \n@@ -75,6 +75,30 @@\n \tissn={0360-0300}\r\n }\r\n \r\n+@misc{cve,\r\n+  organization={Mitre Corporation},\r\n+  title={CVE \u2013 Home},\r\n+  date={2018-01-17},\r\n+\turl={https://cve.mitre.org/about/index.html},\r\n+  urldate={2018-10-09},\r\n+}\r\n+\r\n+@misc{cwe_faq,\r\n+  organization={Mitre Corporation},\r\n+  title={CVE \u2013 Frequently Asked Question (FAQ)},\r\n+  date={2018-03-30},\r\n+\turl={https://cwe.mitre.org/about/faq.html#A.1},\r\n+  urldate={2018-10-09},\r\n+}\r\n+\r\n+@misc{cwe,\r\n+  organization={Mitre Corporation},\r\n+  title={CVE \u2013 About CWE},\r\n+  date={2018-03-30},\r\n+\turl={https://cwe.mitre.org/about/index.html},\r\n+  urldate={2018-10-09},\r\n+}\r\n+\r\n @inproceedings{dabbish_2012,\r\n   author={Laura Dabbish and Colleen Stuart and Jason Tsay and Jim Herbsleb},\r\n   publisher={ACM},\r\n@@ -102,6 +126,17 @@\n   year={2005-01-28},\r\n   doi={10.1016/j.cose.2004.06.011},\r\n   issn={0167-4048},\r\n+}\r\n+\r\n+@inproceedings{hassan_2008,\r\n+  author={Ahmed E Hassan},\r\n+  organization={IEEE},\r\n+  title={The road ahead for mining software repositories},\r\n+  booktitle={2008 Frontiers of Software Maintenance},\r\n+  pages={48-57},\r\n+  year={2008},\r\n+  month={9},\r\n+  doi={10.1109/FOSM.2008.4659248}\r\n }\r\n \r\n @article{hoepman_2007,\r\n@@ -127,6 +162,18 @@\n   isbn={978-1-908320-04-9}\r\n }\r\n \r\n+@article{kagdi_2007,\r\n+  author={Huzefa Kagdi and Michael L Collard and Jonathan I Maletic},\r\n+  publisher={Wiley Online Library},\r\n+  title={A survey and taxonomy of approaches for mining software repositories in the context of software evolution},\r\n+  journal={Journal of software maintenance and evolution: Research and practice},\r\n+  volume={19},\r\n+  number={2},\r\n+  pages={77-131},\r\n+  date={2007-03-29},\r\n+  doi={10.1002/smr.344}\r\n+}\r\n+\r\n @inproceedings{lindqvist_1999,\r\n   author={Ulf Lindqvist and Erland Jonsson},\r\n   publisher={IEEE},\r\n@@ -280,6 +327,20 @@\n   urldate={2018-09-18},\r\n }\r\n \r\n+@article{williams_2005,\r\n+  author={Chadd C Williams and Jeffrey K Hollingsworth},\r\n+  publisher={IEEE},\r\n+  title={Automatic mining of source code repositories to improve bug finding techniques},\r\n+  journal={IEEE Transactions on Software Engineering},\r\n+  volume={31},\r\n+  number={6},\r\n+  pages={466-480},\r\n+  date={2005},\r\n+  month={6},\r\n+  doi={10.1109/TSE.2005.63},\r\n+  issn={0098-5589}\r\n+}\r\n+\r\n @article{witten_2001,\r\n   author={Brian Witten and Carl Landwehr and Michael Caloyannides},\r\n   publisher={IEEE},\r\n"
      }
    ]
  },
  "6404ed205b581dde4bd94dfd9ee4a1a513dafd2a": {
    "message": "Literature Review: Broken Authentication",
    "match": "Broken Auth",
    "vulnerabilities": [
      "Broken Authentication and Session Management"
    ],
    "files_changed": [
      {
        "file": "dissertation/acb16zje.bcf",
        "diff": "--- \n+++ \n@@ -1979,18 +1979,19 @@\n     <bcf:citekey order=\"2\">dabbish_2012</bcf:citekey>\n     <bcf:citekey order=\"3\">arora_2005</bcf:citekey>\n     <bcf:citekey order=\"4\">linux_repo</bcf:citekey>\n-    <bcf:citekey order=\"5\">pygithub</bcf:citekey>\n-    <bcf:citekey order=\"6\">gitpython</bcf:citekey>\n-    <bcf:citekey order=\"7\">secbench</bcf:citekey>\n-    <bcf:citekey order=\"8\">payne_2002</bcf:citekey>\n-    <bcf:citekey order=\"9\">hoepman_2007</bcf:citekey>\n-    <bcf:citekey order=\"10\">schryen_2011</bcf:citekey>\n-    <bcf:citekey order=\"11\">wheeler_2015</bcf:citekey>\n-    <bcf:citekey order=\"12\">cowan_2003</bcf:citekey>\n-    <bcf:citekey order=\"13\">othmane_2015</bcf:citekey>\n-    <bcf:citekey order=\"14\">owasp_home</bcf:citekey>\n-    <bcf:citekey order=\"15\">owasp_top10</bcf:citekey>\n-    <bcf:citekey order=\"16\">pietraszek_2006</bcf:citekey>\n+    <bcf:citekey order=\"5\">payne_2002</bcf:citekey>\n+    <bcf:citekey order=\"6\">hoepman_2007</bcf:citekey>\n+    <bcf:citekey order=\"7\">schryen_2011</bcf:citekey>\n+    <bcf:citekey order=\"8\">wheeler_2015</bcf:citekey>\n+    <bcf:citekey order=\"9\">cowan_2003</bcf:citekey>\n+    <bcf:citekey order=\"10\">othmane_2015</bcf:citekey>\n+    <bcf:citekey order=\"11\">owasp_home</bcf:citekey>\n+    <bcf:citekey order=\"12\">owasp_top10</bcf:citekey>\n+    <bcf:citekey order=\"13\">pietraszek_2006</bcf:citekey>\n+    <bcf:citekey order=\"14\">huluka_2012</bcf:citekey>\n+    <bcf:citekey order=\"15\">pygithub</bcf:citekey>\n+    <bcf:citekey order=\"16\">gitpython</bcf:citekey>\n+    <bcf:citekey order=\"17\">secbench</bcf:citekey>\n   </bcf:section>\n   <!-- SORTING TEMPLATES -->\n   <bcf:sortingtemplate name=\"nty\">\n"
      },
      {
        "file": "dissertation/acb16zje.synctex.gz",
        "diff": "binary"
      },
      {
        "file": "dissertation/acb16zje.tex",
        "diff": "--- \n+++ \n@@ -66,18 +66,30 @@\n \r\n \\newpage\r\n \r\n-% \\chapter*{Abstract} \\addcontentsline{toc}{chapter}{Abstract}\r\n-\r\n-% \\chapter*{Acknowledgements} \\addcontentsline{toc}{chapter}{Acknowledgements} I would like to thank\r\n-% my family for...\r\n-\r\n-% \\newpage\r\n+% \\chapter*{Abstract}\r\n+% \\addcontentsline{toc}{chapter}{Abstract}\r\n+\r\n+\\chapter*{Acknowledgements}\r\n+\\addcontentsline{toc}{chapter}{Acknowledgements}\r\n+I would firstly like to thank my parents for their unconditional love and the full financial supoprt\r\n+throughout my university life. It would not be possible for me to finish this project and my course\r\n+without them.\r\n+\r\n+I would also like to thank my supervisor, Dr. Achim Brucker, who are continuously providing\r\n+constructive advice for my project. I am honoured to work with you, and I look forward for more\r\n+working opportunities with you in the future.\r\n+\r\n+Finally, I would like to thank my friends: Jia Hua, Wei Kin, Justin and Grace, who have spent\r\n+countless sleepless night with me in the Diamond for the past two years. It was a truly memorable\r\n+and unforgettable experience. I am glad to have them as my friends.\r\n+\r\n+\\newpage\r\n \r\n \\tableofcontents\r\n \r\n-% \\listoffigures \\addcontentsline{toc}{chapter}{List of Figures}\r\n-\r\n-% \\listoftables \\addcontentsline{toc}{chapter}{List of Tables}\r\n+\\listoffigures \\addcontentsline{toc}{chapter}{List of Figures}\r\n+\r\n+\\listoftables \\addcontentsline{toc}{chapter}{List of Tables}\r\n \r\n \\newpage\r\n \r\n@@ -99,9 +111,9 @@\n helpful. However, Arora and Telang \\cite{arora_2005} stated that some open source developers believe\r\n that public disclosure of security vulnerabilities patch is dangerous, and thus vulnerability fixing\r\n commits are not commonly identified in some open source software repositories to prevent malicious\r\n-exploits. Hence, a repository mining tool that investigate vulnerability patterns and\r\n-identify vulnerable software components can be developed to reduce the time and cost required to\r\n-mitigate the vulnerabilities.\r\n+exploits. Hence, a repository mining tool that investigate vulnerability patterns and identify\r\n+vulnerable software components can be developed to reduce the time and cost required to mitigate the\r\n+vulnerabilities.\r\n \r\n \\section{Objectives}\r\n \\label{sec:objectives}\r\n@@ -109,9 +121,11 @@\n \t\\item Identify the security patterns of the most popular security issues in OWASP Top Ten Project.\r\n \tThe patterns should be expressed using regular expressions.\r\n \t\\item Develop a repository mining tool to search through the commit history of a repository and\r\n-\tfind a list of commit messages that match the patterns.\r\n+\tfind a list of commit messages that match the patterns. The list should be produced in a suitable\r\n+\tfile format such as JSON, XML, or CSV.\r\n \t\\item Extend the mining tool which checks the code difference in the commits found to obtain the\r\n-\tactual commits fixing the security vulnerabilities.\r\n+\tactual commits fixing the security vulnerabilities. This extension should separate from the mining\r\n+\tprocess to make the mining results easier to verify and debug.\r\n \\end{itemize}\r\n \r\n \\section{Challenges}\r\n@@ -119,9 +133,13 @@\n \t\\item \\textbf{Data}: There are a large numbers of open source repositories available on GitHub.\r\n \tHowever, it is challenging to find a set of sample repositories that can produce accurate and\r\n \tconsistent results.\r\n-\t\\item \\textbf{Evaluation}: After mining a list of commit messages that contain the identified\r\n-\tpatterns, the evaluation process might not correctly locate the lines of code that addressed the\r\n-\tsecurity vulnerability.\r\n+\t\\item \\textbf{Misclassification}: Commit messages for a same vulnerability patch are not always\r\n+\tthe same, thus misclassification of commit messages is inevitable. Using regular expressions to\r\n+\tmatch the patterns in the mining process does not guarantee correctness of the result.\r\n+\t\\item \\textbf{Evaluation}: After mining a list of commits that contain the identified patterns in\r\n+\tits message, the evaluation process might not correctly locate the lines of code that addressed\r\n+\tthe security vulnerability. It might be required to perform manual evaluation to correctly\r\n+\tidentify some of the results.\r\n \t\\item \\textbf{Time}: Large repository such as Linux which has more than 780,000 commits in total\r\n \t\\cite{linux_repo} could be extremely time-consuming for the repository mining tool to complete the\r\n \tsearch and evaluation process.\r\n@@ -156,89 +174,6 @@\n softwares quality by reducing the time and effort needed to locate and fix security vulnerabilities\r\n in the source code.\r\n \r\n-\\chapter{Analysis}\r\n-The purpose of this chapter is to discuss the problems to be solved and consider some of the core\r\n-decisions to be made before starting the implementation.\r\n-\r\n-\\section{Problems}\r\n-As mentioned in \\hyperref[sec:objectives]{\\textbf{Section 1.2}}, the repository mining tool must be\r\n-able to detect commits that contain distinct patterns such as \\textit{fix}, \\textit{patch},\r\n-\\textit{vulnerability} etc. After extracting a possible list of commits, it should perform an\r\n-evaluation process to identify the actual commits that fixed security vulnerability.\tThis could be\r\n-hard because not all open source software repositories are using the same programming language.\r\n-Hence, it might be difficult to determine the actual lines of code that addressed the\r\n-vulnerabilities.\r\n-\r\n-\\section{Proposed Method}\r\n-Build a command-line interface program that is able to run two separate process: the mining process\r\n-and the evaluation process. The \\textbf{mining} process takes a Git repository as input, searches\r\n-through the commit log, and return the list of commits that might potentially contain a patch as a\r\n-log file (JSON, HTML, etc.). The \\textbf{evaluation} process takes a log file as input, and check\r\n-the code difference of every commit in the log file to identify the real patches.\r\n-\r\n-\\section{Tools}\r\n-\\begin{itemize}\r\n-\t\\item PyGithub is a Python library build to access the GitHub API \\cite{pygithub}.\r\n-\t\\item GitPython is a Python library build to interact with Git repositories using a combination of\r\n-\tpython and git command implementation \\cite{gitpython}.\r\n-\t\\item Secbench Mining Tool is a repository mining tool build by The Quasar Research Group to mine\r\n-\tvulnerability patterns from GitHub repositories \\cite{secbench}.\r\n-\\end{itemize}\r\n-\r\n-\\section{Plan of Action}\r\n-\\subsection{Semester 1}\r\n-\\begin{ganttchart}[\r\n-\t\thgrid=true,\r\n-\t\tvgrid={draw=none, dotted},\r\n-\t\texpand chart=\\textwidth\r\n-\t]{1}{12}\r\n-\t\\gantttitle{Semester 1}{12} \\\\\r\n-\t\\gantttitlelist{1,...,12}{1} \\\\\r\n-\t\\ganttbar{Background Reading}{1}{10} \\\\\r\n-\t\\ganttbar{Introduction}{1}{1} \\\\\r\n-\t\\ganttbar{Analysis}{1}{1} \\\\\r\n-\t\\ganttbar{Literature Review}{2}{4} \\\\\r\n-\t\\ganttbar{Requirements and Analysis}{5}{6} \\\\\r\n-\t\\ganttbar{Proof reading and amendment}{7}{9} \\\\\r\n-\t\\ganttbar{Design and Implement}{10}{12}\r\n-\t\\ganttlink{elem2}{elem3}\r\n-\t\\ganttlink{elem3}{elem4}\r\n-\t\\ganttlink{elem4}{elem5}\r\n-\t\\ganttlink{elem5}{elem6}\r\n-\\end{ganttchart}\r\n-\r\n-\\begin{itemize}\r\n-\t\\item \\textbf{Week 7}: Starting from this week, discuss with the supervisor weekly about the\r\n-\tdocument, also it is best to start the design stage early, and show the prototype to the\r\n-\tsupervisor.\r\n-\\end{itemize}\r\n-\r\n-\\subsection{Semester 2}\r\n-\\begin{ganttchart}[\r\n-\thgrid=true,\r\n-\tvgrid={draw=none, dotted},\r\n-\texpand chart=\\textwidth\r\n-]{1}{12}\r\n-\\gantttitle{Semester 2}{12} \\\\\r\n-\\gantttitlelist{1,...,12}{1} \\\\\r\n-\\ganttbar{Design}{1}{1} \\\\\r\n-\\ganttbar{Implement prototype}{2}{4} \\\\\r\n-\\ganttbar{Testing prototype}{3}{6} \\\\\r\n-\\ganttbar{Write dissertation}{7}{9} \\\\\r\n-\\ganttbar{Submit project}{10}{10} \\\\\r\n-\\ganttbar{Poster session}{11}{11}\r\n-\\ganttlink{elem0}{elem1}\r\n-\\ganttlink{elem2}{elem3}\r\n-\\ganttlink{elem3}{elem4}\r\n-\\ganttlink{elem4}{elem5}\r\n-\\end{ganttchart}\r\n-\r\n-\\begin{itemize}\r\n-\t\\item \\textbf{Week 1}: Finished the design and started implementation during holiday.\r\n-\t\\item \\textbf{Week 2}: The implementing and testing stage is a repetitive process. It is very\r\n-\tlikely that the program will run into errors in the testing and had to spend more time fixing it.\r\n-\\end{itemize}\r\n-\r\n \\chapter{Literature Review}\r\n This chapter will start with the background contents of the project, and then focus on discussing\r\n the security aspect of open source softwares. Lastly, previous and existing relevant work are\r\n@@ -268,11 +203,11 @@\n \r\n \\section{Security Issues in Open Source Softwares}\r\n The Open Web Application Security Project (\\textbf{OWASP}) is a worldwide non-profit organization\r\n-committed to improve the software security of the open source community \\cite{owasp_home}. The\r\n-project members of \\textbf{OWASP} have worked together to produce a list of the most critical web\r\n-application security risks based on the community feedback and comprehensive data contributed by\r\n-different organizations. The list consists of ten categories of security attacks which are\r\n-considered to be the most dangerous and popular in the recent years. The list published by\r\n+committed to improve and raise the awareness of software security in the open source community\r\n+\\cite{owasp_home}. The project members of \\textbf{OWASP} have worked together to produce a list of\r\n+the most critical web application security risks based on the community feedback and comprehensive\r\n+data contributed by different organizations. The list consists of ten categories of security attacks\r\n+which are considered to be the most dangerous and popular in the recent years. The list published by\r\n \\textbf{OWASP} in 2017 \\cite{owasp_top10} will be analysed and the security risks listed in older\r\n versions of the top ten project will covered in this section too.\r\n \r\n@@ -285,6 +220,20 @@\n find all possible ways of the injection attacks.\r\n \r\n \\subsection{Broken Authentication}\r\n+Broken authentication happens when the attackers are allowed to perform malicious actions such as\r\n+brute force dictionary attack on the authentication system. It might also be one of the outcome of a\r\n+successful injection attack. According to Huluka and Popov \\cite{huluka_2012}, this vulnerability\r\n+are very prevalent and has various causes, in which the lack of attention to security details is the\r\n+most critial because developers often overlook certain scenarios which are likely to be exploited by\r\n+attackers.\r\n+\r\n+\\subsection{Using Componenets with Known Vulnerabilities}\r\n+Components such as plugins, libraries, and other modules can be found in most of the softwares.\r\n+Using components could reduce the amount of work and time required to develop a software. However,\r\n+these components are very likely to be maintained by different developers or organizations.\r\n+\r\n+\\section{Related Work}\r\n+\r\n \r\n % \\section{foo}\r\n % \\begin{table}[H]\r\n@@ -300,7 +249,34 @@\n \r\n % According to \\hyperref[table:celltable]{\\textbf{Table 3.1}}, \\ref{table:celltable}\r\n \r\n-% \\chapter{Requirements and Analysis}\r\n+\\chapter{Requirements and Analysis}\r\n+The purpose of this chapter is to discuss the problems to be solved and consider some of the core\r\n+decisions to be made before starting the implementation.\r\n+\r\n+\\section{Problems}\r\n+As mentioned in \\hyperref[sec:objectives]{\\textbf{Section 1.2}}, the repository mining tool must be\r\n+able to detect commits that contain distinct patterns such as \\textit{fix}, \\textit{patch},\r\n+\\textit{vulnerability} etc. After extracting a possible list of commits, it should perform an\r\n+evaluation process to identify the actual commits that fixed security vulnerability.\tThis could be\r\n+hard because not all open source software repositories are using the same programming language.\r\n+Hence, it might be difficult to determine the actual lines of code that addressed the\r\n+vulnerabilities.\r\n+\r\n+\\section{Proposed Method}\r\n+Build a command-line interface program that is able to run two separate process: the mining process\r\n+and the evaluation process. The \\textbf{mining} process takes a Git repository as input, searches\r\n+through the commit log, and return the list of commits that might potentially contain a patch as a\r\n+log file (JSON, HTML, etc.). The \\textbf{evaluation} process takes a log file as input, and check\r\n+the code difference of every commit in the log file to identify the real patches.\r\n+\r\n+\\section{Tools}\r\n+\\begin{itemize}\r\n+\t\\item PyGithub is a Python library build to access the GitHub API \\cite{pygithub}.\r\n+\t\\item GitPython is a Python library build to interact with Git repositories using a combination of\r\n+\tpython and git command implementation \\cite{gitpython}.\r\n+\t\\item Secbench Mining Tool is a repository mining tool build by The Quasar Research Group to mine\r\n+\tvulnerability patterns from GitHub repositories \\cite{secbench}.\r\n+\\end{itemize}\r\n \r\n % \\chapter{Design}\r\n \r\n"
      },
      {
        "file": "dissertation/references.bib",
        "diff": "--- \n+++ \n@@ -92,6 +92,16 @@\n   issn={0001-0782}\r\n }\r\n \r\n+@inproceedings{huluka_2012,\r\n+  author={Daniel Huluka and Oliver Popov},\r\n+  organization={IEEE},\r\n+  title={Root cause analysis of session management and broken authentication vulnerabilities},\r\n+  booktitle={World Congress on Internet Security (WorldCIS-2012)},\r\n+  pages={82-86},\r\n+  date={2012-06-12},\r\n+  isbn={978-1-908320-04-9}\r\n+}\r\n+\r\n @misc{linux_repo,\r\n   title={Linux kernel source tree},\r\n   url={https://github.com/torvalds/linux},\r\n"
      }
    ]
  }
}